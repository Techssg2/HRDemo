using Aeon.HR.BusinessObjects.Helpers.Constant;
using Aeon.HR.BusinessObjects.Interfaces;
using Aeon.HR.BusinessObjects.SQLExcute;
using Aeon.HR.Data.Models;
using Aeon.HR.Data.Models.CommonWorkflow;
using Aeon.HR.Infrastructure.Abstracts;
using Aeon.HR.Infrastructure.Constants;
using Aeon.HR.Infrastructure.Entities;
using Aeon.HR.Infrastructure.Enums;
using Aeon.HR.Infrastructure.Interfaces;
using Aeon.HR.ViewModels;
using Aeon.HR.ViewModels.Args;
using Aeon.HR.ViewModels.BTA;
using Aeon.HR.ViewModels.DTOs;
using Aeon.HR.ViewModels.Response;
using Aeon.HR.ViewModels.WorkflowIT;
using AutoMapper;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Text;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using static Aeon.HR.ViewModels.WorkflowIT.ITWorkflowParticipantViewModel;

namespace Aeon.HR.BusinessObjects.Handlers.Other
{
    public class PartnerBO : IPartnerBO
    {
        private readonly IUnitOfWork _uow;
        private readonly ILogger logger;
        private Guid? _refDeparmentId = null;
        private string ParticipantTypeGDStatus = (ConfigurationManager.AppSettings["ParticipantTypeGDStatus"] is null) ? "General Director Approval" : ConfigurationManager.AppSettings["ParticipantTypeGDStatus"];
        private string ParticipantTypeEDStatus = (ConfigurationManager.AppSettings["ParticipantTypeEDStatus"] is null) ? "Executive Director Approval" : ConfigurationManager.AppSettings["ParticipantTypeEDStatus"];
        private string IsConfidentialContract = (ConfigurationManager.AppSettings["IsConfidentialContract"] is null) ? "IsConfidentialContract" : ConfigurationManager.AppSettings["IsConfidentialContract"];
        public PartnerBO(IUnitOfWork uow, ILogger _logger)
        {
            _uow = uow;
            logger = _logger;
        }

        public async Task<ResultDTO> GetDepartmentTreeByFilter(QueryArgs args)
        {
            var lstDepartment = new List<DepartmentTreeViewModel>();
            IEnumerable<DepartmentTreeViewModel> departmentTree = new List<DepartmentTreeViewModel>();
            IEnumerable<DepartmentTreeViewModel> vmLstDepartment = null;

            Func<Task<List<DepartmentTreeViewModel>>> Prepare_AllListDepartment = async delegate ()
            {
                List<DepartmentTreeViewModel> returnValue = new List<DepartmentTreeViewModel>();
                try
                {
                    //var data = await _uow.GetRepository<Department>().FindByAsync<DepartmentTreeViewModel>(x => true && x.ITDepartment != null && x.ITDepartment.IsEdoc1.HasValue && x.ITDepartment.IsEdoc1.Value);
                    var data = await _uow.GetRepository<Department>().FindByAsync<DepartmentTreeViewModel>(args.Predicate, args.PredicateParameters);
                    if (args.IsGetAllOrg)
                    {
                        data = await _uow.GetRepository<Department>().FindByAsync<DepartmentTreeViewModel>(x => true);
                    } else
                    {
                        if (!string.IsNullOrEmpty(args.Module))
                        {
                            switch (args.Module)
                            {
                                case ModuleIntegrationsConstants.EDOC1:
                                    returnValue = data.Where(x => x.IsEdoc1.HasValue && x.IsEdoc1.Value == true).ToList();
                                    break;
                                case ModuleIntegrationsConstants.TRADECONTRACT:
                                    returnValue = data.Where(x => x.IsTradeContract.HasValue && x.IsTradeContract.Value == true).ToList();
                                    break;
                            }
                        }
                        else
                        {
                            // Mặc định
                            returnValue = data.Where(x => x.IsEdoc1.HasValue && x.IsEdoc1.Value == true).ToList();
                        }
                    }
                }
                catch
                {
                    returnValue = new List<DepartmentTreeViewModel>();
                }
                return returnValue;
            };

            lstDepartment = await Prepare_AllListDepartment();
            #region Local Func
            Func<object[], string> GetPredicateParameters = delegate (object[] predicateParameters)
            {
                string returnValue = "";
                try
                {
                    List<string> paramsList = args.PredicateParameters.Where(x => x != null).Select(x => x + "").ToList();
                    if (paramsList.Count == 1)
                    {
                        returnValue = paramsList[0];
                    }
                    else if (paramsList.Count > 1)
                    {
                        returnValue = paramsList.Aggregate((x, y) => x + "_" + y);
                    }
                }
                catch
                {
                    returnValue = "";
                }
                return returnValue;
            };

            Func<List<DepartmentTreeViewModel>> PrepareAllDeparmentInfo = delegate ()
            {
                List<DepartmentTreeViewModel> returnValue = new List<DepartmentTreeViewModel>();
                try
                {
                    var count = lstDepartment.Count();
                    for (int i = 0; i < count; i++)
                    {
                        var item = lstDepartment.ElementAt(i);
                        var items = lstDepartment.Where(y => y.ParentId == item.Id);
                        if (items.Any())
                        {
                            item.Items = items.OrderByDescending(x => x.Name);
                            returnValue.Add(item);
                        }
                    }
                    var existItems = lstDepartment.Where(x => !returnValue.Contains(x) && returnValue.Any(y => !y.Items.Contains(x)));
                    if (existItems.FirstOrDefault() != null)
                    {
                        returnValue.AddRange(existItems);
                    }
                    if (!returnValue.Any())
                    {
                        returnValue = lstDepartment.ToList();
                    }
                }
                catch
                {
                    returnValue = new List<DepartmentTreeViewModel>();
                }
                return returnValue;
            };
            #endregion

            List<DepartmentTreeViewModel> temp = PrepareAllDeparmentInfo();
            if (!string.IsNullOrEmpty(args.Predicate))
            {
                try
                {
                    vmLstDepartment = await _uow.GetRepository<Department>().FindByAsync<DepartmentTreeViewModel>(args.Predicate, args.PredicateParameters);
                } catch (Exception e)
                {

                }
                if (vmLstDepartment != null && vmLstDepartment.Any())
                {
                    var g9Department = vmLstDepartment.Any(x => !x.ParentId.HasValue);
                    if (g9Department)
                    {
                        departmentTree = lstDepartment.Where(x => !x.ParentId.HasValue && vmLstDepartment.Any(y => y.Id == x.Id));
                    }
                    else
                    {
                        var instances = temp.Where(x => !(x is null) && vmLstDepartment.Any(m => m.Id == x.Id) || x.Items.Any(y => vmLstDepartment.Any(k => k.Id == y.Id))).ToList();
                        departmentTree = instances.Where(x => vmLstDepartment.Any(y => y.Id == x.Id)).OrderByDescending(x => x.JobGradeGrade).ToList();
                    }
                }
            }
            else
            {
                departmentTree = temp.Where(x => !x.ParentId.HasValue);
            }

            ResultDTO result = new ResultDTO
            {
                Object = new ArrayResultDTO
                {
                    Data = departmentTree,
                    Count = 1,
                },
            };
            return result;
        }

        public async Task<ResultDTO> GetDepartmentDIC(QueryArgs args)
        {
            ResultDTO result = new ResultDTO { };
            try
            {
                if (args == null)
                {
                    args = new QueryArgs() { };
                }
                if (args.PredicateParameters.Any())
                {
                    args.Predicate += " and ";
                }
                if (args != null && string.IsNullOrEmpty(args.Order))
                    args.Order = "Created desc";

                args.Predicate += "ITDepartment.DICCode != null";
                IEnumerable<DepartmentTreeViewModel> departmentTree = await _uow.GetRepository<Department>().FindByAsync<DepartmentTreeViewModel>(args.Order, args.Page, args.Limit, args.Predicate, args.PredicateParameters);
                result = new ResultDTO
                {
                    Object = new ArrayResultDTO
                    {
                        Data = departmentTree,
                        Count = departmentTree.Count(),
                    },
                };
            } catch (Exception e)
            {

            }
            return result;
        }

        #region
        public async Task<ResultDTO> GetWorkflowTemplateByItem(ITWorkflowTemplateByItemArgs args)
        {
            try
            {
                var trackingLogAPI = new TrackingAPILogs() { Action = ActionAPIConstants.GETWORKFLOWTEMPLATE, Payload = JsonConvert.SerializeObject(args) };
                if (string.IsNullOrEmpty(args.ModuleCode))
                {
                    return new ResultDTO()
                    {
                        Messages = new List<string> { "Module Code is required!" },
                        ErrorCodes = new List<int> { -1 }
                    };
                }

                if (string.IsNullOrEmpty(args.FormTypeCode))
                {
                    return new ResultDTO()
                    {
                        Messages = new List<string> { "Form Type Code is required!" },
                        ErrorCodes = new List<int> { -1 }
                    };
                }

                if (args.AttributeItems is null)
                {
                    return new ResultDTO()
                    {
                        Messages = new List<string> { "Attribute Item is required!" },
                        ErrorCodes = new List<int> { -1 }
                    };
                }
                else
                {
                    if (args.AttributeItems.Any(x => string.IsNullOrEmpty(x.FieldValue) || string.IsNullOrEmpty(x.FieldValue)))
                    {
                        return new ResultDTO()
                        {
                            Messages = new List<string> { "Attribute Item Detail is invalid!" },
                            ErrorCodes = new List<int> { -1 }
                        };
                    }
                }
                var wfTemplates = await GetWorkflowTemplates(args);
                var resultDTO = new  ResultDTO()
                {
                    Object = wfTemplates.Any() ? wfTemplates.OrderByDescending(x => x.CountTrueCondition).ThenBy(x => x.Order).FirstOrDefault() : null,
                    Messages = !wfTemplates.Any() ? new List<string> { "Cannot find any workflow template with current params!" } : new List<string> { },
                    ErrorCodes = !wfTemplates.Any() ? new List<int> { -1 } : new List<int> { }
                };
                trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                await _uow.CommitAsync();
                return resultDTO;
            }
            catch (Exception ex)
            {
                return new ResultDTO()
                {
                    Messages = new List<string>() { ex.Message },
                    ErrorCodes = new List<int> { -1 }
                };
            }
        }

        private async Task<List<ITWorkflowTemplate>> GetWorkflowTemplates(ITWorkflowTemplateByItemArgs args)
        {
            List<ITWorkflowTemplate> matchedWfTemplates = new List<ITWorkflowTemplate>();
            var wfTemplates = await _uow.GetRepository<ITWorkflowTemplate>(true).FindByAsync(x => x.ModuleCode.ToLower().Equals(args.ModuleCode) && x.FormTypeCode.ToLower().Equals(args.FormTypeCode) && x.IsActivated, "order asc");
            var itemPros = await ExtractItemProperties(args.RequestedDepartmentCode, args.AttributeItems);

            if (args != null && args.AttributeItems != null && args.AttributeItems.Any(x => !string.IsNullOrEmpty(x.FieldName) 
            && x.FieldName.ToLower().Equals(IsConfidentialContract.ToLower()) && !string.IsNullOrEmpty(x.FieldValue) && x.FieldValue.ToLower().Equals("True".ToLower()))) {
                wfTemplates = wfTemplates.Where(x => x.WorkflowData != null && x.WorkflowData.StartWorkflowConditions != null
                && x.WorkflowData.StartWorkflowConditions.Any(y => !string.IsNullOrEmpty(y.FieldName) && y.FieldName.ToLower().Equals(IsConfidentialContract.ToLower()) && y.FieldValues.Any(z => z.ToLower().Equals("True".ToLower()))));
            }
            else if (args != null && args.AttributeItems != null && args.AttributeItems.Any(x => !string.IsNullOrEmpty(x.FieldName)
            && x.FieldName.ToLower().Equals("sapcode") && !string.IsNullOrEmpty(x.FieldValue)))
            {
                var usersapcode = args.AttributeItems.FirstOrDefault(x => x.FieldName.ToLower().Equals("sapcode")).FieldValue;
                //do sapcode tu edoc1 truyen ve bat tu bang chu "E"
                usersapcode = "00" + usersapcode.Substring(1);
                var userdept = await _uow.GetRepository<UserDepartmentMapping>().FindByAsync(x => x.User.SAPCode.Equals(usersapcode) && x.IsHeadCount);
                if (userdept.Any())
                {
                    var deptId = userdept.Select(ud => ud.DepartmentId).ToList();
                    var dept = await _uow.GetRepository<Department>().FindByAsync(x => deptId.Contains(x.Id) && !x.IsDeleted);
                    if (dept.Any())
                    {
                        var jobgrade = dept.Select(j => j.JobGrade.Caption.ToLower()).ToList();
                        wfTemplates = wfTemplates.Where(x => x.WorkflowData != null && x.WorkflowData.StartWorkflowConditions != null
                        && x.WorkflowData.StartWorkflowConditions.Any(y => !string.IsNullOrEmpty(y.FieldName) && y.FieldName.ToLower().Equals("jobgrade") && y.FieldValues.Any(z => jobgrade.Contains(z.ToLower()))));
                    }
                }
            }
            else
            {
                wfTemplates = wfTemplates.Where(x => x.WorkflowData != null && x.WorkflowData.StartWorkflowConditions != null
                && !x.WorkflowData.StartWorkflowConditions.Any(y => !string.IsNullOrEmpty(y.FieldName) && y.FieldName.ToLower().Equals(IsConfidentialContract.ToLower()) && y.FieldValues.Any(z => z.ToLower().Equals("True".ToLower()))));
            }
            foreach (var wfTemp in wfTemplates)
            {
                try
                {
                    if (wfTemp.WorkflowData != null)
                    {
                        int countTrueCondition = 0;
                        int countFailCondition = 0;
                        if (args.AttributeItems.Any())
                        {
                            var isValid = IsValidCondition(itemPros, wfTemp.WorkflowData.StartWorkflowConditions, out countTrueCondition, out countFailCondition);
                            if (countFailCondition == 0 && countTrueCondition > 0)
                            {
                                wfTemp.CountTrueCondition = countTrueCondition;
                                wfTemp.CountFailCondition = countFailCondition;
                                matchedWfTemplates.Add(wfTemp);
                            }
                        }
                        else
                            matchedWfTemplates.Add(wfTemp);
                    }
                }
                catch { }
            }

            return matchedWfTemplates;
        }

        private bool IsValidCondition(Dictionary<string, string> itemProperties, IList<ITWorkflowCondition> conditions, out int countTrueCondition, out int countFailCondition)
        {
            int count = 0;
            int countFail = 0;
            if (conditions != null)
            {
                foreach (var condition in conditions)
                {
                    var field = condition.FieldName.ToLowerInvariant().Trim().Replace("", "");
                    if (itemProperties.ContainsKey(field))
                    {
                        var extractedValue = itemProperties[field]?.Trim().ToLowerInvariant();
                        var isValid = IsValid(condition, extractedValue);
                        if (isValid)
                            count += 1;
                        else
                        {
                            countFail += 1;
                        }
                    }
                }
            }
            countTrueCondition = count;
            countFailCondition = countFail;
            return true;
        }

        

        private async Task<Dictionary<string, string>> ExtractItemProperties(string requestedDepartmentCode, List<AttributeItem> attributeItems)
        {
            var result = new Dictionary<string, string>();
            if (!string.IsNullOrEmpty(requestedDepartmentCode))
            {
                try
                {
                    var rqDepartment = await _uow.GetRepository<Department>(true).GetSingleAsync(x => x.Code == requestedDepartmentCode);
                    if (rqDepartment != null)
                    {
                        result["isstore"] = Convert.ToString(rqDepartment.IsStore);
                        result["ishr"] = Convert.ToString(rqDepartment.IsHR);
                        result["iscb"] = Convert.ToString(rqDepartment.IsCB);
                        result["isPerf"] = Convert.ToString(rqDepartment.IsPerfomance);
                        result["requestedjobgrade"] = Convert.ToString(rqDepartment.JobGrade.Grade);
                        result["requesteddepartment"] = Convert.ToString(rqDepartment.Name);
                        result["requesteddepartmentcode"] = Convert.ToString(rqDepartment.Code);
                        if (rqDepartment.BusinessModel != null && !string.IsNullOrEmpty(rqDepartment.BusinessModel.Code))
                        {
                            result["businessmodelcode"] = Convert.ToString(rqDepartment.BusinessModel.Code);
                        }
                        if (rqDepartment.ITDepartment != null && rqDepartment.ITDepartment.IsConstruction != null && rqDepartment.ITDepartment.IsConstruction.HasValue)
                        {
                            result["isconstruction"] = Convert.ToString(rqDepartment.ITDepartment.IsConstruction.Value);
                        } else
                            result["isconstruction"] = Convert.ToString(false);
                    }
                }
                catch (Exception e)
                {
                    logger.LogError("Error: Parse Requested Error: " + e.Message);
                }
            }

            foreach (var field in attributeItems)
            {
                if (!string.IsNullOrEmpty(field.FieldName) && !string.IsNullOrEmpty(field.FieldValue))
                {
                    result[field.FieldName.ToLower()] = Convert.ToString(field.FieldValue.ToLower());
                }
            }
            return result;
        }

        public bool IsNumeric(string value)
        {
            return value.All(char.IsNumber);
        }

        private bool IsValid(ITWorkflowCondition condition, string extractedValue)
        {
            if (condition.Operator && condition.FieldValues.Any())
            {
                if (IsNumeric(extractedValue))
                {
                    decimal extractedV = decimal.Parse(extractedValue);
                    foreach (var conV in condition.FieldValues)
                    {
                        if (IsNumeric(conV))
                        {
                            decimal conValue = decimal.Parse(conV);
                            if (condition.OperationValue.Equals("<"))
                            {
                                if (extractedV < conValue)
                                {
                                    return true;
                                }
                            }
                            else if (condition.OperationValue.Equals(">"))
                            {
                                if (extractedV > conValue)
                                {
                                    return true;
                                }
                            }
                            else if (condition.OperationValue.Equals("<="))
                            {
                                if (extractedV <= conValue)
                                {
                                    return true;
                                }
                            }
                            else if (condition.OperationValue.Equals(">="))
                            {
                                if (extractedV >= conValue)
                                {
                                    return true;
                                }
                            }
                        }
                    }
                }
            } else
            {
                foreach (var conV in condition.FieldValues)
                {
                    if (conV?.ToLowerInvariant().Trim() == extractedValue)
                    {
                        return true;
                    }
                }
            }
            
            return false;
        }
        #endregion
        public async Task<ResultDTO> StartWorkflow(StartWorkflowArgs args)
        {
            var trackingLogAPI = new TrackingAPILogs() { Action = ActionAPIConstants.STARTWORKFLOW, Payload = JsonConvert.SerializeObject(args) };
            var resultDTO = new ResultDTO() { };
            if (args != null && args.StepWithConditions == null) args.StepWithConditions = new List<AttributeItem>();
            var type = string.Empty;
            if (string.IsNullOrEmpty(args.WorkflowTemplateId))
            {
                return new ResultDTO()
                {
                    ErrorCodes = new List<int>() { -1 },
                    Messages = new List<string>() { "Workflow Template Id is required !" }
                };
            }

            Guid workflowTemplateId = Guid.Empty;
            if (!Guid.TryParse(args.WorkflowTemplateId, out workflowTemplateId))
            {
                return new ResultDTO()
                {
                    ErrorCodes = new List<int>() { -1 },
                    Messages = new List<string>() { "Workflow Template Id is invalid !" }
                };
            }

            //Found object, start workflow here
            ITWorkflowTemplate wfTemplate = await _uow.GetRepository<ITWorkflowTemplate>().FindByIdAsync(workflowTemplateId);
            if (wfTemplate is null)
            {
                return new ResultDTO()
                {
                    Messages = new List<string>() { "Workflow Template not found !" },
                    ErrorCodes = new List<int>() { -1 }
                };
            }

            Guid ItemId = Guid.Empty;
            if (!Guid.TryParse(args.ItemId, out ItemId))
            {
                return new ResultDTO()
                {
                    ErrorCodes = new List<int>() { -1 },
                    Messages = new List<string>() { "Item Id is invalid !" }
                };
            }
            trackingLogAPI.ItemId = ItemId;

            var validateWFInstance = await _uow.GetRepository<ITWorkflowInstance>().FindByAsync(x => x.ItemId == ItemId && !x.IsCompleted);
            if (validateWFInstance.Any())
            {
                return new ResultDTO()
                {
                    ErrorCodes = new List<int>() { -1 },
                    Messages = new List<string>() { "The item is already running workflow !" }
                };
            }

            if (string.IsNullOrEmpty(args.ReferenceNumber))
            {
                return new ResultDTO()
                {
                    Messages = new List<string>() { "ReferenceNumber is required !" },
                    ErrorCodes = new List<int>() { -1 }
                };
            }

            if (string.IsNullOrEmpty(args.CreatedItemByLoginName))
            {
                return new ResultDTO()
                {
                    Messages = new List<string>() { "Field CreatedItemByLoginName is required !" },
                    ErrorCodes = new List<int>() { -1 }
                };
            }

            var createdByItem = await _uow.GetRepository<User>(true).GetSingleAsync(x => x.LoginName.ToLower().Equals(args.CreatedItemByLoginName) && x.IsActivated && !x.IsDeleted);
            if (createdByItem is null)
            {
                return new ResultDTO()
                {
                    Messages = new List<string>() { "CreatedItemByLoginName is not exists ! - |" + args.CreatedItemByLoginName },
                    ErrorCodes = new List<int>() { -1 }
                };
            }

            //Clone workflow instance
            var wfInstance = new ITWorkflowInstance()
            {
                ITTemplateId = wfTemplate.Id,
                WorkflowData = wfTemplate.WorkflowData,
                ItemId = ItemId,
                ItemReferenceNumber = args.ReferenceNumber,
                WorkflowName = wfTemplate.WorkflowName,
                DefaultCompletedStatus = wfTemplate.DefaultCompletedStatus
            };

            if (args.StepWithConditions.Any())
                wfInstance.StepConditions = JsonConvert.SerializeObject(args.StepWithConditions);

            /*wfInstance.CurrentRoundWorkflowDataStr = string.IsNullOrEmpty(wfTemplate.WorkflowDataStr) ? "" : wfTemplate.WorkflowDataStr;
            var saveCurrentRound = this.SaveCurrentRoundWorkflowDataStr(wfTemplate.WorkflowData, args.StepWithConditions);
            if (saveCurrentRound.Steps.Any())
                wfInstance.CurrentRoundWorkflowDataStr = JsonConvert.SerializeObject(saveCurrentRound);*/

            _uow.GetRepository<ITWorkflowInstance>().Add(wfInstance);
            var F3ManualParticipants = new ParticipantF3Manual() { 
                ExecutiveDirector = string.IsNullOrEmpty(args.ExecutiveDirector) ? "" : args.ExecutiveDirector,
                GeneralManager = string.IsNullOrEmpty(args.GeneralManager) ? "" : args.GeneralManager,
                SeniorGeneralManager = string.IsNullOrEmpty(args.SeniorGeneralManager) ? "" : args.SeniorGeneralManager,
                Auditor = string.IsNullOrEmpty(args.Auditor) ? "" : args.Auditor,
            };
            var processNextStepReturn = await ProcessNextStep(true, args.IsSkipHOD, wfInstance, null, wfTemplate.WorkflowData?.Steps?.FirstOrDefault(), args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, args.CreatedItemByLoginName, args.Comment, args.MultipleParticipantCodes, true, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
            if (processNextStepReturn.WorkflowTasks.Any() && processNextStepReturn.WorkflowHistories.Any())
            {
                await _uow.CommitAsync();
                WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn()
                {
                    ItemStatus = wfInstance.ItemStatus,
                    ItemId = wfInstance.ItemId,
                    ReferenceNumber = wfInstance.ItemReferenceNumber,
                    WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                };

                if (modelReturn.WorkflowInstance.Any())
                {
                    modelReturn.WorkflowInstance[0].ITWorkflowHistories = processNextStepReturn.WorkflowHistories.Any() ? processNextStepReturn.WorkflowHistories : new List<ITWorkflowHistoryViewModel>() { };
                    modelReturn.WorkflowInstance[0].ITWorkflowTasks = processNextStepReturn.WorkflowTasks.Any() ? processNextStepReturn.WorkflowTasks : new List<ITWorkflowTaskViewModel>() { };
                }
                resultDTO.Object = modelReturn;
                try
                {
                    trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                    _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                    await _uow.CommitAsync();
                } catch (Exception e)
                {

                }
            }
            else
            {
                resultDTO.ErrorCodes = processNextStepReturn.ErrorCodes;
                resultDTO.Messages = processNextStepReturn.ErrorMessages;
                trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                await _uow.CommitAsync();
            }
            return resultDTO;
        }

        private async Task AutoPopulateNextStep(bool isStartWorkflow, bool? isSkipHOD, string comment, ITWorkflowHistory lastHistory, ITWorkflowStep nextStep, Guid ItemId, Guid? userId, Guid? departmentId, Department reqDepartment, string orderingDepartmentCode, string relatedDepartmentCode, string inchargeDepartmentCode, User reqUser, List<string> multipleParticipantCodes, List<AttributeItem> stepConditions, ParticipantF3Manual F3ManualParticipants, Guid? adminRequestorDepartmentId)
        {
            if (userId.HasValue || departmentId.HasValue)
            {
                bool autoNext = await IsAutoNext(isStartWorkflow, lastHistory, nextStep, userId, departmentId);
                string fieldNameRelatedDepartment = "RelatedDepartment";
                var fieldNameOrderingDepartment = "OrderingDepartment";
                var fieldNameInChargeDepartmentCode = "InChargeDepartmentCode";
                if (!string.IsNullOrEmpty(relatedDepartmentCode) && nextStep.IsStepWithConditions && nextStep.StepConditions.Any(x => x.FieldName.ToLower().Equals(fieldNameRelatedDepartment.ToLower())))
                {
                    stepConditions.Add(new AttributeItem() { FieldName = fieldNameRelatedDepartment, FieldValue = "NotNull" });
                }
                if (!string.IsNullOrEmpty(orderingDepartmentCode) && nextStep.IsStepWithConditions && nextStep.StepConditions.Any(x => x.FieldName.ToLower().Equals(fieldNameOrderingDepartment.ToLower())))
                {
                    stepConditions.Add(new AttributeItem() { FieldName = fieldNameOrderingDepartment, FieldValue = "NotNull" });
                }
                if (!string.IsNullOrEmpty(inchargeDepartmentCode) && nextStep.IsStepWithConditions && nextStep.StepConditions.Any(x => x.FieldName.ToLower().Equals(fieldNameInChargeDepartmentCode.ToLower())))
                {
                    stepConditions.Add(new AttributeItem() { FieldName = fieldNameInChargeDepartmentCode, FieldValue = "NotNull" });
                }

                if (autoNext)
                {
                    await Vote(new VoteArgs()
                    {
                        Vote = VoteType.Approve,
                        Comment = comment,
                        ItemId = ItemId,
                        RequestDepartmentCode = reqDepartment != null ? reqDepartment.Code : null,
                        ApproverLoginName = reqUser.LoginName,
                        MultipleParticipantCodes = multipleParticipantCodes,
                        RelatedDepartmentCode = relatedDepartmentCode,
                        OrderingDepartmentCode = orderingDepartmentCode,
                        InChargeDepartmentCode = inchargeDepartmentCode,
                        IsSkipHOD = isSkipHOD,
                        StepWithConditions = stepConditions,
                        GeneralManager = string.IsNullOrEmpty(F3ManualParticipants.GeneralManager) ? "" : F3ManualParticipants.GeneralManager,
                        ExecutiveDirector = string.IsNullOrEmpty(F3ManualParticipants.ExecutiveDirector) ? "" : F3ManualParticipants.ExecutiveDirector,
                        SeniorGeneralManager = string.IsNullOrEmpty(F3ManualParticipants.SeniorGeneralManager) ? "" : F3ManualParticipants.SeniorGeneralManager,
                        Auditor = string.IsNullOrEmpty(F3ManualParticipants.Auditor) ? "" : F3ManualParticipants.Auditor,
                        AdminRequestorDepartmentId = adminRequestorDepartmentId
                    });
                }
            }
            else if (nextStep.IgnoreIfNoParticipant)
            {
                var wfInstance = lastHistory.ITInstance;
                /*var newNextStep = wfInstance.WorkflowData.Steps.FirstOrDefault(x => x.StepNumber == nextStep.StepNumber + 1);*/
                var newNextStep = wfInstance.WorkflowData.Steps.GetNextStep(nextStep, stepConditions);
                var newLastHistory = await _uow.GetRepository<ITWorkflowHistory>().GetSingleAsync(x => x.ITInstanceId == wfInstance.Id, "Created desc");

                if (newNextStep != null)
                {
                    bool nextStepIsHODChecker = newNextStep.ParticipantType.ToLower().Equals("RequestedDept".ToLower()) && newNextStep.DepartmentType == Group.CheckerFIN;
                    if (nextStepIsHODChecker && reqDepartment != null)
                    {
                        var requestedDepartment = await _uow.GetRepository<Department>().GetSingleAsync<DepartmentViewModel>(x => x.Code == reqDepartment.Code);
                        if (requestedDepartment != null)
                        {
                            if (requestedDepartment.NeedHODOrderingCheckerApproval != null
                            && requestedDepartment.NeedHODOrderingCheckerApproval.HasValue
                            && !requestedDepartment.NeedHODOrderingCheckerApproval.Value)
                            {
                                newNextStep = wfInstance.WorkflowData.Steps.GetNextStep(newNextStep, stepConditions);
                            }
                        }
                    }
                }

                if (newNextStep != null)
                {
                    bool nextStepIsOrderingChecker = newNextStep.ParticipantType.ToLower().Equals("OrderingDept".ToLower()) && newNextStep.DepartmentType == Group.CheckerFIN;
                    if (nextStepIsOrderingChecker && !string.IsNullOrEmpty(orderingDepartmentCode))
                    {
                        var orderingDepartment = await _uow.GetRepository<Department>().GetSingleAsync<DepartmentViewModel>(x => x.Code == orderingDepartmentCode);
                        if (orderingDepartment != null)
                        {
                            if (orderingDepartment.NeedHODOrderingCheckerApproval != null
                            && orderingDepartment.NeedHODOrderingCheckerApproval.HasValue
                            && !orderingDepartment.NeedHODOrderingCheckerApproval.Value)
                            {
                                newNextStep = wfInstance.WorkflowData.Steps.GetNextStep(newNextStep, stepConditions);
                            }
                        }
                    }
                }

                if (newNextStep != null)
                {
                    bool nextStepIsDICChecker = newNextStep.ParticipantType.ToLower().Equals("isDIC".ToLower()) && newNextStep.DepartmentType == Group.CheckerFIN;
                    if (nextStepIsDICChecker && !string.IsNullOrEmpty(inchargeDepartmentCode))
                    {
                        var inchargeDepartment = await _uow.GetRepository<Department>().GetSingleAsync<DepartmentViewModel>(x => x.Code == inchargeDepartmentCode);
                        if (inchargeDepartment != null)
                        {
                            if (inchargeDepartment.NeedDICCheckerApproval != null
                            && inchargeDepartment.NeedDICCheckerApproval.HasValue
                            && !inchargeDepartment.NeedDICCheckerApproval.Value)
                            {
                                newNextStep = wfInstance.WorkflowData.Steps.GetNextStep(newNextStep, stepConditions);
                            }
                        }
                    }
                }

                await ProcessNextStep(false, null, wfInstance, newLastHistory, newNextStep, (reqDepartment != null ? reqDepartment.Code : null), orderingDepartmentCode, relatedDepartmentCode, inchargeDepartmentCode, reqUser.LoginName, comment, multipleParticipantCodes, true, stepConditions, F3ManualParticipants, adminRequestorDepartmentId);
            }
        }



        public async Task<ResultDTO> Vote(VoteArgs args)
        {
            var trackingLogAPI = new TrackingAPILogs() { Action = ActionAPIConstants.VOTE, Payload = JsonConvert.SerializeObject(args) };
            var F3ManualParticipants = new ParticipantF3Manual()
            {
                ExecutiveDirector = string.IsNullOrEmpty(args.ExecutiveDirector) ? "" : args.ExecutiveDirector,
                GeneralManager = string.IsNullOrEmpty(args.GeneralManager) ? "" : args.GeneralManager,
                SeniorGeneralManager = string.IsNullOrEmpty(args.SeniorGeneralManager) ? "" : args.SeniorGeneralManager,
                Auditor = string.IsNullOrEmpty(args.Auditor) ? "" : args.Auditor
            };
            var resultDTO = new ResultDTO() { };
            try
            {
                if (string.IsNullOrEmpty(args.ApproverLoginName))
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { "Approver Login Name is required!" }
                    };
                }

                var approverUser = await _uow.GetRepository<User>().GetSingleAsync(x => x.LoginName == args.ApproverLoginName && x.IsActivated && !x.IsDeleted, "Created desc");
                if (approverUser is null)
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { "Approver not found !" }
                    };
                }

                #region feature update completed for role IT
                if ((approverUser.Role & UserRole.ITHelpDesk) != UserRole.ITHelpDesk && args.Vote == VoteType.Completed)
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { "You don't have permission Completed Item!" }
                    };
                }
                #endregion

                var approverUserDepartmentMapping = await _uow.GetRepository<UserDepartmentMapping>().FindByAsync(x => x.DepartmentId.HasValue && x.UserId == approverUser.Id, "Created desc");
                if (approverUserDepartmentMapping is null)
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { "Not found Approver in Department with SAPCode ! -| " + approverUser.SAPCode }
                    };
                }
                trackingLogAPI.ItemId = args.ItemId;

                var wfInstance = await _uow.GetRepository<ITWorkflowInstance>().GetSingleAsync(x => x.ItemId == args.ItemId , "Created desc");
                if (wfInstance is null)
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { " Cannot find any running Item ! " }
                    };
                } else
                {
                    try
                    {
                        if (wfInstance.StepConditions != null && wfInstance.StepConditions.Any())
                        {
                            var oldCondition = Mapper.Map<List<AttributeItem>>(JsonConvert.DeserializeObject<List<AttributeItem>>(wfInstance.StepConditions));
                            if (oldCondition.Any())
                            {
                                foreach(var conditon in args.StepWithConditions)
                                {
                                    if (conditon.FieldName != null && !oldCondition.Any(x => x.FieldName.Equals(conditon.FieldName)))
                                        oldCondition.Add(conditon);
                                }
                                wfInstance.StepConditions = JsonConvert.SerializeObject(oldCondition);
                            }
                        } else
                        {
                            if (args.StepWithConditions != null && args.StepWithConditions.Any())
                            {
                                wfInstance.StepConditions = JsonConvert.SerializeObject(args.StepWithConditions);
                            }
                        }
                    }
                    catch (Exception e) { }
                }

                if (wfInstance.IsCompleted && ((approverUser.Role & UserRole.ITHelpDesk) != UserRole.ITHelpDesk))
                {
                    if (!wfInstance.IsTerminated)
                    {
                        return new ResultDTO()
                        {
                            ErrorCodes = new List<int> { -1 },
                            Messages = new List<string>() { "Workflow is completed!" }
                        };
                    }
                }
                var wfTemplate = _uow.GetRepository<ITWorkflowTemplate>(true).GetSingle(x => x.Id == wfInstance.ITTemplateId);
                bool wfModuleTradeContract = (wfTemplate != null && wfTemplate.ModuleCode.ToLower().Equals(ModuleIntegrationsConstants.TRADECONTRACT.ToLower())) ? true : false;
                
                /*var allLastHistory = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => 
                x.ITInstanceId == wfInstance.Id
                && approverUserDepartmentMapping.Any(y => (y.UserId == x.AssignedToUserId) || (y.DepartmentId == x.AssignedToDepartmentId && y.Role == x.AssignedToDepartmentType))
                && !x.IsStepCompleted
                , "Created desc");*/

                var allLastHistory = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x =>
                    x.ITInstanceId == wfInstance.Id
                    //&& (userIds.Contains(x.AssignedToUserId) || departmentMappings.Any(y => y.DepartmentId == x.AssignedToDepartmentId && y.Role == x.AssignedToDepartmentType))
                    && !x.IsStepCompleted
                    , "Created desc");
                if ((args.Vote != VoteType.Reject && args.Vote != VoteType.Cancel && args.Vote != VoteType.Completed && args.Vote != VoteType.Resubmit) 
                    || (args.Vote == VoteType.RequestToChange && wfModuleTradeContract))
                {
                    allLastHistory = allLastHistory.Where(x =>
                    approverUserDepartmentMapping.Any(y => (
                    (y.DepartmentId == x.AssignedToDepartmentId) && 
                    (
                    (y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any() ? y.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any(p => !p.IsDeleted && p.ModuleDepartmentGroup.GroupCode == ((int) x.AssignedToDepartmentType)) : false) ||
                    (y.Role == x.AssignedToDepartmentType) || (y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.GroupEdoc1.HasValue ? y.ITUserDepartmentMapping.GroupEdoc1.Value == x.AssignedToDepartmentType : false))) || 
                    (x.AssignedToUserId == y.UserId))).ToList();
                    if (!allLastHistory.Any())
                    {
                        return new ResultDTO()
                        {
                            ErrorCodes = new List<int> { -1 },
                            Messages = new List<string>() { "You don't have permission approve !" }
                        };
                    }
                }

                var allCurrentTaskTask = await _uow.GetRepository<ITWorkflowTask>().FindByAsync(x =>
                    x.ItemId == args.ItemId
                    //&& (userIds.Contains(x.AssignedToId) || departmentMappings.Any(y => y.DepartmentId == x.AssignedToDepartmentId && y.Role == x.AssignedToDepartmentGroup))
                    && !x.IsCompleted
                    , "Created desc");

                #region kiem tra phai requestor hay khong
                bool isRequestor = false;
                var submitStep = await _uow.GetRepository<ITWorkflowTask>().GetSingleAsync(x => x.ItemId == args.ItemId, "created asc");
                if (submitStep != null && !string.IsNullOrEmpty(submitStep.CreatedBy))
                    isRequestor = submitStep.CreatedBy == args.ApproverLoginName;
                #endregion

                if (args.Vote != VoteType.Reject && args.Vote != VoteType.Cancel && args.Vote != VoteType.Completed && args.Vote != VoteType.Resubmit
                    || (args.Vote == VoteType.RequestToChange && wfModuleTradeContract))
                {
                    allCurrentTaskTask = allCurrentTaskTask.Where(x => 
                    approverUserDepartmentMapping.Any(y => 
                    (y.UserId == x.AssignedToId) || 
                    (y.DepartmentId == x.AssignedToDepartmentId && (
                    (y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any() ? y.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any(p => !p.IsDeleted && p.ModuleDepartmentGroup.GroupCode == ((int)x.AssignedToDepartmentGroup)) : false) ||
                    (y.Role == x.AssignedToDepartmentGroup) || (y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.GroupEdoc1.HasValue ? y.ITUserDepartmentMapping.GroupEdoc1.Value == x.AssignedToDepartmentGroup : false)) ) 
                    )).ToList();
                    //If user cancel incase of pending, the tasks was not generated
                    if (!allCurrentTaskTask.Any())
                    {
                        return new ResultDTO()
                        {
                            ErrorCodes = new List<int> { -1 },
                            Messages = new List<string>() { "You don't have permission approve !" }
                        };
                    }
                }

                var currentTask = new ITWorkflowTask();
                if (allCurrentTaskTask.Any())
                {
                    currentTask = allCurrentTaskTask.OrderBy(x => x.Created).FirstOrDefault();
                    // update cac phieu da duyet song song
                    if (allCurrentTaskTask.Count() > 1)
                    {
                        foreach (var i in allCurrentTaskTask/*.Where(i => i.Id != currentTask.Id).ToList()*/)
                        {
                            i.IsCompleted = true;
                            i.Vote = args.Vote;
                            i.Modified = DateTimeOffset.Now;
                            i.ModifiedBy = approverUser.LoginName;
                            i.ModifiedByFullName = approverUser.FullName;
                            i.ModifiedById = approverUser.Id;
                            _uow.GetRepository<ITWorkflowTask>().Update(i);

                            #region Process nhung task con BMHD
                            var childTask = await _uow.GetRepository<ITWorkflowTask>().FindByAsync(x => x.ParentTaskId == i.Id && !x.IsCompleted && x.ITWorkflowInstanceId == wfInstance.ItemId);
                            if (childTask.Any())
                            {
                                foreach (var z in childTask)
                                {
                                    z.IsCompleted = true;
                                    z.Vote = VoteType.None;
                                    z.Modified = DateTimeOffset.Now;
                                    z.ModifiedBy = approverUser.LoginName;
                                    z.ModifiedByFullName = approverUser.FullName;
                                    z.ModifiedById = approverUser.Id;
                                    _uow.GetRepository<ITWorkflowTask>().Update(z);
                                }
                            }
                            #endregion
                        }
                    } else
                    {
                        currentTask.IsCompleted = true;
                        currentTask.Vote = args.Vote;
                        currentTask.ModifiedBy = approverUser.LoginName;
                        currentTask.ModifiedByFullName = approverUser.FullName;
                        currentTask.ModifiedById = approverUser.Id;
                        _uow.GetRepository<ITWorkflowTask>().Update(currentTask);

                        #region Process nhung task con BMHD
                        var childTask = await _uow.GetRepository<ITWorkflowTask>().FindByAsync(x => x.ParentTaskId == currentTask.Id && !x.IsCompleted && x.ITWorkflowInstanceId == wfInstance.ItemId);
                        if (childTask.Any())
                        {
                            foreach (var z in childTask)
                            {
                                z.IsCompleted = true;
                                z.Vote = VoteType.None;
                                z.Modified = DateTimeOffset.Now;
                                z.ModifiedBy = approverUser.LoginName;
                                z.ModifiedByFullName = approverUser.FullName;
                                z.ModifiedById = approverUser.Id;
                                _uow.GetRepository<ITWorkflowTask>().Update(z);
                            }
                        }
                        #endregion
                    }
                    await _uow.CommitAsync();
                }

                var lastHistory = new ITWorkflowHistory();
                if (allLastHistory.Any())
                {
                    lastHistory = allLastHistory.OrderBy(x => x.Created).FirstOrDefault();
                    if (allLastHistory.Count() > 1)
                    {
                        // update cac histories lien quan cua duyet song song
                        foreach (var i in allLastHistory.Where(i => i.Id != lastHistory.Id).ToList())
                        {
                            i.VoteType = args.Vote;
                            i.Modified = DateTime.Now;
                            i.Comment = args.Comment;
                            i.ApproverId = approverUser.Id;
                            i.Approver = approverUser.LoginName;
                            i.ApproverFullName = approverUser.FullName;
                            i.Outcome = (args.Vote == VoteType.Approve) ? "Approved" : "Rejected";
                            i.IsStepCompleted = true;
                            #region Only cancel, reject when authorized
                            if (args.Vote == VoteType.Cancel || args.Vote == VoteType.Reject || args.Vote == VoteType.RequestToChange)
                            {
                                #region Only cancel, reject when authorized
                                if (args.Vote == VoteType.Cancel || args.Vote == VoteType.Reject)
                                    this.CancelledRejectedWhenAuthorized(isRequestor, approverUserDepartmentMapping.ToList(), i);
                                #endregion
                            }
                            #endregion
                            _uow.GetRepository<ITWorkflowHistory>().Update(i);

                            #region Process nhung task con BMHD
                            var childAllHistory = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => x.ParentHistoryId == i.Id && !x.IsStepCompleted && x.ITInstanceId == wfInstance.ItemId);
                            if (childAllHistory.Any())
                            {
                                foreach (var z in childAllHistory)
                                {
                                    z.VoteType = VoteType.None;
                                    z.Modified = DateTime.Now;
                                    /*z.Comment = args.Comment;*/
                                    z.ApproverId = approverUser.Id;
                                    z.Approver = approverUser.LoginName;
                                    z.ApproverFullName = approverUser.FullName;
                                    /*z.Outcome = (args.Vote == VoteType.Approve) ? "Approved" : "Rejected";*/
                                    z.IsStepCompleted = true;
                                    _uow.GetRepository<ITWorkflowHistory>().Update(z);
                                }
                            }
                            #endregion
                        }
                        await _uow.CommitAsync();
                    }
                }

                var currentStep = wfInstance.WorkflowData.Steps.FirstOrDefault(x => x.StepNumber == lastHistory.StepNumber);
                lastHistory.VoteType = args.Vote;
                lastHistory.Modified = DateTime.Now;
                lastHistory.Comment = args.Comment;
                lastHistory.ApproverId = approverUser.Id;
                lastHistory.Approver = approverUser.LoginName;
                lastHistory.ApproverFullName = approverUser.FullName;
                lastHistory.IsStepCompleted = true;

                #region Process nhung task con BMHD
                var childLastHistory = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => x.ParentHistoryId == lastHistory.Id && !x.IsStepCompleted && x.ITInstanceId == wfInstance.Id);
                if (childLastHistory.Any())
                {
                    foreach (var z in childLastHistory)
                    {
                        z.VoteType = VoteType.None;
                        z.Modified = DateTime.Now;
                        /*z.Comment = args.Comment;
                        z.ApproverId = approverUser.Id;*/
                        z.Approver = approverUser.LoginName;
                        z.ApproverFullName = approverUser.FullName;
                        /*z.Outcome = (args.Vote == VoteType.Approve) ? "Approved" : "Rejected";*/
                        z.IsStepCompleted = true;
                        _uow.GetRepository<ITWorkflowHistory>().Update(z);
                    }
                }
                #endregion

                #region Only cancel, reject when authorized
                if (args.Vote == VoteType.Cancel || args.Vote == VoteType.Reject || args.Vote == VoteType.RequestToChange)
                    this.CancelledRejectedWhenAuthorized(isRequestor, approverUserDepartmentMapping.ToList(), lastHistory);
                #endregion
                ITWorkflowStep nextStep = null;
                if (args.Vote == VoteType.Approve)
                {
                    lastHistory.Outcome = currentStep.OnSuccess;
                    nextStep = wfInstance.WorkflowData.Steps.GetNextStep(currentStep, args.StepWithConditions);
                    var prefixModule = wfInstance.ItemReferenceNumber.Substring(0, 2);
                    // rule skip for HOD (co thay doi gia tri)
                    if (args.IsSkipHOD.HasValue && args.IsSkipHOD.Value)
                    {
                        var skipHOD = ConfigurationManager.AppSettings["ListModuleSkipHOD"] != null ? ConfigurationManager.AppSettings["ListModuleSkipHOD"] : "PR,RP,RE,CA";
                        var listModuleSkipHOD = skipHOD.Split(',');
                        if (listModuleSkipHOD != null && listModuleSkipHOD.Any() && listModuleSkipHOD.Contains(prefixModule))
                        {
                            var stepHODApproval = wfInstance.WorkflowData.Steps.Where(x => x.DefaultStatus.ToLower().Replace(" ", "").Equals("hodapproval")).FirstOrDefault();
                            if (stepHODApproval != null)
                                nextStep = wfInstance.WorkflowData.Steps.GetNextStep(stepHODApproval, args.StepWithConditions);
                        }
                    }

                    // kiem ta user co tich is need
                    if (!string.IsNullOrEmpty(args.RequestDepartmentCode) && prefixModule.Equals("F2"))
                    {
                        var requestedDepartment = await _uow.GetRepository<Department>().GetSingleAsync<DepartmentViewModel>(x => x.Code == args.RequestDepartmentCode);
                        if (requestedDepartment != null && nextStep != null)
                        {
                            bool nextStepIsHODChecker = nextStep.ParticipantType.ToLower().Equals("RequestedDept".ToLower()) && nextStep.DepartmentType == Group.CheckerFIN;

                            if (nextStepIsHODChecker)
                            {
                                if (requestedDepartment.NeedHODOrderingCheckerApproval != null
                                && requestedDepartment.NeedHODOrderingCheckerApproval.HasValue
                                && !requestedDepartment.NeedHODOrderingCheckerApproval.Value)
                                {
                                    nextStep = wfInstance.WorkflowData.Steps.GetNextStep(nextStep, args.StepWithConditions);
                                }
                            }

                            if (nextStep != null)
                            {
                                bool nextStepIsOrderingChecker = nextStep.ParticipantType.ToLower().Equals("OrderingDept".ToLower()) && nextStep.DepartmentType == Group.CheckerFIN;
                                if (nextStepIsOrderingChecker && !string.IsNullOrEmpty(args.OrderingDepartmentCode))
                                {
                                    var orderingDepartment = await _uow.GetRepository<Department>().GetSingleAsync<DepartmentViewModel>(x => x.Code == args.OrderingDepartmentCode);
                                    if (orderingDepartment != null)
                                    {
                                        if (orderingDepartment.NeedHODOrderingCheckerApproval != null
                                        && orderingDepartment.NeedHODOrderingCheckerApproval.HasValue
                                        && !orderingDepartment.NeedHODOrderingCheckerApproval.Value)
                                        {
                                            nextStep = wfInstance.WorkflowData.Steps.GetNextStep(nextStep, args.StepWithConditions);
                                        }
                                    }
                                }
                            }

                            if (nextStep != null)
                            {
                                bool nextStepIsDICChecker = nextStep.ParticipantType.ToLower().Equals("isDIC".ToLower()) && nextStep.DepartmentType == Group.CheckerFIN;
                                if (nextStepIsDICChecker && !string.IsNullOrEmpty(args.InChargeDepartmentCode))
                                {
                                    var inchargeDepartment = await _uow.GetRepository<Department>().GetSingleAsync<DepartmentViewModel>(x => x.Code == args.InChargeDepartmentCode);
                                    if (inchargeDepartment != null)
                                    {
                                        if (inchargeDepartment.NeedDICCheckerApproval != null
                                        && inchargeDepartment.NeedDICCheckerApproval.HasValue
                                        && !inchargeDepartment.NeedDICCheckerApproval.Value)
                                        {
                                            nextStep = wfInstance.WorkflowData.Steps.GetNextStep(nextStep, args.StepWithConditions);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (args.Vote == VoteType.Completed)
                {
                    lastHistory.Outcome = "Completed";
                }
                else if (args.Vote == VoteType.Reject)
                {
                    //lastHistory.Outcome = !string.IsNullOrEmpty(currentStep.OnFailure) ? currentStep.OnFailure : "Rejected";
                    wfInstance.ItemStatus = "Rejected";
                }
                else if (args.Vote == VoteType.Cancel)
                {
                    wfInstance.ItemStatus = "Cancelled";
                    /*lastHistory.Outcome = "Cancelled";
                    lastHistory.VoteType = VoteType.Cancel;*/
                    /*if (string.IsNullOrEmpty(wfInstance.WorkflowData.OnCancelled))
                    {
                        lastHistory.Outcome = "Cancelled";
                    }
                    else
                    {
                        lastHistory.Outcome = wfInstance.WorkflowData.OnCancelled;
                    } Khoa */
                }
                /*await UpdatePermission(item.Entity.Id, Right.View);*/
                await _uow.CommitAsync();
                if (args.Vote == VoteType.RequestToChange)
                {
                    #region Process request to change
                    if (!currentStep.AllowRequestToChange || (lastHistory.IsParallelApprove.HasValue && !lastHistory.IsParallelApprove.Value))
                    {
                        /*return new ResultDTO()
                        {
                            ErrorCodes = new List<int> { -1 },
                            Messages = new List<string>() { "Current step is cannot request to change !" }
                        };*/
                    }
                    else
                    {
                        if (lastHistory.IsParallelApprove.HasValue && lastHistory.IsParallelApprove.Value && !(args.Vote == VoteType.RequestToChange && wfModuleTradeContract))
                        {
                            await UpdateStatusAllStep(lastHistory);
                            currentStep = wfInstance.WorkflowData.Steps.Where(x => x.StepNumber == lastHistory.ParallelStep).FirstOrDefault();
                        }
                    }
                    string itemStatus = wfInstance.ItemStatus;
                    bool updateStatusRTC = false;
                    if (lastHistory.IsParallelApprove.HasValue && lastHistory.IsParallelApprove.Value && (args.Vote == VoteType.RequestToChange && wfModuleTradeContract))
                    {
                        // Giu nguyen trang thai cua step hien tai
                        var allWfHis = _uow.GetRepository<ITWorkflowHistory>(true).FindBy(x => x.ITInstanceId == wfInstance.Id && x.ParallelStep == lastHistory.ParallelStep && !x.IsStepCompleted);
                        updateStatusRTC = allWfHis.Any() ? false : true;
                    }
                    else updateStatusRTC = true;

                    if (updateStatusRTC)
                    {
                        itemStatus = "Requested To Change";
                        wfInstance.IsTerminated = true;
                        wfInstance.IsCompleted = true;
                        wfInstance.ItemStatus = itemStatus;
                    }

                    //Send email notification
                    if (currentStep.ReturnToStepNumber == 0 || currentStep.ReturnToStepNumber == 1)
                    {
                        if (wfModuleTradeContract && lastHistory.IsParallelApprove != null && lastHistory.IsParallelApprove.Value == true)
                        {
                            var modelReturn = new WorkflowProcessingStageReturn() {};
                            var workflowHistories = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => x.ITInstanceId == wfInstance.Id && x.IsParallelApprove.Value && x.ParallelStep == lastHistory.ParallelStep, "StepNumber desc");
                            var maxHistories = workflowHistories.OrderByDescending(x => x.StepNumber).FirstOrDefault();
                            currentStep = wfInstance.WorkflowData.Steps.FirstOrDefault(x => x.StepNumber == maxHistories.StepNumber);
                            nextStep = wfInstance.WorkflowData.Steps.GetNextStep(currentStep, args.StepWithConditions);

                            if (nextStep.IsParallelApprove != null && nextStep.IsParallelApprove.HasValue && nextStep.IsParallelApprove.Value)
                            {
                                var processNextStepReturn = await ProcessNextStep(false, null, wfInstance, lastHistory, nextStep, args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, approverUser.LoginName, args.Comment, args.MultipleParticipantCodes, false, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                                if (processNextStepReturn.ErrorCodes.Any() || processNextStepReturn.ErrorMessages.Any())
                                {
                                    resultDTO = new ResultDTO() { Object = null, ErrorCodes = processNextStepReturn.ErrorCodes, Messages = processNextStepReturn.ErrorMessages }; ;
                                    trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                    _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                    await _uow.CommitAsync();
                                    return resultDTO;
                                }
                                else
                                {
                                    await this.UpdateParallelStep(processNextStepReturn.WorkflowHistories.FirstOrDefault().Id, processNextStepReturn.WorkflowTasks.FirstOrDefault().Id, nextStep.StepNumber);
                                    await _uow.CommitAsync();
                                    modelReturn = new WorkflowProcessingStageReturn()
                                    {
                                        ItemStatus = wfInstance.ItemStatus,
                                        ItemId = wfInstance.ItemId,
                                        ReferenceNumber = wfInstance.ItemReferenceNumber,
                                        WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                                    };
                                    List<ITWorkflowTaskViewModel> wfTaskReturn = new List<ITWorkflowTaskViewModel>() { };
                                    List<ITWorkflowHistoryViewModel> wfHistoriesReturn = new List<ITWorkflowHistoryViewModel>() { };
                                    var resultDto = new ResultDTO();
                                    var step = wfInstance.WorkflowData.Steps.Where(x => x.StepNumber == nextStep.StepNumber).FirstOrDefault();
                                    HashSet<int> alreadyCreateStep = new HashSet<int>();
                                    foreach (var stepNum in nextStep.ParallelStep.OrderBy(x => x).ToList())
                                    {
                                        try
                                        {
                                            var nxStep = wfInstance.WorkflowData.Steps.GetNextStep(step, args.StepWithConditions);
                                            if (!nextStep.ParallelStep.Contains(nxStep.StepNumber)) break;
                                            // kiem tra cac step tiep theo co cung, kiem tra cac step da tao hay chua
                                            if (!alreadyCreateStep.Contains(nxStep.StepNumber))
                                            {
                                                processNextStepReturn = await ProcessNextStep(false, null, wfInstance, workflowHistories.Where(x => x.StepNumber == maxHistories.StepNumber).OrderByDescending(y => y.StepNumber).ToList().FirstOrDefault(), nxStep, args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, approverUser.LoginName, args.Comment, args.MultipleParticipantCodes, false, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                                                var workflowHis = (!(processNextStepReturn.WorkflowHistories is null) && processNextStepReturn.WorkflowHistories.Any()) ? processNextStepReturn.WorkflowHistories.FirstOrDefault() : null;
                                                var workflowTask = (!(processNextStepReturn.WorkflowTasks is null) && processNextStepReturn.WorkflowTasks.Any()) ? processNextStepReturn.WorkflowTasks.FirstOrDefault() : null;

                                                if (!(workflowHis is null) && !(workflowTask is null))
                                                {
                                                    alreadyCreateStep.Add(nxStep.StepNumber);
                                                    await _uow.CommitAsync();
                                                    wfHistoriesReturn.Add(workflowHis);
                                                    wfTaskReturn.Add(workflowTask);
                                                    // cap nhat task duyet song song voi step nao || cap nhat histories duyet song song voi step nao
                                                    await this.UpdateParallelStep(workflowHis.Id, workflowTask.Id, nextStep.StepNumber);
                                                }
                                                else
                                                {
                                                    resultDto.ErrorCodes.Add(processNextStepReturn.ErrorCodes.FirstOrDefault());
                                                    resultDto.Messages.Add(processNextStepReturn.ErrorMessages.FirstOrDefault());
                                                }
                                            }
                                            // step tiep theo
                                            step = wfInstance.WorkflowData.Steps.Where(x => x.StepNumber == stepNum).FirstOrDefault();
                                            if (!nextStep.ParallelStep.Contains(step.StepNumber)) break;
                                        }
                                        catch (Exception e)
                                        {
                                            resultDto.ErrorCodes.Add(-1);
                                            resultDto.Messages.Add("Error in process Loop ParallelStep: " + e.Message);
                                        }
                                    }
                                    if (resultDto.ErrorCodes.Any())
                                    {
                                        trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                        _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                        await _uow.CommitAsync();
                                        return resultDTO;
                                    }
                                    else
                                    {

                                        if (modelReturn.WorkflowInstance.Any())
                                        {
                                            modelReturn.WorkflowInstance[0].ITWorkflowHistories = wfHistoriesReturn;
                                            modelReturn.WorkflowInstance[0].ITWorkflowTasks = wfTaskReturn;
                                        }
                                    }
                                }
                                #region Xu ly step duyet song song
                                resultDTO = new ResultDTO() { Object = modelReturn };
                                trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                await _uow.CommitAsync();
                                return resultDTO;
                                #endregion
                            }
                            else
                            {
                                // case trade contract
                                if (wfModuleTradeContract && maxHistories.IsParallelApprove != null && maxHistories.IsParallelApprove.Value == true)
                                {
                                    await _uow.CommitAsync();
                                    modelReturn = new WorkflowProcessingStageReturn()
                                    {
                                        ItemStatus = wfInstance.ItemStatus,
                                        ItemId = wfInstance.ItemId,
                                        ReferenceNumber = wfInstance.ItemReferenceNumber,
                                        WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                                    };

                                    if (modelReturn.WorkflowInstance.Any())
                                    {
                                        modelReturn.WorkflowInstance[0].ITWorkflowHistories = new List<ITWorkflowHistoryViewModel>() { Mapper.Map<ITWorkflowHistoryViewModel>(lastHistory) };
                                        modelReturn.WorkflowInstance[0].ITWorkflowTasks = new List<ITWorkflowTaskViewModel>() { Mapper.Map<ITWorkflowTaskViewModel>(currentTask) };
                                    }
                                    resultDTO = new ResultDTO() { Object = modelReturn };
                                    trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                    _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                    await _uow.CommitAsync();
                                    return resultDTO;
                                }
                                else
                                {
                                    var processNextStepReturn = await ProcessNextStep(false, null, wfInstance, maxHistories, nextStep, args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, approverUser.LoginName, args.Comment, args.MultipleParticipantCodes, true, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                                    if (processNextStepReturn.ErrorCodes.Any() || processNextStepReturn.ErrorMessages.Any())
                                    {
                                        return new ResultDTO() { Object = null, ErrorCodes = processNextStepReturn.ErrorCodes, Messages = processNextStepReturn.ErrorMessages };
                                    }
                                    else
                                    {
                                        modelReturn = new WorkflowProcessingStageReturn()
                                        {
                                            ItemStatus = wfInstance.ItemStatus,
                                            ItemId = wfInstance.ItemId,
                                            ReferenceNumber = wfInstance.ItemReferenceNumber,
                                            WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                                        };
                                        if (modelReturn.WorkflowInstance.Any())
                                        {
                                            modelReturn.WorkflowInstance[0].ITWorkflowHistories = (!(processNextStepReturn.WorkflowHistories is null) && processNextStepReturn.WorkflowHistories.Any()) ? processNextStepReturn.WorkflowHistories : new List<ITWorkflowHistoryViewModel>() { };
                                            modelReturn.WorkflowInstance[0].ITWorkflowTasks = (!(processNextStepReturn.WorkflowTasks is null) && processNextStepReturn.WorkflowTasks.Any()) ? processNextStepReturn.WorkflowTasks : new List<ITWorkflowTaskViewModel>() { };
                                        }
                                    }
                                    resultDTO = new ResultDTO() { Object = modelReturn };
                                    trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                    _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                    await _uow.CommitAsync();
                                    return resultDTO;
                                }
                            }
                            #endregion

                        }
                        else
                        {
                            await _uow.CommitAsync();
                            WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn()
                            {
                                ItemStatus = wfInstance.ItemStatus,
                                ItemId = wfInstance.ItemId,
                                ReferenceNumber = wfInstance.ItemReferenceNumber,
                                WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                            };

                            if (modelReturn.WorkflowInstance.Any())
                            {
                                modelReturn.WorkflowInstance[0].ITWorkflowHistories = new List<ITWorkflowHistoryViewModel>() { Mapper.Map<ITWorkflowHistoryViewModel>(lastHistory) };
                                modelReturn.WorkflowInstance[0].ITWorkflowTasks = new List<ITWorkflowTaskViewModel>() { Mapper.Map<ITWorkflowTaskViewModel>(currentTask) };
                            }
                            resultDTO = new ResultDTO() { Object = modelReturn };
                            trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                            _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                            await _uow.CommitAsync();
                            return resultDTO;
                        }
                    }
                    else
                    {
                        var newInstance = new ITWorkflowInstance()
                        {
                            ItemId = wfInstance.ItemId,
                            ItemReferenceNumber = wfInstance.ItemReferenceNumber,
                            ITTemplateId = wfInstance.ITTemplateId,
                            WorkflowData = wfInstance.WorkflowData,
                            WorkflowName = wfInstance.WorkflowName,
                            DefaultCompletedStatus = wfInstance.DefaultCompletedStatus,
                            ItemStatus = itemStatus
                        };
                        _uow.GetRepository<ITWorkflowInstance>().Add(newInstance);
                        var histories = wfInstance.ITHistories.Where(x => x.StepNumber < currentStep.ReturnToStepNumber).ToList();
                        int countCreatedHistories = 0;
                        foreach (var history in histories)
                        {
                            var wfHistory = new ITWorkflowHistory()
                            {
                                Approver = history.Approver,
                                ApproverFullName = history.ApproverFullName,
                                ApproverId = history.ApproverId,
                                AssignedToDepartmentId = history.AssignedToDepartmentId,
                                AssignedToDepartmentType = history.AssignedToDepartmentType,
                                AssignedToUserId = history.AssignedToUserId,
                                Comment = history.Comment,
                                DueDate = history.DueDate,
                                ITInstanceId = newInstance.Id,
                                IsStepCompleted = history.IsStepCompleted,
                                Outcome = history.Outcome,
                                StepNumber = history.StepNumber,
                                VoteType = history.VoteType
                            };
                            _uow.GetRepository<ITWorkflowHistory>().Add(wfHistory);
                            countCreatedHistories++;
                        }
                        var wfTasks = await _uow.GetRepository<ITWorkflowTask>(true).FindByAsync(x => x.ITWorkflowInstanceId == wfInstance.Id, "modified asc");
                        int countCreatedTask = 0;
                        foreach (var task in wfTasks)
                        {
                            var wfTask = new ITWorkflowTask()
                            {
                                AssignedToDepartmentId = task.AssignedToDepartmentId,
                                AssignedToDepartmentGroup = task.AssignedToDepartmentGroup,
                                AssignedToId = task.AssignedToId,
                                Created = DateTimeOffset.Now,
                                CreatedBy = task.CreatedBy,
                                CreatedById = task.CreatedById,
                                CreatedByFullName = task.CreatedByFullName,
                                DueDate = task.DueDate,
                                IsCompleted = task.IsCompleted,
                                ItemId = task.ItemId,
                                ReferenceNumber = task.ReferenceNumber,
                                ItemType = task.ItemType,
                                ITWorkflowInstanceId = newInstance.Id,
                                ParentTaskId = task.ParentTaskId,
                                Vote = task.Vote,
                                RequestorId = task.RequestorId
                            };
                            _uow.GetRepository<ITWorkflowTask>().Add(wfTask);
                            countCreatedTask++;
                            if (countCreatedTask == countCreatedHistories)
                            {
                                break;
                            }
                        };
                        nextStep = newInstance.WorkflowData.Steps.FirstOrDefault(x => x.StepNumber == currentStep.ReturnToStepNumber);
                        lastHistory = await _uow.GetRepository<ITWorkflowHistory>().GetSingleAsync(x => x.ITInstanceId == wfInstance.Id && x.StepNumber < currentStep.ReturnToStepNumber, "Created desc");
                        await _uow.CommitAsync();
                        var processNextStepReturn = await ProcessNextStep(false, null, newInstance, lastHistory, nextStep, args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, approverUser.LoginName, args.Comment, new List<string>(), true, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                        await _uow.CommitAsync();

                        if (processNextStepReturn.WorkflowHistories.Any())
                        {
                            var processNextStepReturnWorkflowHistories = processNextStepReturn.WorkflowHistories.FirstOrDefault();
                            wfInstance.ItemStatus = await UpdateItemStatus(nextStep, processNextStepReturnWorkflowHistories.AssignedToUserId, processNextStepReturnWorkflowHistories.AssignedToDepartmentId);
                        }
                        // return data
                        WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn()
                        {
                            ItemStatus = wfInstance.ItemStatus,
                            ItemId = newInstance.ItemId,
                            ReferenceNumber = newInstance.ItemReferenceNumber,
                            WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(newInstance) }
                        };

                        if (modelReturn.WorkflowInstance.Any())
                        {
                            modelReturn.WorkflowInstance[0].ITWorkflowHistories = processNextStepReturn.WorkflowHistories.Any() ? processNextStepReturn.WorkflowHistories : new List<ITWorkflowHistoryViewModel>() { };
                            modelReturn.WorkflowInstance[0].ITWorkflowTasks = processNextStepReturn.WorkflowTasks.Any() ? processNextStepReturn.WorkflowTasks : new List<ITWorkflowTaskViewModel>() { };
                        }
                        resultDTO = new ResultDTO() { Object = modelReturn };
                        trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                        _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                        await _uow.CommitAsync();
                        return resultDTO;
                    }
                }
                else if (args.Vote == VoteType.Resubmit)
                {
                    #region Process resubmit 
                    List<string> errorMessages = new List<string>();
                    List<int> errorCodes = new List<int>();
                    var workflowInstanceList = await _uow.GetRepository<ITWorkflowInstance>(true).FindByAsync(x => x.ItemId == args.ItemId, "created desc");
                    if (workflowInstanceList.Any())
                    {
                        var oldWorkflowInstance = workflowInstanceList.FirstOrDefault();
                        var oldHistories = await _uow.GetRepository<ITWorkflowHistory>(true).FindByAsync(x => x.ITInstanceId == oldWorkflowInstance.Id, "created desc");
                        var stepREQ = oldWorkflowInstance.WorkflowData.Steps.Where(x => x.StepNumber == oldHistories.ToList().ElementAt(0).StepNumber).FirstOrDefault();
                        if (!(stepREQ is null))
                        {
                            if (stepREQ.StepWithResubmit.HasValue && oldHistories.Any())
                            {
                                // tao lai workflow histories tuong ung
                                var findWorkflowTemplate = await _uow.GetRepository<ITWorkflowTemplate>(true).GetSingleAsync(x => x.Id == wfInstance.ITTemplateId);
                                var newWfInstance = new ITWorkflowInstance()
                                {
                                    ITTemplateId = findWorkflowTemplate.Id,
                                    WorkflowData = findWorkflowTemplate.WorkflowData,
                                    ItemId = oldWorkflowInstance.ItemId,
                                    ItemReferenceNumber = oldWorkflowInstance.ItemReferenceNumber,
                                    WorkflowName = findWorkflowTemplate.WorkflowName,
                                    DefaultCompletedStatus = findWorkflowTemplate.DefaultCompletedStatus
                                };

                                if (args.StepWithConditions != null && args.StepWithConditions.Any())
                                    newWfInstance.StepConditions = JsonConvert.SerializeObject(args.StepWithConditions);
                                _uow.GetRepository<ITWorkflowInstance>().Add(newWfInstance);

                                var histories = oldWorkflowInstance.ITHistories.Where(x => lastHistory.StepNumber < x.StepNumber && x.StepNumber < stepREQ.StepWithResubmit).OrderBy(x => x.Modified).ToList();
                                int countCreatedHistories = 0;
                                foreach (var history in histories)
                                {
                                    var wfHistory = new ITWorkflowHistory()
                                    {
                                        Approver = history.Approver,
                                        ApproverFullName = history.ApproverFullName,
                                        ApproverId = history.ApproverId,
                                        AssignedToDepartmentId = history.AssignedToDepartmentId,
                                        AssignedToDepartmentType = history.AssignedToDepartmentType,
                                        AssignedToUserId = history.AssignedToUserId,
                                        Comment = history.Comment,
                                        DueDate = history.DueDate,
                                        ITInstanceId = newWfInstance.Id,
                                        IsStepCompleted = history.IsStepCompleted,
                                        Outcome = history.Outcome,
                                        StepNumber = history.StepNumber,
                                        VoteType = history.VoteType
                                    };
                                    _uow.GetRepository<ITWorkflowHistory>().Add(wfHistory);
                                    countCreatedHistories++;
                                }
                                var wfTasks = await _uow.GetRepository<ITWorkflowTask>(true).FindByAsync(x => x.ITWorkflowInstanceId == wfInstance.Id, "modified asc");
                                int countCreatedTask = 0;
                                foreach (var task in wfTasks)
                                {
                                    var wfTask = new ITWorkflowTask()
                                    {
                                        AssignedToDepartmentId = task.AssignedToDepartmentId,
                                        AssignedToDepartmentGroup = task.AssignedToDepartmentGroup,
                                        AssignedToId = task.AssignedToId,
                                        Created = DateTimeOffset.Now,
                                        CreatedBy = task.CreatedBy,
                                        CreatedById = task.CreatedById,
                                        CreatedByFullName = task.CreatedByFullName,
                                        DueDate = task.DueDate,
                                        IsCompleted = task.IsCompleted,
                                        ItemId = task.ItemId,
                                        ReferenceNumber = task.ReferenceNumber,
                                        ItemType = task.ItemType,
                                        ITWorkflowInstanceId = newWfInstance.Id,
                                        ParentTaskId = task.ParentTaskId,
                                        Vote = task.Vote,
                                        RequestorId = task.RequestorId
                                    };
                                    _uow.GetRepository<ITWorkflowTask>().Add(wfTask);
                                    countCreatedTask++;
                                    if (countCreatedTask == countCreatedHistories)
                                    {
                                        break;
                                    }
                                };
                                await _uow.CommitAsync();
                                currentStep = newWfInstance.WorkflowData.Steps.FirstOrDefault(x => x.StepNumber == stepREQ.StepWithResubmit); // next step == current step
                                /*nextStep = wfInstance.WorkflowData.Steps.GetNextStep(currentStep, args.StepWithConditions);*/
                                lastHistory = await _uow.GetRepository<ITWorkflowHistory>().GetSingleAsync(x => x.ITInstanceId == newWfInstance.Id, "Created desc");
                                var processNextStepReturn = await ProcessNextStep(false, null, newWfInstance, lastHistory, currentStep, args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, approverUser.LoginName, args.Comment, new List<string>(), true, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                                WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn() { };
                                if (processNextStepReturn.ErrorCodes.Any() || processNextStepReturn.ErrorMessages.Any())
                                {
                                    return new ResultDTO() { Object = null, ErrorCodes = processNextStepReturn.ErrorCodes, Messages = processNextStepReturn.ErrorMessages };
                                }
                                else
                                {
                                    await _uow.CommitAsync();
                                    modelReturn = new WorkflowProcessingStageReturn()
                                    {
                                        ItemStatus = newWfInstance.ItemStatus,
                                        ItemId = newWfInstance.ItemId,
                                        ReferenceNumber = newWfInstance.ItemReferenceNumber,
                                        WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                                    };

                                    if (modelReturn.WorkflowInstance.Any())
                                    {
                                        modelReturn.WorkflowInstance[0].ITWorkflowHistories = (!(processNextStepReturn.WorkflowHistories is null) && processNextStepReturn.WorkflowHistories.Any()) ? processNextStepReturn.WorkflowHistories : new List<ITWorkflowHistoryViewModel>() { };
                                        modelReturn.WorkflowInstance[0].ITWorkflowTasks = (!(processNextStepReturn.WorkflowTasks is null) && processNextStepReturn.WorkflowTasks.Any()) ? processNextStepReturn.WorkflowTasks : new List<ITWorkflowTaskViewModel>() { };
                                    }
                                }
                                resultDTO = new ResultDTO() { Object = modelReturn };
                                trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                await _uow.CommitAsync();
                                return resultDTO;
                            }
                            else
                            {
                                var findWorkflowTemplate = await _uow.GetRepository<ITWorkflowTemplate>(true).GetSingleAsync(x => x.Id == wfInstance.ITTemplateId);
                                if (findWorkflowTemplate != null)
                                {
                                    var newWfInstance = new ITWorkflowInstance()
                                    {
                                        ITTemplateId = findWorkflowTemplate.Id,
                                        WorkflowData = findWorkflowTemplate.WorkflowData,
                                        ItemId = oldWorkflowInstance.ItemId,
                                        ItemReferenceNumber = oldWorkflowInstance.ItemReferenceNumber,
                                        WorkflowName = findWorkflowTemplate.WorkflowName,
                                        DefaultCompletedStatus = findWorkflowTemplate.DefaultCompletedStatus
                                    };

                                    if (args.StepWithConditions != null && args.StepWithConditions.Any())
                                        newWfInstance.StepConditions = JsonConvert.SerializeObject(args.StepWithConditions);
                                    _uow.GetRepository<ITWorkflowInstance>().Add(newWfInstance);

                                    var processNextStepReturn = await ProcessNextStep(true, args.IsSkipHOD, newWfInstance, null, findWorkflowTemplate.WorkflowData?.Steps?.FirstOrDefault(), args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, args.ApproverLoginName, args.Comment, args.MultipleParticipantCodes, true, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                                    //var processNextStepReturn = await ProcessNextStep(false, null, wfInstance, lastHistory, nextStep, args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, approverUser.LoginName, args.Comment, new List<string>(), true, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                                    WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn() { };
                                    if (processNextStepReturn.ErrorCodes.Any() || processNextStepReturn.ErrorMessages.Any())
                                    {
                                        return new ResultDTO() { Object = null, ErrorCodes = processNextStepReturn.ErrorCodes, Messages = processNextStepReturn.ErrorMessages };
                                    }
                                    else
                                    {
                                        await _uow.CommitAsync();
                                        modelReturn = new WorkflowProcessingStageReturn()
                                        {
                                            ItemStatus = newWfInstance.ItemStatus,
                                            ItemId = newWfInstance.ItemId,
                                            ReferenceNumber = newWfInstance.ItemReferenceNumber,
                                            WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(newWfInstance) }
                                        };

                                        if (modelReturn.WorkflowInstance.Any())
                                        {
                                            modelReturn.WorkflowInstance[0].ITWorkflowHistories = (!(processNextStepReturn.WorkflowHistories is null) && processNextStepReturn.WorkflowHistories.Any()) ? processNextStepReturn.WorkflowHistories : new List<ITWorkflowHistoryViewModel>() { };
                                            modelReturn.WorkflowInstance[0].ITWorkflowTasks = (!(processNextStepReturn.WorkflowTasks is null) && processNextStepReturn.WorkflowTasks.Any()) ? processNextStepReturn.WorkflowTasks : new List<ITWorkflowTaskViewModel>() { };
                                        }
                                    }
                                    resultDTO = new ResultDTO() { Object = modelReturn };
                                    trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                    _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                    await _uow.CommitAsync();
                                    return resultDTO;
                                }
                            }
                        }
                        else
                        {
                            errorCodes = new List<int>() { -1 };
                            errorMessages = new List<string>() { "Cannot find any step of old workflow instance !" };
                        }
                    }
                    else
                    {
                        errorCodes = new List<int>() { -1 };
                        errorMessages = new List<string>() { "Cannot find any old workflow instance !" };
                    }
                    resultDTO = new ResultDTO() { Object = null, ErrorCodes = errorCodes, Messages = errorMessages };
                    trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                    _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                    await _uow.CommitAsync();
                    return resultDTO;
                    #endregion
                }
                else
                {
                    if (nextStep != null && nextStep.IsParallelApprove.HasValue && nextStep.IsParallelApprove.Value && args.Vote == VoteType.Approve)
                    {
                        #region Kiem tra cac step cua wf da duyet song song het hay chua moi tien hanh tao step moi 
                        bool alreadyCompleteLastTask = true;
                        if (lastHistory.ParallelStep != null && lastHistory.ParallelStep.HasValue)
                        {
                            var reCheckWFHistories = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => x.ITInstanceId == wfInstance.Id && x.IsParallelApprove.Value && x.ParallelStep == lastHistory.ParallelStep && !x.IsStepCompleted, "StepNumber desc");
                            if (reCheckWFHistories.Any())
                                alreadyCompleteLastTask = false;
                        }
                        #endregion

                        WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn() { };
                        if (alreadyCompleteLastTask)
                        {
                            #region Process duyet song song | sinh task + histories
                            if (!nextStep.ParallelStep.Any())
                            {
                                resultDTO = new ResultDTO() { Object = null, ErrorCodes = new List<int> { -1 }, Messages = new List<string> { "Cannot find any Parallel Step !" } };
                                trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                await _uow.CommitAsync();
                                return resultDTO;
                            }
                            #endregion
                            var processNextStepReturn = await ProcessNextStep(false, null, wfInstance, lastHistory, nextStep, args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, approverUser.LoginName, args.Comment, args.MultipleParticipantCodes, false, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                            
                            if (processNextStepReturn.ErrorCodes.Any() || processNextStepReturn.ErrorMessages.Any())
                            {
                                resultDTO = new ResultDTO() { Object = null, ErrorCodes = processNextStepReturn.ErrorCodes, Messages = processNextStepReturn.ErrorMessages }; ;
                                trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                await _uow.CommitAsync();
                                return resultDTO;
                            }
                            else
                            {
                                await this.UpdateParallelStep(processNextStepReturn.WorkflowHistories.FirstOrDefault().Id, processNextStepReturn.WorkflowTasks.FirstOrDefault().Id, nextStep.StepNumber);
                                await _uow.CommitAsync();
                                modelReturn = new WorkflowProcessingStageReturn()
                                {
                                    ItemStatus = wfInstance.ItemStatus,
                                    ItemId = wfInstance.ItemId,
                                    ReferenceNumber = wfInstance.ItemReferenceNumber,
                                    WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                                };
                                List<ITWorkflowTaskViewModel> wfTaskReturn = new List<ITWorkflowTaskViewModel>() { processNextStepReturn.WorkflowTasks.FirstOrDefault() };
                                List<ITWorkflowHistoryViewModel> wfHistoriesReturn = new List<ITWorkflowHistoryViewModel>() { processNextStepReturn.WorkflowHistories.FirstOrDefault() };

                                var resultDto = new ResultDTO();
                                var workflowHistories = lastHistory;
                                var step = wfInstance.WorkflowData.Steps.Where(x => x.StepNumber == nextStep.StepNumber).FirstOrDefault();
                                HashSet<int> alreadyCreateStep = new HashSet<int>();
                                foreach (var stepNum in nextStep.ParallelStep.OrderBy(x => x).ToList())
                                {
                                    try
                                    {
                                        var nxStep = wfInstance.WorkflowData.Steps.GetNextStep(step, args.StepWithConditions);
                                        if (!nextStep.ParallelStep.Contains(nxStep.StepNumber)) break;
                                        // kiem tra cac step tiep theo co cung, kiem tra cac step da tao hay chua
                                        if (!alreadyCreateStep.Contains(nxStep.StepNumber))
                                        {
                                            processNextStepReturn = await ProcessNextStep(false, null, wfInstance, workflowHistories, nxStep, args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, approverUser.LoginName, args.Comment, args.MultipleParticipantCodes, false, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                                            var workflowHis = (!(processNextStepReturn.WorkflowHistories is null) && processNextStepReturn.WorkflowHistories.Any()) ? processNextStepReturn.WorkflowHistories.FirstOrDefault() : null;
                                            var workflowTask = (!(processNextStepReturn.WorkflowTasks is null) && processNextStepReturn.WorkflowTasks.Any()) ? processNextStepReturn.WorkflowTasks.FirstOrDefault() : null;

                                            if (!(workflowHis is null) && !(workflowTask is null))
                                            {
                                                if (nxStep.IgnoreIfNoParticipant && ((workflowHis.AssignedToDepartmentId == null || !workflowHis.AssignedToDepartmentId.HasValue) && (workflowHis.AssignedToUserId == null || workflowHis.AssignedToUserId.HasValue)))
                                                {
                                                    // set lai trang thai tu pending -> other status)
                                                    wfInstance.ItemStatus = modelReturn.ItemStatus;
                                                    await _uow.CommitAsync();
                                                    // Delete WF khi k tim thay department va co tich IgnoreIfNoParticipant
                                                    var modelHis = Mapper.Map<ITWorkflowHistory>(workflowHis);
                                                    var modelTask = Mapper.Map<ITWorkflowTask>(workflowTask);
                                                    try
                                                    {
                                                        var wfHis = _uow.GetRepository<ITWorkflowHistory>().FindById(modelHis.Id);
                                                        if (wfHis != null)
                                                            _uow.GetRepository<ITWorkflowHistory>().Delete(wfHis);

                                                        var wfTask = _uow.GetRepository<ITWorkflowTask>().FindById(workflowTask.Id);
                                                        if (wfTask != null)
                                                            _uow.GetRepository<ITWorkflowTask>().Delete(wfTask);

                                                    } catch (Exception e)
                                                    {
                                                        
                                                    }
                                                } else
                                                {
                                                    alreadyCreateStep.Add(nxStep.StepNumber);
                                                    await _uow.CommitAsync();
                                                    wfHistoriesReturn.Add(workflowHis);
                                                    wfTaskReturn.Add(workflowTask);
                                                    // cap nhat task duyet song song voi step nao || cap nhat histories duyet song song voi step nao
                                                    await this.UpdateParallelStep(workflowHis.Id, workflowTask.Id, nextStep.StepNumber);
                                                }
                                            }
                                            else
                                            {
                                                resultDto.ErrorCodes.Add(processNextStepReturn.ErrorCodes.FirstOrDefault());
                                                resultDto.Messages.Add(processNextStepReturn.ErrorMessages.FirstOrDefault());
                                            }
                                        }
                                        // step tiep theo
                                        step = wfInstance.WorkflowData.Steps.Where(x => x.StepNumber == stepNum).FirstOrDefault();
                                        if (!nextStep.ParallelStep.Contains(step.StepNumber)) break;
                                    }
                                    catch (Exception e)
                                    {
                                        resultDto.ErrorCodes.Add(-1);
                                        resultDto.Messages.Add("Error in process Loop ParallelStep: " + e.Message);
                                    }
                                }
                                if (resultDto.ErrorCodes.Any())
                                {
                                    trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                    _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                    await _uow.CommitAsync();
                                    return resultDTO;
                                }
                                else
                                {

                                    if (modelReturn.WorkflowInstance.Any())
                                    {
                                        modelReturn.WorkflowInstance[0].ITWorkflowHistories = wfHistoriesReturn;
                                        modelReturn.WorkflowInstance[0].ITWorkflowTasks = wfTaskReturn;
                                    }
                                }
                            }
                            resultDTO = new ResultDTO() { Object = modelReturn };
                            trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                            _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                            await _uow.CommitAsync();
                            return resultDTO;
                        }
                        modelReturn = new WorkflowProcessingStageReturn()
                        {
                            ItemStatus = wfInstance.ItemStatus,
                            ItemId = wfInstance.ItemId,
                            ReferenceNumber = wfInstance.ItemReferenceNumber,
                            WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                        };
                        if (modelReturn.WorkflowInstance.Any())
                        {
                            modelReturn.WorkflowInstance[0].ITWorkflowHistories = new List<ITWorkflowHistoryViewModel>() { Mapper.Map<ITWorkflowHistoryViewModel>(lastHistory)  };
                            //modelReturn.WorkflowInstance[0].ITWorkflowTasks = wfTaskReturn;
                        }
                        resultDTO = new ResultDTO() { Object = modelReturn };
                        trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                        _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                        await _uow.CommitAsync();
                        return resultDTO;
                    }
                    else
                    {
                        if (lastHistory != null && lastHistory.IsParallelApprove.HasValue && lastHistory.IsParallelApprove.Value && args.Vote == VoteType.Approve)
                        {
                            WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn() {};
                            // kiem tra xem con task nao chua approve hay chua
                            var workflowHistories = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => x.ITInstanceId == wfInstance.Id && x.IsParallelApprove.Value && x.ParallelStep == lastHistory.ParallelStep && !x.IsStepCompleted, "StepNumber desc");
                            // Khong can check neu HOD manager skip
                            bool isNotCheckStepHOD = false;
                            if (workflowHistories.Any() && workflowHistories.Count() == 1)
                            {
                                var wfHistories = workflowHistories.FirstOrDefault();
                                var currentHistoriesStep = wfInstance.WorkflowData.Steps.Where(x => x.StepNumber == wfHistories.StepNumber).FirstOrDefault();
                                if (currentHistoriesStep != null && !string.IsNullOrEmpty(currentHistoriesStep.StepName))
                                    isNotCheckStepHOD = currentHistoriesStep.StepName.ToLower().Contains("hod") 
                                        && currentHistoriesStep.StepName.ToLower().Contains("manager") && !wfHistories.AssignedToDepartmentId.HasValue;
                            }

                            if (!workflowHistories.Any() || (workflowHistories.Count() == 1 && isNotCheckStepHOD))
                            {
                                #region xu ly cac khi cac task + histories da của flow duyet song song da completed het
                                workflowHistories = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => x.ITInstanceId == wfInstance.Id && x.IsParallelApprove.Value && x.ParallelStep == lastHistory.ParallelStep, "StepNumber desc");
                                var maxHistories = workflowHistories.OrderByDescending(x => x.StepNumber).FirstOrDefault();
                                currentStep = wfInstance.WorkflowData.Steps.FirstOrDefault(x => x.StepNumber == maxHistories.StepNumber);
                                nextStep = wfInstance.WorkflowData.Steps.GetNextStep(currentStep, args.StepWithConditions);

                                if (nextStep.IsParallelApprove != null && nextStep.IsParallelApprove.HasValue && nextStep.IsParallelApprove.Value)
                                {

                                    var processNextStepReturn = await ProcessNextStep(false, null, wfInstance, lastHistory, nextStep, args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, approverUser.LoginName, args.Comment, args.MultipleParticipantCodes, false, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                                    if (processNextStepReturn.ErrorCodes.Any() || processNextStepReturn.ErrorMessages.Any())
                                    {
                                        resultDTO = new ResultDTO() { Object = null, ErrorCodes = processNextStepReturn.ErrorCodes, Messages = processNextStepReturn.ErrorMessages }; ;
                                        trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                        _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                        await _uow.CommitAsync();
                                        return resultDTO;
                                    }
                                    else
                                    {
                                        await this.UpdateParallelStep(processNextStepReturn.WorkflowHistories.FirstOrDefault().Id, processNextStepReturn.WorkflowTasks.FirstOrDefault().Id, nextStep.StepNumber);
                                        await _uow.CommitAsync();
                                        modelReturn = new WorkflowProcessingStageReturn()
                                        {
                                            ItemStatus = wfInstance.ItemStatus,
                                            ItemId = wfInstance.ItemId,
                                            ReferenceNumber = wfInstance.ItemReferenceNumber,
                                            WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                                        };
                                        List<ITWorkflowTaskViewModel> wfTaskReturn = new List<ITWorkflowTaskViewModel>() { };
                                        List<ITWorkflowHistoryViewModel> wfHistoriesReturn = new List<ITWorkflowHistoryViewModel>() { };
                                        var resultDto = new ResultDTO();
                                        var step = wfInstance.WorkflowData.Steps.Where(x => x.StepNumber == nextStep.StepNumber).FirstOrDefault();
                                        HashSet<int> alreadyCreateStep = new HashSet<int>();
                                        foreach (var stepNum in nextStep.ParallelStep.OrderBy(x => x).ToList())
                                        {
                                            try
                                            {
                                                var nxStep = wfInstance.WorkflowData.Steps.GetNextStep(step, args.StepWithConditions);
                                                if (!nextStep.ParallelStep.Contains(nxStep.StepNumber)) break;
                                                // kiem tra cac step tiep theo co cung, kiem tra cac step da tao hay chua
                                                if (!alreadyCreateStep.Contains(nxStep.StepNumber))
                                                {
                                                    processNextStepReturn = await ProcessNextStep(false, null, wfInstance, workflowHistories.Where(x => x.StepNumber == maxHistories.StepNumber).OrderByDescending(y => y.StepNumber).ToList().FirstOrDefault(), nxStep, args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, approverUser.LoginName, args.Comment, args.MultipleParticipantCodes, false, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                                                    var workflowHis = (!(processNextStepReturn.WorkflowHistories is null) && processNextStepReturn.WorkflowHistories.Any()) ? processNextStepReturn.WorkflowHistories.FirstOrDefault() : null;
                                                    var workflowTask = (!(processNextStepReturn.WorkflowTasks is null) && processNextStepReturn.WorkflowTasks.Any()) ? processNextStepReturn.WorkflowTasks.FirstOrDefault() : null;

                                                    if (!(workflowHis is null) && !(workflowTask is null))
                                                    {
                                                        alreadyCreateStep.Add(nxStep.StepNumber);
                                                        await _uow.CommitAsync();
                                                        wfHistoriesReturn.Add(workflowHis);
                                                        wfTaskReturn.Add(workflowTask);
                                                        // cap nhat task duyet song song voi step nao || cap nhat histories duyet song song voi step nao
                                                        await this.UpdateParallelStep(workflowHis.Id, workflowTask.Id, nextStep.StepNumber);
                                                    }
                                                    else
                                                    {
                                                        resultDto.ErrorCodes.Add(processNextStepReturn.ErrorCodes.FirstOrDefault());
                                                        resultDto.Messages.Add(processNextStepReturn.ErrorMessages.FirstOrDefault());
                                                    }
                                                }
                                                // step tiep theo
                                                step = wfInstance.WorkflowData.Steps.Where(x => x.StepNumber == stepNum).FirstOrDefault();
                                                if (!nextStep.ParallelStep.Contains(step.StepNumber)) break;
                                            }
                                            catch (Exception e)
                                            {
                                                resultDto.ErrorCodes.Add(-1);
                                                resultDto.Messages.Add("Error in process Loop ParallelStep: " + e.Message);
                                            }
                                        }
                                        if (resultDto.ErrorCodes.Any())
                                        {
                                            trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                            _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                            await _uow.CommitAsync();
                                            return resultDTO;
                                        }
                                        else
                                        {

                                            if (modelReturn.WorkflowInstance.Any())
                                            {
                                                modelReturn.WorkflowInstance[0].ITWorkflowHistories = wfHistoriesReturn;
                                                modelReturn.WorkflowInstance[0].ITWorkflowTasks = wfTaskReturn;
                                            }
                                        }
                                    }
                                    #region Xu ly step duyet song song
                                    //await this.UpdateParallelStep(processNextStepReturn.WorkflowHistories.FirstOrDefault().Id, processNextStepReturn.WorkflowTasks.FirstOrDefault().Id, nextStep.StepNumber);
                                    //await _uow.CommitAsync();
                                    resultDTO = new ResultDTO() { Object = modelReturn };
                                    trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                    _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                    await _uow.CommitAsync();
                                    return resultDTO;
                                    #endregion
                                }
                                else
                                {
                                    // case trade contract
                                    if (wfModuleTradeContract && maxHistories.IsParallelApprove != null && maxHistories.IsParallelApprove.Value == true)
                                    {
                                        var findAllHis = _uow.GetRepository<ITWorkflowHistory>(true).FindBy(x => x.ITInstanceId == wfInstance.Id && x.ParallelStep != null && maxHistories.ParallelStep != null && x.ParallelStep.Value == maxHistories.ParallelStep.Value);
                                        if (findAllHis != null && findAllHis.Any(x => x.VoteType == VoteType.RequestToChange))
                                        {
                                            wfInstance.IsTerminated = true;
                                            wfInstance.IsCompleted = true;
                                            wfInstance.ItemStatus = "Requested To Change";

                                            modelReturn = new WorkflowProcessingStageReturn()
                                            {
                                                ItemStatus = wfInstance.ItemStatus,
                                                ItemId = wfInstance.ItemId,
                                                ReferenceNumber = wfInstance.ItemReferenceNumber,
                                                WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                                            };
                                            resultDTO = new ResultDTO() { Object = modelReturn };
                                            trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                            _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                            await _uow.CommitAsync();
                                            return resultDTO;

                                        } else
                                        {
                                            var processNextStepReturn = await ProcessNextStep(false, null, wfInstance, maxHistories, nextStep, args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, approverUser.LoginName, args.Comment, args.MultipleParticipantCodes, true, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                                            if (processNextStepReturn.ErrorCodes.Any() || processNextStepReturn.ErrorMessages.Any())
                                            {
                                                return new ResultDTO() { Object = null, ErrorCodes = processNextStepReturn.ErrorCodes, Messages = processNextStepReturn.ErrorMessages };
                                            }
                                            else
                                            {
                                                modelReturn = new WorkflowProcessingStageReturn()
                                                {
                                                    ItemStatus = wfInstance.ItemStatus,
                                                    ItemId = wfInstance.ItemId,
                                                    ReferenceNumber = wfInstance.ItemReferenceNumber,
                                                    WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                                                };
                                                if (modelReturn.WorkflowInstance.Any())
                                                {
                                                    modelReturn.WorkflowInstance[0].ITWorkflowHistories = (!(processNextStepReturn.WorkflowHistories is null) && processNextStepReturn.WorkflowHistories.Any()) ? processNextStepReturn.WorkflowHistories : new List<ITWorkflowHistoryViewModel>() { };
                                                    modelReturn.WorkflowInstance[0].ITWorkflowTasks = (!(processNextStepReturn.WorkflowTasks is null) && processNextStepReturn.WorkflowTasks.Any()) ? processNextStepReturn.WorkflowTasks : new List<ITWorkflowTaskViewModel>() { };
                                                }
                                            }
                                            resultDTO = new ResultDTO() { Object = modelReturn };
                                            trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                            _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                            await _uow.CommitAsync();
                                            return resultDTO;
                                        }
                                    } else
                                    {
                                        var processNextStepReturn = await ProcessNextStep(false, null, wfInstance, maxHistories, nextStep, args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, approverUser.LoginName, args.Comment, args.MultipleParticipantCodes, true, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                                        if (processNextStepReturn.ErrorCodes.Any() || processNextStepReturn.ErrorMessages.Any())
                                        {
                                            return new ResultDTO() { Object = null, ErrorCodes = processNextStepReturn.ErrorCodes, Messages = processNextStepReturn.ErrorMessages };
                                        }
                                        else
                                        {
                                            modelReturn = new WorkflowProcessingStageReturn()
                                            {
                                                ItemStatus = wfInstance.ItemStatus,
                                                ItemId = wfInstance.ItemId,
                                                ReferenceNumber = wfInstance.ItemReferenceNumber,
                                                WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                                            };
                                            if (modelReturn.WorkflowInstance.Any())
                                            {
                                                modelReturn.WorkflowInstance[0].ITWorkflowHistories = (!(processNextStepReturn.WorkflowHistories is null) && processNextStepReturn.WorkflowHistories.Any()) ? processNextStepReturn.WorkflowHistories : new List<ITWorkflowHistoryViewModel>() { };
                                                modelReturn.WorkflowInstance[0].ITWorkflowTasks = (!(processNextStepReturn.WorkflowTasks is null) && processNextStepReturn.WorkflowTasks.Any()) ? processNextStepReturn.WorkflowTasks : new List<ITWorkflowTaskViewModel>() { };
                                            }
                                        }
                                        resultDTO = new ResultDTO() { Object = modelReturn };
                                        trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                        _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                        await _uow.CommitAsync();
                                        return resultDTO;
                                    }
                                }
                                #endregion
                            }
                            modelReturn = new WorkflowProcessingStageReturn()
                            {
                                ItemStatus = wfInstance.ItemStatus,
                                ItemId = wfInstance.ItemId,
                                ReferenceNumber = wfInstance.ItemReferenceNumber,
                                WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                            };
                            if (modelReturn.WorkflowInstance.Any())
                            {
                                modelReturn.WorkflowInstance[0].ITWorkflowHistories = new List<ITWorkflowHistoryViewModel>() { Mapper.Map<ITWorkflowHistoryViewModel>(lastHistory) };
                                modelReturn.WorkflowInstance[0].ITWorkflowTasks = new List<ITWorkflowTaskViewModel>() { Mapper.Map<ITWorkflowTaskViewModel>(currentTask) };
                            }
                            resultDTO = new ResultDTO() { Object = modelReturn };
                            trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                            _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                            await _uow.CommitAsync();
                            return resultDTO;
                        }
                        else 
                            {
                            #region Uy quyen
                            bool nextStepIsGD = (!(nextStep is null) && !string.IsNullOrEmpty(nextStep.DefaultStatus)) && nextStep.DefaultStatus.ToLower().Equals(ParticipantTypeGDStatus.ToLower()) ? true : false;
                            if (nextStepIsGD)
                            {
                                var listAuthoritySkipGDSettings = new HandleAuthoritySkipGDSetting().GetListAuthoritySkipGDSettings();
                                if (listAuthoritySkipGDSettings.Any())
                                {
                                    var isAuthorED = listAuthoritySkipGDSettings.Where(x => x.StartDate.ToLocalTime() <= lastHistory.Modified && x.EndDate.ToLocalTime() >= lastHistory.Modified && !x.IsRevoked).Any();
                                    if (isAuthorED) nextStep = null; // => Completed phieu
                                }
                            }

                            bool nextStepIsED = (!(nextStep is null) && !string.IsNullOrEmpty(nextStep.DefaultStatus)) && nextStep.DefaultStatus.ToLower().Equals(ParticipantTypeEDStatus.ToLower()) ? true : false;
                            if (nextStepIsED)
                            {
                                var listAuthoritySettings = new HandleAuthoritySetting().GetListAuthoritySettings();
                                if (listAuthoritySettings.Any())
                                {
                                    var isAuthorED = listAuthoritySettings.Where(x => x.StartDate.ToLocalTime() <= lastHistory.Modified.ToLocalTime() && x.EndDate.ToLocalTime() >= lastHistory.Modified.ToLocalTime() && !x.IsRevoked).Any();
                                    if (isAuthorED)
                                    {
                                        var stepGD = wfInstance.WorkflowData.Steps.Where(x => x.StepNumber == nextStep.StepNumber + 1).FirstOrDefault();
                                        if (stepGD != null && !string.IsNullOrEmpty(stepGD.DefaultStatus) && stepGD.DefaultStatus.ToLower().Equals(ParticipantTypeGDStatus.ToLower())){
                                            nextStep = stepGD; // => Next step don't care step with condition
                                        } else
                                        {
                                            nextStep = wfInstance.WorkflowData.Steps.GetNextStep(nextStep, new List<AttributeItem>()); // => Next step don't care step with condition 
                                        }
                                    }
                                }
                            }
                            #endregion

                            #region Process duyet binh thuong
                            var processNextStepReturn = await ProcessNextStep(false, null, wfInstance, lastHistory, nextStep, args.RequestDepartmentCode, args.OrderingDepartmentCode, args.RelatedDepartmentCode, args.InChargeDepartmentCode, approverUser.LoginName, args.Comment, args.MultipleParticipantCodes, true, args.StepWithConditions, F3ManualParticipants, args.AdminRequestorDepartmentId);
                            WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn() { };
                            if (processNextStepReturn.ErrorCodes.Any() || processNextStepReturn.ErrorMessages.Any())
                            {
                                await _uow.CommitAsync();
                                resultDTO = new ResultDTO() { Object = null, ErrorCodes = processNextStepReturn.ErrorCodes, Messages = processNextStepReturn.ErrorMessages };
                                trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                return resultDTO;
                            }
                            else
                            {
                                await _uow.CommitAsync();
                                modelReturn = new WorkflowProcessingStageReturn()
                                {
                                    ItemStatus = wfInstance.ItemStatus,
                                    ItemId = wfInstance.ItemId,
                                    ReferenceNumber = wfInstance.ItemReferenceNumber,
                                    WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                                };

                                if (modelReturn.WorkflowInstance.Any())
                                {
                                    modelReturn.WorkflowInstance[0].ITWorkflowHistories = (!(processNextStepReturn.WorkflowHistories is null) && processNextStepReturn.WorkflowHistories.Any()) ? processNextStepReturn.WorkflowHistories : new List<ITWorkflowHistoryViewModel>() { };
                                    modelReturn.WorkflowInstance[0].ITWorkflowTasks = (!(processNextStepReturn.WorkflowTasks is null) && processNextStepReturn.WorkflowTasks.Any()) ? processNextStepReturn.WorkflowTasks : new List<ITWorkflowTaskViewModel>() { };
                                }
                                resultDTO = new ResultDTO() { Object = modelReturn };
                                trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                                _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                                await _uow.CommitAsync();

                                #region check nexstep neu da duyet thi auto pass || chi ap dung 
                                var prefixModule = wfInstance.ItemReferenceNumber.Substring(0, 2);
                                var notApplyRuleAutoPass = ConfigurationManager.AppSettings["ListModuleSkipHOD"] != null ? ConfigurationManager.AppSettings["ListModuleSkipHOD"] : "PR,RP,RE,CA";
                                if (!notApplyRuleAutoPass.Contains(prefixModule) && nextStep != null)
                                {
                                    if (prefixModule.Equals("F2") && !string.IsNullOrEmpty(nextStep.ParticipantType) && nextStep.ParticipantType.ToLower().Equals("OrderingDept".ToLower()) && nextStep.PreventAutoPopulate)
                                    {
                                        // AEON-1551: [Edoc01] Điều chỉnh lại rule skip bước
                                        // Task: Điều chỉnh bỏ rule skip bước đối với bước có điều kiện form type = F2 và Participant Type = Ordering Dept. Bước này sẽ không bị skip khi có cùng user đã duyệt ở bước trước
                                    }
                                    else
                                    {
                                        var wfHistories = await _uow.GetRepository<ITWorkflowHistory>().GetSingleAsync(x => x.AssignedToDepartmentId.HasValue && x.ITInstanceId == wfInstance.Id && !x.IsStepCompleted, "created desc");
                                        var wfTask = await _uow.GetRepository<ITWorkflowTask>().GetSingleAsync(x => x.ItemId == wfInstance.ItemId && x.AssignedToDepartmentId.HasValue && x.ITWorkflowInstanceId == wfInstance.Id && !x.IsCompleted, "created desc");
                                        /* Chi ap dung cho button Approve */
                                        if (wfHistories != null && wfTask != null)
                                        {
                                            bool isButtonApprove = wfInstance.WorkflowData.Steps.Any(x => x.StepNumber == wfHistories.StepNumber && !string.IsNullOrEmpty(x.SuccessVote) && x.SuccessVote.ToLower().Equals("approve"));
                                            var allWFHistories = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => x.ITInstanceId == wfInstance.Id);
                                            if (allWFHistories.Any() && isButtonApprove)
                                            {
                                                var userAlreadyApprove = allWFHistories.Where(x => x.ApproverId.HasValue && x.IsStepCompleted).ToList().Select(z => z.ApproverId);
                                                var findUserHasPermissionApprove = await _uow.GetRepository<UserDepartmentMapping>().FindByAsync(x => userAlreadyApprove.Any(y => y == x.UserId)
                                                && ((wfTask.AssignedToId.HasValue && wfTask.AssignedToId.Value == x.UserId) || (wfHistories.AssignedToDepartmentId.HasValue && x.DepartmentId == wfHistories.AssignedToDepartmentId.Value && (
                                                (x.ITUserDepartmentMapping != null && x.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any() ? x.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any(p => !p.IsDeleted && p.ModuleDepartmentGroup.GroupCode == ((int) wfHistories.AssignedToDepartmentType)) : false) ||
                                                (x.Role == wfTask.AssignedToDepartmentGroup) || 
                                                ((x.ITUserDepartmentMapping != null && x.ITUserDepartmentMapping.GroupEdoc1.HasValue) ? x.ITUserDepartmentMapping.GroupEdoc1.Value == wfHistories.AssignedToDepartmentType : false)
                                                ))));
                                                if (findUserHasPermissionApprove.Any() && !nextStep.PreventAutoPopulate)
                                                {
                                                    var currentUserApprove = findUserHasPermissionApprove.FirstOrDefault();
                                                    var wfHistoriesUserApprove = allWFHistories.Where(x => x.ApproverId.HasValue && x.ApproverId.Value == currentUserApprove.UserId).OrderByDescending(l => l.Modified).FirstOrDefault();
                                                    if (currentUserApprove != null)
                                                    {
                                                        await Vote(new VoteArgs()
                                                        {
                                                            Vote = VoteType.Approve,
                                                            Comment = wfHistoriesUserApprove != null ? wfHistoriesUserApprove.Comment : "",
                                                            ItemId = wfInstance.ItemId,
                                                            RequestDepartmentCode = !string.IsNullOrEmpty(args.RequestDepartmentCode) ? args.RequestDepartmentCode : null,
                                                            ApproverLoginName = currentUserApprove.User.LoginName,
                                                            MultipleParticipantCodes = args.MultipleParticipantCodes,
                                                            RelatedDepartmentCode = args.RelatedDepartmentCode,
                                                            OrderingDepartmentCode = args.OrderingDepartmentCode,
                                                            InChargeDepartmentCode = args.InChargeDepartmentCode,
                                                            IsSkipHOD = args.IsSkipHOD,
                                                            StepWithConditions = args.StepWithConditions
                                                        });

                                                        // Lay lai trang thai hien tai cua phieu sau khi qua ham vote
                                                        var workflowInstances = await _uow.GetRepository<ITWorkflowInstance>().GetSingleAsync<ITWorkflowInstanceViewModelAPI>(x => x.Id == wfInstance.Id, "created desc");
                                                        var lastWorkflowHistories = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync<ITWorkflowHistoryViewModel>(x => x.ITInstanceId == wfInstance.Id, "created desc");
                                                        var lastWorkflowTask = await _uow.GetRepository<ITWorkflowTask>().FindByAsync<ITWorkflowTaskViewModel>(x => x.ItemId == wfInstance.ItemId, "created desc");
                                                        if (workflowInstances != null)
                                                        {
                                                            modelReturn.WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { workflowInstances };
                                                            modelReturn.ItemStatus = workflowInstances.ItemStatus;
                                                        }
                                                        if (modelReturn.WorkflowInstance.Any() && lastWorkflowHistories.Any() && lastWorkflowTask.Any())
                                                        {
                                                            modelReturn.WorkflowInstance[0].ITWorkflowHistories = lastWorkflowHistories.ToList();
                                                            modelReturn.WorkflowInstance[0].ITWorkflowTasks = lastWorkflowTask.ToList();
                                                        }
                                                        resultDTO = new ResultDTO() { Object = modelReturn };
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            
                            return resultDTO;
                            #endregion
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                resultDTO = new ResultDTO() { Messages = new List<string>() { ex.Message } };
                trackingLogAPI = new TrackingAPILogs() { Action = ActionAPIConstants.VOTE, Payload = JsonConvert.SerializeObject(args) };
                trackingLogAPI.Response = JsonConvert.SerializeObject(resultDTO);
                await _uow.CommitAsync();
                logger.LogError(ex.Message, ex);
                return resultDTO;
            }
        }
        
        public async Task UpdateParallelStep(Guid workflowHistoriesId, Guid workflowTaskId, int stepParalle)
        {
            var wfHis = await _uow.GetRepository<ITWorkflowHistory>().FindByIdAsync(workflowHistoriesId);
            var wfTask = await _uow.GetRepository<ITWorkflowTask>().FindByIdAsync(workflowTaskId);
            if (wfTask != null && wfHis != null)
            {
                wfTask.ParallelStep = stepParalle;
                wfTask.IsParallelApprove = true;
                wfHis.ParallelStep = stepParalle;
                wfHis.IsParallelApprove = true;
                await _uow.CommitAsync();
            }
        }

        public void CancelledRejectedWhenAuthorized(bool isRequestor, List<UserDepartmentMapping> approverUserDepartmentMapping, ITWorkflowHistory wfHis)
        {
            var permissionNotValid = !approverUserDepartmentMapping.Any(y => 
            (y.DepartmentId == wfHis.AssignedToDepartmentId && (
            (y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any() ? y.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any(p => !p.IsDeleted && p.ModuleDepartmentGroup.GroupCode == ((int) wfHis.AssignedToDepartmentType)) : false) ||
            (y.Role == wfHis.AssignedToDepartmentType) || ((y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.GroupEdoc1.HasValue) ? y.ITUserDepartmentMapping.GroupEdoc1.Value == wfHis.AssignedToDepartmentType : false) )) || 
            (wfHis.AssignedToUserId == y.UserId));
            if (permissionNotValid && !isRequestor)
            {
                wfHis.ApproverId = null;
                wfHis.Approver = null;
                wfHis.ApproverFullName = null;
                wfHis.Comment = null;
            }
        }

        private async Task<bool> IsAutoNext(bool isStartWorkflow, ITWorkflowHistory lastHistory, ITWorkflowStep nextStep, Guid? userId, Guid? departmentId)
        {
            var autoNext = false;
            if (nextStep.RestrictedProperties == null || nextStep.RestrictedProperties.Count == 0)
            {
                //Auto approve to next step if user is the same 
                if (lastHistory == null && isStartWorkflow)
                {
                    autoNext = true;
                } else if (lastHistory != null && lastHistory.VoteType == VoteType.Approve)
                {
                    autoNext = await _uow.GetRepository<UserDepartmentMapping>().AnyAsync(t => t.DepartmentId == departmentId && t.UserId == lastHistory.ApproverId && t.Role == nextStep.DepartmentType);
                    if (!autoNext)
                    {
                        //TH role o userdepartmentmappings khong thoa man thi check theo groupModule o ITUserDepartmentMappings
                        var ITautoNext = false;
                        ITautoNext = autoNext = await _uow.GetRepository<UserDepartmentMapping>().AnyAsync(t => t.DepartmentId == departmentId && t.UserId == lastHistory.ApproverId
                                                                                                          && (t.ITUserDepartmentMapping != null && t.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any() ? t.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any(p => !p.IsDeleted && p.ModuleDepartmentGroup.GroupCode == ((int)nextStep.DepartmentType)) : false));
                        if (!ITautoNext)
                            autoNext = userId.HasValue && lastHistory.ApproverId == userId;
                        else
                            autoNext = ITautoNext;
                    }
                }
            }
            return autoNext;
        }

        private class WorkflowItem
        {
            public WorkflowEntity Entity { get; set; }
            public string Type { get; set; }
        }

        private async Task<string> CompleteWorkflow(ITWorkflowInstance wfInstance, ITWorkflowHistory lastHistory)
        {
            string status = "";
            try
            {
                /*var item = wfItem.Entity;*/
                if (lastHistory.VoteType == VoteType.Approve)
                    status = string.IsNullOrEmpty(wfInstance.DefaultCompletedStatus) ? lastHistory == null ? "Completed" : lastHistory.Outcome : wfInstance.DefaultCompletedStatus;
                else if (lastHistory.VoteType == VoteType.None)
                    status = wfInstance.DefaultCompletedStatus;
                else
                    status = lastHistory == null ? "Completed" : lastHistory.Outcome;

                #region Khi Cancel khong sinh wf task
                if (!wfInstance.ItemStatus.Equals("Cancelled")) 
                    wfInstance.ItemStatus = status;
                #endregion

                wfInstance.IsCompleted = true;
                
                if (lastHistory.VoteType == VoteType.Approve)
                {
                    /*item.SignedBy = lastHistory == null ? item.CreatedBy : lastHistory.Approver;
                    item.SignedDate = DateTime.Now;*/
                }
                else if (lastHistory.VoteType == VoteType.Reject || lastHistory.VoteType == VoteType.Cancel)
                {
                    if (lastHistory.VoteType == VoteType.Cancel && string.IsNullOrEmpty(wfInstance.ItemStatus))
                        wfInstance.ItemStatus = "Cancelled";
                    else if (lastHistory.VoteType == VoteType.Reject && string.IsNullOrEmpty(wfInstance.ItemStatus))
                        wfInstance.ItemStatus = "Rejected";

                    await UpdateStatusAllStep(lastHistory);
                }
            }
            catch (Exception ex)
            {
                logger.LogError("Cannot complete workflow {0}", ex.Message);
                status = "Cannot complete workflow {0}" + ex.Message;
            }
            return status;
        }

        public async Task UpdateStatusAllStep(ITWorkflowHistory lastHistory)
        {
            if (lastHistory != null && lastHistory.IsParallelApprove.HasValue && lastHistory.IsParallelApprove.Value)
            {
                var workflowInstance = await _uow.GetRepository<ITWorkflowInstance>(true).GetSingleAsync(x => x.Id == lastHistory.ITInstanceId);
                if (!(workflowInstance is null))
                {
                    var allWfHistories = await _uow.GetRepository<ITWorkflowHistory>(true).FindByAsync(x => x.ITInstanceId == lastHistory.ITInstanceId && x.IsParallelApprove.Value && x.ParallelStep == lastHistory.ParallelStep && !x.IsStepCompleted);
                    foreach(var his in allWfHistories)
                    {
                        his.IsStepCompleted = lastHistory.IsStepCompleted;
                        his.Outcome = lastHistory.Outcome;
                        his.VoteType = lastHistory.VoteType;
                    }

                    var allWFTasks = await _uow.GetRepository<ITWorkflowTask>(true).FindByAsync(x => x.ItemId == workflowInstance.ItemId && x.IsParallelApprove.Value && x.ParallelStep == lastHistory.ParallelStep && !x.IsCompleted);
                    foreach (var his in allWFTasks)
                    {
                        his.IsCompleted = lastHistory.IsStepCompleted;
                        his.Vote = lastHistory.VoteType;
                    }
                }
            }
        }

        public async Task<Guid?> GetDepartmetByCodeParticipantType(string departmentCode, ITWorkflowStep nextStep)
        {
            Guid? departmentId = null;
            if (!string.IsNullOrEmpty(departmentCode))
            {
                try
                {
                    Department userDepartmentMapping = null;
                    if (nextStep.DepartmentType == Group.CheckerFIN)
                    {
                        userDepartmentMapping = await _uow.GetRepository<Department>(true).GetSingleAsync(x =>
                        departmentCode == x.Code
                        && x.UserDepartmentMappings.Any(y => ((y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any() ? y.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any(p => !p.IsDeleted && p.ModuleDepartmentGroup.GroupCode == ((int)nextStep.DepartmentType)) : false)) || (y.Role == nextStep.DepartmentType) || ((y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.GroupEdoc1.HasValue) ? y.ITUserDepartmentMapping.GroupEdoc1 == nextStep.DepartmentType : false)));
                    }
                    else
                    {
                        int jobGrade = int.Parse(nextStep.JobGrade);
                        int maxJobGrade = int.Parse(nextStep.MaxJobGrade);
                        userDepartmentMapping = await _uow.GetRepository<Department>(true).GetSingleAsync(x =>
                        departmentCode == x.Code
                        && x.UserDepartmentMappings.Any(y => ((y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any() ? y.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any(p => !p.IsDeleted && p.ModuleDepartmentGroup.GroupCode == ((int)nextStep.DepartmentType)) : false)) || (y.Role == nextStep.DepartmentType) || ((y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.GroupEdoc1.HasValue) ? y.ITUserDepartmentMapping.GroupEdoc1 == nextStep.DepartmentType : false))
                        && x.JobGrade != null && !string.IsNullOrEmpty(nextStep.JobGrade) && !string.IsNullOrEmpty(nextStep.MaxJobGrade) && jobGrade <= x.JobGrade.Grade && maxJobGrade >= x.JobGrade.Grade
                        );
                    }
                    if (!(userDepartmentMapping is null))
                        departmentId = userDepartmentMapping.Id;
                }
                catch (Exception e)
                {

                }

            }
            return departmentId;
        }

        private async Task<ProcessNextStepReturn> ProcessNextStep(bool isStartWorkflow, bool? isSkipHOD, ITWorkflowInstance wfInstance, ITWorkflowHistory lastHistory, ITWorkflowStep nextStep, string requestedDepartmentCode, string orderingDepartmentCode, string relatedDepartmentCode, string inchargeDepartmentCode, string userLoginNameAction, string comment, List<string> multipleParticipants, bool canSkipStep, List<AttributeItem> stepConditions, ParticipantF3Manual F3ManualParticipants, Guid? adminRequestorDepartmentId)
        {
            var fcReturn = new ProcessNextStepReturn();
            try
            {
                if (nextStep == null)
                {
                    string status = await CompleteWorkflow(wfInstance, lastHistory);
                    fcReturn.Status = status;
                    fcReturn.WorkflowInstance = Mapper.Map<ITWorkflowInstanceViewModel>(wfInstance);
                    fcReturn.WorkflowHistories = new List<ITWorkflowHistoryViewModel>() { Mapper.Map<ITWorkflowHistoryViewModel>(lastHistory) };
                    await _uow.CommitAsync();
                }
                else
                {
                    var lastOutcome = lastHistory == null ? string.Empty : lastHistory.Outcome;
                    Guid? userId = null;
                    Guid? departmentId = null;
                    var requestedDepartmet = await _uow.GetRepository<Department>().GetSingleAsync(x => x.Code == requestedDepartmentCode);
                    var userAction = await _uow.GetRepository<User>().GetSingleAsync(x => x.LoginName == userLoginNameAction && x.IsActivated && !x.IsDeleted);
                    switch (nextStep.ParticipantType)
                    {
                        case ParticipantTypeConstants.RequestedDept:
                            departmentId = await GetDepartmetByCodeParticipantType(requestedDepartmentCode, nextStep);
                            // Task #14389 bitrix (New rule)
                            if (!departmentId.HasValue && nextStep.DepartmentType != Group.CheckerFIN)
                            {
                                Department upperDe = await GetUpperDept(nextStep, requestedDepartmentCode);
                                if (upperDe != null)
                                    departmentId = upperDe.Id;
                            }
                            break;
                        case ParticipantTypeConstants.Relateddept:
                            if (!string.IsNullOrEmpty(relatedDepartmentCode))
                                departmentId = await GetDepartmetByCodeParticipantType(relatedDepartmentCode, nextStep);
                            // Task #14389 bitrix (New rule)
                            if (!departmentId.HasValue && nextStep.DepartmentType != Group.CheckerFIN)
                            {
                                Department upperDe = await GetUpperDept(nextStep, relatedDepartmentCode);
                                if (upperDe != null)
                                    departmentId = upperDe.Id;
                            }
                            break;
                        case ParticipantTypeConstants.OrderingDept:
                            if (!string.IsNullOrEmpty(orderingDepartmentCode))
                                departmentId = await GetDepartmetByCodeParticipantType(orderingDepartmentCode, nextStep);
                            // Task #14389 bitrix (New rule)
                            if (!departmentId.HasValue && nextStep.DepartmentType != Group.CheckerFIN)
                            {
                                Department upperDe = await GetUpperDept(nextStep, orderingDepartmentCode);
                                if (upperDe != null)
                                    departmentId = upperDe.Id;
                            }
                            break;
                        case ParticipantTypeConstants.isDIC:
                            if (!string.IsNullOrEmpty(inchargeDepartmentCode))
                                departmentId = await GetDepartmetByCodeParticipantType(inchargeDepartmentCode, nextStep);
                            // Task #14389 bitrix (New rule)
                            if (!departmentId.HasValue && nextStep.DepartmentType != Group.CheckerFIN)
                            {
                                Department upperDe = await GetUpperDept(nextStep, inchargeDepartmentCode);
                                if (upperDe != null)
                                    departmentId = upperDe.Id;
                            }
                            break;
                        case ParticipantTypeConstants.ItemUserField:
                            List<string> participantsF3Manual = new List<string>() { F3ManualParticipantConst.ExecutiveDirector, F3ManualParticipantConst.GeneralManager, F3ManualParticipantConst.SeniorGeneralManager, F3ManualParticipantConst.Auditor };
                            if (participantsF3Manual.Contains(nextStep.DataField) && F3ManualParticipants != null)
                            {
                                string loginName = "";
                                switch(nextStep.DataField)
                                {
                                    case F3ManualParticipantConst.ExecutiveDirector:
                                        loginName = F3ManualParticipants.ExecutiveDirector;
                                        break;
                                    case F3ManualParticipantConst.GeneralManager:
                                        loginName = F3ManualParticipants.GeneralManager;
                                        break;
                                    case F3ManualParticipantConst.SeniorGeneralManager:
                                        loginName = F3ManualParticipants.SeniorGeneralManager;
                                        break;
                                    case F3ManualParticipantConst.Auditor:
                                        loginName = F3ManualParticipants.Auditor;
                                        break;
                                }

                                var user = _uow.GetRepository<User>().GetSingle(x => x.LoginName.ToLower().Equals(loginName.ToLower()) && x.IsActivated);
                                if (user != null)
                                    userId = user.Id;
                            } else
                            {
                                userId = userAction.Id;
                            }
                            break;
                        case ParticipantTypeConstants.UpperDepartment:
                            if (requestedDepartmet != null)
                            {
                                Department upperDept = await GetUpperDept(nextStep, requestedDepartmet.Code);
                                if (upperDept != null)
                                    departmentId = upperDept.Id;
                            }
                            break;
                        default:
                            if (string.IsNullOrEmpty(nextStep.JobGrade) || string.IsNullOrEmpty(nextStep.MaxJobGrade))
                            {
                                fcReturn.ErrorCodes = new List<int> { -1 };
                                fcReturn.ErrorMessages = new List<string> { string.Format("Please define Jobgrade and MaxJobgrade for Workflow: {0} và step: {1} ", wfInstance.WorkflowName,  nextStep.StepName) };
                                goto Finish;
                            }
                            Department hrDepartment = await GetDept(nextStep, requestedDepartmet, nextStep.ParticipantType, multipleParticipants, adminRequestorDepartmentId);
                            if (hrDepartment != null)
                                departmentId = hrDepartment.Id;
                            break;
                    }
                    //Start next step
                    var itemStatus = await UpdateItemStatus(nextStep, userId, departmentId);
                    if (itemStatus.Equals("Cannot_find_status!"))
                    {
                        fcReturn.ErrorCodes = new List<int> { -1 };
                        fcReturn.ErrorMessages = new List<string> { "Cannot find default status. Please enter Default status field in workflow template!" + " | Workflow Template:  " + wfInstance.WorkflowName };
                        goto Finish;
                    }
                    wfInstance.ItemStatus = itemStatus;

                    try
                    {
                        fcReturn.WorkflowHistories = new List<ITWorkflowHistoryViewModel> { CreateHistoricalData(wfInstance, nextStep, userId, departmentId) };
                    }
                    catch (Exception e)
                    {
                        fcReturn.ErrorCodes = new List<int> { -1 };
                        fcReturn.ErrorMessages = new List<string> { "Cannot created workflow history: " + wfInstance.ItemReferenceNumber + " | ExceptionMessage: " + e.Message };
                        logger.LogError("Cannot created workflow history: " + wfInstance.ItemReferenceNumber + " | ExceptionMessage: " + e.Message);
                        goto Finish;
                    }

                    /* Tao worflow task*/
                    try
                    {
                        fcReturn.WorkflowTasks = new List<ITWorkflowTaskViewModel> { await AssignTaskAndPermission(wfInstance, nextStep, userId, departmentId, requestedDepartmet, userAction) };
                    }
                    catch (Exception e)
                    {
                        fcReturn.ErrorCodes = new List<int> { -1 };
                        fcReturn.ErrorMessages = new List<string> { "Cannot created workflow task: " + wfInstance.ItemReferenceNumber + " | ExceptionMessage: " + e.Message };
                        logger.LogError("Cannot created workflow task: " + wfInstance.ItemReferenceNumber + " | ExceptionMessage: " + e.Message);
                        goto Finish;
                    }

                    //Check if this step can be skipped
                    if (isStartWorkflow)
                    {
                        try
                        {
                            await _uow.CommitAsync();
                            await AutoPopulateNextStep(isStartWorkflow, isSkipHOD, comment, lastHistory, nextStep, wfInstance.ItemId, userId, departmentId, requestedDepartmet, orderingDepartmentCode, relatedDepartmentCode, inchargeDepartmentCode, userAction, multipleParticipants, stepConditions, F3ManualParticipants, adminRequestorDepartmentId);
                        }
                        catch (Exception e)
                        {
                            fcReturn.ErrorCodes = new List<int> { -1 };
                            fcReturn.ErrorMessages = new List<string> { "Cannot AutoPopulateNextStep with IsStartWorkflow: " + wfInstance.ItemReferenceNumber + " | ExceptionMessage: " + e.Message };
                            logger.LogError("Cannot AutoPopulateNextStep with IsStartWorkflow: " + wfInstance.ItemReferenceNumber + " | ExceptionMessage: " + e.Message);
                            goto Finish;
                        }
                    }
                    else
                    {
                        if (!nextStep.PreventAutoPopulate && canSkipStep)
                        {
                            await _uow.CommitAsync();
                            await AutoPopulateNextStep(false, null, comment, lastHistory, nextStep, wfInstance.ItemId, userId, departmentId, requestedDepartmet, orderingDepartmentCode, relatedDepartmentCode, inchargeDepartmentCode, userAction, multipleParticipants, stepConditions, F3ManualParticipants, adminRequestorDepartmentId);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                fcReturn.ErrorCodes = new List<int> { -1 };
                fcReturn.ErrorMessages = new List<string> { "Cannot complete next step, ex: {0}", ex.Message };
                logger.LogError("Cannot complete next step, ex: {0}", ex.Message);
            }
        Finish:
            return fcReturn;
        }

        private async Task<Department> GetUpperDept(ITWorkflowStep nextStep, string requestedDepartmentCode)
        {
            if (!string.IsNullOrEmpty(requestedDepartmentCode))
            {
                Department indexDept = await _uow.GetRepository<Department>().GetSingleAsync(x => x.Code == requestedDepartmentCode);
                if (indexDept != null)
                {
                    bool skip = false;
                    var jobGrades = await _uow.GetRepository<JobGrade>().GetAllAsync();
                    var nextStepJobGrade = jobGrades.FirstOrDefault(x => x.Grade == int.Parse(nextStep.JobGrade));
                    var nextStepMaxJobGrade = jobGrades.FirstOrDefault(x => x.Grade == int.Parse(nextStep.MaxJobGrade));
                    var currentJobGrade = jobGrades.FirstOrDefault(x => x.Id == indexDept.JobGradeId);
                    /*if (nextStep.IncludeCurrentNode && currentJobGrade.Grade >= nextStepJobGrade.Grade && currentJobGrade.Grade <= nextStepMaxJobGrade.Grade)
                    {
                        var hasParticipants = await _uow.GetRepository<UserDepartmentMapping>().AnyAsync(x => x.DepartmentId == indexDept.Id && (nextStep.DepartmentType == x.Role || (x.Department.IsPerfomance && (Group.Member == x.Role || Group.Checker == x.Role))));
                        if (hasParticipants)
                        {
                            return indexDept;
                        }
                        else
                        {
                            _refDeparmentId = indexDept.Id;
                        }
                    }*/
                    while (!skip)
                    {
                        if (indexDept.ParentId.HasValue)
                        {
                            indexDept = await _uow.GetRepository<Department>().GetSingleAsync(x => x.Id == indexDept.ParentId);
                            if (indexDept != null)
                            {
                                var indexJobGrade = jobGrades.FirstOrDefault(x => x.Id == indexDept.JobGradeId);
                                if (indexJobGrade.Grade >= nextStepJobGrade.Grade)
                                {
                                    if (indexJobGrade.Grade > nextStepMaxJobGrade.Grade)
                                    {
                                        return null;
                                    }
                                    //If next step is large than department type, get the next step
                                    /*if (indexJobGrade.Grade > nextStepJobGrade.Grade)
                                    {
                                        nextStep.DepartmentType = nextStep.NextDepartmentType;
                                    }*/
                                    //Check next department type
                                    var hasParticipants = await _uow.GetRepository<UserDepartmentMapping>().AnyAsync(x => x.DepartmentId == indexDept.Id && ((nextStep.DepartmentType == x.Role) || ((x.ITUserDepartmentMapping != null && x.ITUserDepartmentMapping.GroupEdoc1.HasValue) ? x.ITUserDepartmentMapping.GroupEdoc1.Value == nextStep.DepartmentType : false)));
                                    if (hasParticipants)
                                    {
                                        return indexDept;
                                    }
                                    else
                                    {
                                        _refDeparmentId = indexDept.Id;
                                    }
                                }
                            }
                            else
                            {
                                if (indexDept.JobGrade.Grade == 9)
                                {
                                    return indexDept;
                                }
                                return null;
                            }
                        }
                        else
                        {
                            if (indexDept.JobGrade.Grade == 9)
                            {
                                return indexDept;
                            }
                        }
                        if (indexDept == null || !indexDept.ParentId.HasValue)
                        {
                            return null;
                        }
                    }
                }
                return indexDept;
            }
            return null;
        }

        private async Task<Department> FindMatchedDept(ITWorkflowStep nextStep, Department indexDept, JobGrade nextStepJobGrade, JobGrade nextStepMaxJobGrade, bool forceHQ = false, string participantType = "", List<string> multipleParticipantCodes = null, Guid? adminRequestorDepartmentId = null)
        {
            IEnumerable<ItemListDepartmentViewModel> depts = new List<ItemListDepartmentViewModel>();
            var dept = new List<Department>();
            var accDepts = await _uow.GetRepository<Department>(true).FindByAsync(x => x.JobGrade.Grade >= nextStepJobGrade.Grade && x.JobGrade.Grade <= nextStepMaxJobGrade.Grade
             && x.UserDepartmentMappings.Any(udm => (udm.Role == Group.All || ((udm.Role & nextStep.DepartmentType) == nextStep.DepartmentType) || ((udm.ITUserDepartmentMapping != null && udm.ITUserDepartmentMapping.GroupEdoc1 != null && udm.ITUserDepartmentMapping.GroupEdoc1.HasValue) ? nextStep.DepartmentType == udm.ITUserDepartmentMapping.GroupEdoc1 : false)
             )), string.Empty, x => x.JobGrade);
            dept.AddRange(accDepts);
            #region New CR Group Edoc
            try
            {
                if ((int)nextStep.DepartmentType >= 10000)
                {
                    int departmentType = ((int)nextStep.DepartmentType);
                    var findDeptEqPar = await _uow.GetRepository<ITModuleDepartmentGroupMapping>(true).FindByAsync(x => !x.IsDeleted && x.ModuleDepartmentGroup.GroupCode == departmentType);
                    var listDepartmentIds = findDeptEqPar.Select(x => x.ITUserDepartmentMapping.UserDepartmentMapping.DepartmentId).ToList();
                    if (listDepartmentIds.Any())
                    {
                        var findDept = await _uow.GetRepository<Department>(true).FindByAsync(x => listDepartmentIds.Contains(x.Id) && x.JobGrade.Grade >= nextStepJobGrade.Grade && x.JobGrade.Grade <= nextStepMaxJobGrade.Grade);
                        if (findDept.Any())
                            dept.AddRange(findDept);
                    }
                }
            }
            catch (Exception e) { }
            #endregion

            List<string> participantAccount = new List<string> { "AccStore" };
            if (multipleParticipantCodes != null && multipleParticipantCodes.Any() && participantAccount.Any(y => y.ToLower().Trim().Equals(participantType.Trim().ToLower())))
            {
                depts = Mapper.Map<List<ItemListDepartmentViewModel>>(dept).Where(x => x.ParticipantType != null && x.ParticipantType.Any(y => y.Code.Trim().ToLower() == participantType.Trim().ToLower()) && x.ParticipantType.Any(z => multipleParticipantCodes.Contains(z.Code.Trim().ToLower()))).ToList();
            }
            else
            {
                if (adminRequestorDepartmentId != null && adminRequestorDepartmentId.HasValue && adminRequestorDepartmentId.Value != Guid.Empty)
                {
                    depts = Mapper.Map<List<ItemListDepartmentViewModel>>(dept).Where(x => x.Id == adminRequestorDepartmentId.Value && x.ParticipantType != null && x.ParticipantType.Any(y => y.Code.Trim().ToLower() == participantType.Trim().ToLower())).ToList();
                }
                else
                {
                    depts = Mapper.Map<List<ItemListDepartmentViewModel>>(dept).Where(x => x.ParticipantType != null && x.ParticipantType.Any(y => y.Code.Trim().ToLower() == participantType.Trim().ToLower())).ToList();
                }
            }

            return await FindDept(Mapper.Map<ItemListDepartmentViewModel>(indexDept), depts, true);
        }

        private async Task<Department> FindMatchedOrderingDept(ITWorkflowStep nextStep, Department indexDept, JobGrade nextStepJobGrade, JobGrade nextStepMaxJobGrade, bool forceHQ = false)
        {
            IEnumerable<ItemListDepartmentViewModel> orderingDept = new List<ItemListDepartmentViewModel>();
            /*if (forceHQ)
            {
                hrDepts = await _uow.GetRepository<Department>().FindByAsync(x => x.IsHR
                && x.JobGrade.Grade >= nextStepJobGrade.Grade && x.JobGrade.Grade <= nextStepMaxJobGrade.Grade
                  && x.IsStore == false && x.UserDepartmentMappings.Any(udm => ((udm.User.Role & UserRole.HR) == UserRole.HR || (udm.User.Role & UserRole.HRAdmin) == UserRole.HRAdmin) && (udm.Role == Group.All || (udm.Role & nextStep.DepartmentType) == nextStep.DepartmentType *//*|| (udm.Role & nextStep.NextDepartmentType) == nextStep.NextDepartmentType*//*)), string.Empty, x => x.JobGrade);
            }
            else
            {*/
            var orderingDepts = await _uow.GetRepository<Department>().FindByAsync(x =>x.JobGrade.Grade >= nextStepJobGrade.Grade && x.JobGrade.Grade <= nextStepMaxJobGrade.Grade
                 && x.UserDepartmentMappings.Any(udm => (udm.Role == Group.All || ((udm.Role & nextStep.DepartmentType) == nextStep.DepartmentType) || ((udm.ITUserDepartmentMapping != null && udm.ITUserDepartmentMapping.GroupEdoc1 != null && udm.ITUserDepartmentMapping.GroupEdoc1.HasValue) ? udm.ITUserDepartmentMapping.GroupEdoc1 == nextStep.DepartmentType : false))), string.Empty, x => x.JobGrade);
            orderingDept = Mapper.Map<List<ItemListDepartmentViewModel>>(orderingDepts).Where(x => x.ParticipantType != null && x.ParticipantType.Any(y => y.Code == ParticipantTypeConstants.OrderingDept)).ToList();
            return await FindDept(Mapper.Map<ItemListDepartmentViewModel>(indexDept), orderingDept, forceHQ);
        }

        private async Task<Department> FindDept(ItemListDepartmentViewModel indexDept, IEnumerable<ItemListDepartmentViewModel> hrDepts, bool forceHQ)
        {
            var allParentDeptIds = new List<Guid>();
            allParentDeptIds.Add(indexDept.Id);
            while (indexDept != null && indexDept.ParentId.HasValue)
            {
                indexDept = await _uow.GetRepository<Department>(true).GetSingleAsync<ItemListDepartmentViewModel>(x => x.Id == indexDept.ParentId && (x.JobGrade.Grade <= 6 || forceHQ == true));
                if (indexDept != null)
                    allParentDeptIds.Add(indexDept.Id);
            }

            ItemListDepartmentViewModel foundDept = null;
            var lastIdx = 10;
            hrDepts = hrDepts.OrderBy(x => x.JobGradeGrade).ToList();
            foreach (var hrDept in hrDepts)
            {
                var skip = false;
                var parentDept = hrDept;
                while (!skip)
                {
                    if (parentDept.ParentId.HasValue)
                    {
                        parentDept = await _uow.GetRepository<Department>().GetSingleAsync<ItemListDepartmentViewModel>(x => x.Id == parentDept.ParentId);
                        if (parentDept != null && allParentDeptIds.Contains(parentDept.Id))
                        {
                            if (allParentDeptIds.IndexOf(parentDept.Id) < lastIdx)
                            {
                                lastIdx = allParentDeptIds.IndexOf(parentDept.Id);
                                foundDept = hrDept;
                            }
                        }
                    }
                    if (parentDept == null || !parentDept.ParentId.HasValue)
                    {
                        skip = true;
                    }
                }
            }

            return Mapper.Map<Department>(foundDept);
        }

        private async Task<Department> GetDept(ITWorkflowStep nextStep, Department rqDepartment, string participantType, List<string> multipleParticipantCodes, Guid? adminRequestorDepartmentId)
        {
            Department indexDept = rqDepartment;
            var jobGrades = await _uow.GetRepository<JobGrade>().GetAllAsync();
            var indexJobGrade = jobGrades.FirstOrDefault(x => x.Id == indexDept.JobGradeId);
            var nextStepMaxJobGrade = jobGrades.FirstOrDefault(x => x.Grade == int.Parse(nextStep.MaxJobGrade));
            var nextStepJobGrade = jobGrades.FirstOrDefault(x => x.Grade == int.Parse(nextStep.JobGrade));
            if (nextStepMaxJobGrade == null) { nextStepMaxJobGrade = nextStepJobGrade; }
            Department foundDept = await FindMatchedDept(nextStep, indexDept, nextStepJobGrade, nextStepMaxJobGrade, false, participantType, multipleParticipantCodes, adminRequestorDepartmentId);
            //ReCheck to get HQ if store is not found
            if (foundDept == null)
            {
                //Force to get next department type level if navigate to HQ
                foundDept = await FindMatchedDept(nextStep, indexDept, nextStepJobGrade, nextStepMaxJobGrade, true, participantType, multipleParticipantCodes);
            }
            if (foundDept != null)
            {
                var hasParticipants = await _uow.GetRepository<UserDepartmentMapping>().GetSingleAsync(x => x.DepartmentId == foundDept.Id && (nextStep.DepartmentType == x.Role));
                if (hasParticipants == null)
                {
                    hasParticipants = await _uow.GetRepository<UserDepartmentMapping>().GetSingleAsync(x => x.DepartmentId == foundDept.Id);
                }

                if (hasParticipants != null)
                {
                    return foundDept;
                }
                else
                {
                    /*_refDeparmentId = foundDept.Id;
                    var skip = false;
                    while (!skip)
                    {
                        if (foundDept.ParentId.HasValue)
                        {
                            foundDept = await _uow.GetRepository<Department>().GetSingleAsync(x => x.Id == foundDept.ParentId);
                            if (foundDept != null)
                            {
                                var foundJobGrade = jobGrades.FirstOrDefault(x => x.Id == foundDept.JobGradeId);
                                if (foundJobGrade.Grade >= nextStepJobGrade.Grade)
                                {
                                    if (foundJobGrade.Grade > nextStepMaxJobGrade.Grade)
                                    {
                                        return null;
                                    }
                                    hasParticipants = await _uow.GetRepository<UserDepartmentMapping>().GetSingleAsync(x => x.DepartmentId == foundDept.Id && nextStep.DepartmentType == x.Role);
                                    if (hasParticipants != null)
                                    {
                                        return foundDept;
                                    }
                                }
                            }
                            else { return null; }
                        }
                        if (foundDept == null || !foundDept.ParentId.HasValue)
                        {
                            return null;
                        }
                    }*/
                }
            }
            return null;
        }

        private async Task<Department> GetAccHQDept(ITWorkflowHistory lastHistory, ITWorkflowStep nextStep, Department rqDepartment)
        {
            Department indexDept = rqDepartment;
            var jobGrades = await _uow.GetRepository<JobGrade>().GetAllAsync();
            var indexJobGrade = jobGrades.FirstOrDefault(x => x.Id == indexDept.JobGradeId);
            var nextStepMaxJobGrade = jobGrades.FirstOrDefault(x => x.Grade == int.Parse(nextStep.MaxJobGrade));
            var nextStepJobGrade = jobGrades.FirstOrDefault(x => x.Grade == int.Parse(nextStep.JobGrade));
            if (nextStepMaxJobGrade == null) { nextStepMaxJobGrade = nextStepJobGrade; }
            Department foundDept = await FindMatchedOrderingDept(nextStep, indexDept, nextStepJobGrade, nextStepMaxJobGrade, false);
            //ReCheck to get HQ if store is not found
            if (foundDept == null)
            {
                //Force to get next department type level if navigate to HQ
                foundDept = await FindMatchedOrderingDept(nextStep, indexDept, nextStepJobGrade, nextStepMaxJobGrade, true);
            }
            if (foundDept != null)
            {
                var hasParticipants = await _uow.GetRepository<UserDepartmentMapping>().GetSingleAsync(x => x.DepartmentId == foundDept.Id && (/*nextStep.ParticipantType == ParticipantType.HRDepartment && */((x.User.Role & UserRole.HR) == UserRole.HR || (x.User.Role & UserRole.HRAdmin) == UserRole.HRAdmin)) && nextStep.DepartmentType == x.Role);
                if (hasParticipants == null)
                {
                    hasParticipants = await _uow.GetRepository<UserDepartmentMapping>().GetSingleAsync(x => x.DepartmentId == foundDept.Id && (/*nextStep.ParticipantType == ParticipantType.HRDepartment && */((x.User.Role & UserRole.HR) == UserRole.HR || (x.User.Role & UserRole.HRAdmin) == UserRole.HRAdmin)) /*&& nextStep.NextDepartmentType == x.Role*/);
                }
                if (hasParticipants != null)
                {
                    return foundDept;
                }
                else
                {
                    _refDeparmentId = foundDept.Id;
                    var skip = false;
                    while (!skip)
                    {
                        if (foundDept.ParentId.HasValue)
                        {
                            foundDept = await _uow.GetRepository<Department>().GetSingleAsync(x => x.Id == foundDept.ParentId);
                            if (foundDept != null)
                            {
                                var foundJobGrade = jobGrades.FirstOrDefault(x => x.Id == foundDept.JobGradeId);
                                if (foundJobGrade.Grade >= nextStepJobGrade.Grade)
                                {
                                    if (foundJobGrade.Grade > nextStepMaxJobGrade.Grade)
                                    {
                                        return null;
                                    }
                                    hasParticipants = await _uow.GetRepository<UserDepartmentMapping>().GetSingleAsync(x => x.DepartmentId == foundDept.Id && nextStep.DepartmentType == x.Role);
                                    if (hasParticipants != null)
                                    {
                                        return foundDept;
                                    }
                                }
                            }
                            else { return null; }
                        }
                        if (foundDept == null || !foundDept.ParentId.HasValue)
                        {
                            return null;
                        }
                    }
                }
            }
            return null;
        }

        private void AssignItemPermToPreviousStep(Guid itemId, IEnumerable<ITWorkflowHistory> wfHistories, ITWorkflowStep nextStep, List<Permission> permissions)
        {
            //Add perm for requestor
            /*permissions.Add(new Permission()
            {
                Perm = nextStep.RequestorPerm,
                UserId = item.CreatedById,
                ItemId = item.Id
            });*/
            if (wfHistories != null)
            {
                //Add perm for previous approvers
                foreach (var wfHistory in wfHistories)
                {
                    permissions.Add(new Permission()
                    {
                        Perm = Infrastructure.Enums.Right.View,
                        UserId = wfHistory.ApproverId,
                        DepartmentId = wfHistory.AssignedToDepartmentId,
                        DepartmentType = wfHistory.AssignedToDepartmentType,
                        ItemId = itemId
                    });
                }
            }
        }
        private async Task RemoveItemPerm(Guid id)
        {
            var perms = await _uow.GetRepository<Permission>().FindByAsync(x => x.ItemId == id);
            _uow.GetRepository<Permission>().Delete(perms);
        }

        private void AssignTaskPerm(ITWorkflowTask task, ITWorkflowStep nextStep, Guid? userId, Guid? departmentId, List<Permission> permissions)
        {
            permissions.Add(new Permission()
            {
                Perm = Infrastructure.Enums.Right.View,
                UserId = userId,
                DepartmentId = departmentId,
                DepartmentType = nextStep.DepartmentType,
                ItemId = task.Id
            });
        }

        private void AssignItemPermForNextStep(Guid itemId, ITWorkflowStep nextStep, Guid? userId, Guid? departmentId, List<Permission> permissions)
        {
            //Add perm for current approver
            permissions.Add(new Permission()
            {
                Perm = nextStep.ApproverPerm,
                UserId = userId,
                DepartmentId = departmentId,
                DepartmentType = nextStep.DepartmentType,
                ItemId = itemId
            });
        }

        private async Task<ITWorkflowTaskViewModel> AssignTaskAndPermission(ITWorkflowInstance wfInstance, ITWorkflowStep nextStep, Guid? userId, Guid? departmentId, Department rqDepartment, User rqUser)
        {
            var permissions = new List<Permission>();
            //Delete all current permission
            var wfHistories = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => x.ITInstance.ItemId == wfInstance.ItemId);
            AssignItemPermToPreviousStep(wfInstance.ItemId, wfHistories, nextStep, permissions);
            Func<Group, bool> DoesHaveParticipants = (Group groupType) =>
            {
                bool checkStatus = _uow.GetRepository<UserDepartmentMapping>().Any(x => x.DepartmentId == departmentId.Value && (((x.User.Role & UserRole.HR) == UserRole.HR || (x.User.Role & UserRole.HRAdmin) == UserRole.HRAdmin)) && groupType == x.Role);
                return checkStatus;
            };

            //Create new task list
            var hasParticipants = true;
            var customDepartmentType = nextStep.DepartmentType;

            if (departmentId.HasValue)
            {
                hasParticipants = DoesHaveParticipants(nextStep.DepartmentType);
                if (hasParticipants)
                {
                    customDepartmentType = nextStep.DepartmentType;
                }

                var deprt = await _uow.GetRepository<Department>().GetSingleAsync(x => x.Id == departmentId);
                if (!hasParticipants && deprt.IsPerfomance)
                {
                    if (nextStep.DepartmentType == Group.Checker)
                    {
                        nextStep.DepartmentType = Group.Member;
                    }
                    else
                        nextStep.DepartmentType = Group.Checker;
                }
            }

            var newTask = new ITWorkflowTask()
            {
                DueDate = nextStep.DueDateNumber == 0 ? DateTime.Now.AddDays(3) : DateTime.Now.AddDays(nextStep.DueDateNumber),
                Title = wfInstance.ItemReferenceNumber,
                ItemId = wfInstance.ItemId,
                ITWorkflowInstanceId = wfInstance.Id,
                Status = wfInstance.ItemStatus,
                /*ItemType = wfItem.Type,*/
                RequestorId = rqUser?.Id,
                RequestorFullName = rqUser?.CreatedByFullName,
                RequestorUserName = rqUser?.CreatedBy,
                RequestedDepartmentId = rqDepartment?.Id,
                RequestedDepartmentCode = rqDepartment?.Code,
                RequestedDepartmentName = rqDepartment?.Name,
                ReferenceNumber = wfInstance.ItemReferenceNumber,
                AssignedToId = userId,
                AssignedToDepartmentId = departmentId.HasValue ? departmentId : null,
                AssignedToDepartmentGroup = customDepartmentType,
                CreatedBy = rqUser?.LoginName,
                CreatedById = rqUser?.Id,
                CreatedByFullName = rqUser?.FullName
            };

            // duyet song song
            if (nextStep.IsParallelApprove.HasValue && nextStep.IsParallelApprove.Value)
            {
                newTask.IsParallelApprove = nextStep.IsParallelApprove.Value;
                newTask.ParallelStep = nextStep.StepNumber;
            }
            nextStep.DepartmentType = customDepartmentType;
            _uow.GetRepository<ITWorkflowTask>().Add(newTask);
            //Assign permission for Task
            AssignTaskPerm(newTask, nextStep, userId, departmentId, permissions);
            //Assign permission for Item
            AssignItemPermForNextStep(wfInstance.ItemId, nextStep, userId, departmentId, permissions);
            _uow.GetRepository<Permission>().Add(permissions);
            return Mapper.Map<ITWorkflowTaskViewModel>(newTask);
        }

        private async Task<string> UpdateItemStatus(ITWorkflowStep nextStep, Guid? userId, Guid? departmentId)
        {
            var itemStatus = "";
            if (!(departmentId.HasValue || userId.HasValue))
            {
                itemStatus = $"Pending";
            }
            else
            {
                /*itemStatus = $"Waiting for {nextStep.StepName}";
                if (!nextStep.IsStatusFollowStepName && departmentId.HasValue)
                {
                    var nextDepartment = await _uow.GetRepository<Department>().FindByIdAsync(departmentId.Value);
                    itemStatus = $"Waiting for {nextDepartment.PositionName} Approval";
                }*/
                if (!string.IsNullOrEmpty(nextStep.DefaultStatus))
                {
                    itemStatus = $"Waiting for {nextStep.DefaultStatus}";
                } else {
                    itemStatus = "Cannot_find_status!";
                }
            }
            return itemStatus;
        }

        private ITWorkflowHistoryViewModel CreateHistoricalData(ITWorkflowInstance wfInstance, ITWorkflowStep nextStep, Guid? userId, Guid? departmentId)
        {
            Func<Group, bool> DoesHaveParticipants = (Group groupType) =>
            {
                bool checkStatus = _uow.GetRepository<UserDepartmentMapping>().Any(x => x.DepartmentId == departmentId.Value && groupType == x.Role);
                return checkStatus;
            };

            var customDepartmentType = nextStep.DepartmentType;
            bool hasParticipants = DoesHaveParticipants(nextStep.DepartmentType);
            if (hasParticipants)
            {
                customDepartmentType = nextStep.DepartmentType;
            }

            var historyItem = new ITWorkflowHistory()
            {
                DueDate = nextStep.DueDateNumber == 0 ? DateTime.Now.AddDays(3) : DateTime.Now.AddDays(nextStep.DueDateNumber),
                ITInstanceId = wfInstance.Id,
                AssignedToUserId = userId,
                AssignedToDepartmentId = departmentId.HasValue ? departmentId : null,
                AssignedToDepartmentType = customDepartmentType,
                StepNumber = nextStep.StepNumber,
            };
            // duyet song song
            if (nextStep.IsParallelApprove.HasValue && nextStep.IsParallelApprove.Value)
            {
                historyItem.IsParallelApprove = nextStep.IsParallelApprove.Value;
                historyItem.ParallelStep = nextStep.StepNumber;
            }
            _uow.GetRepository<ITWorkflowHistory>().Add(historyItem);
            return Mapper.Map<ITWorkflowHistoryViewModel>(historyItem);
        }

        public async Task<ResultDTO> GetWorkflowProcessingStageByItemId(Guid ItemId)
        {
            List<string> status = new List<string>() { "Completed"};
            var resultDTO = new ResultDTO() { };
            var workflowInstances = await _uow.GetRepository<ITWorkflowInstance>(true).FindByAsync<ITWorkflowInstanceViewModel>(x => x.ItemId == ItemId, "created asc");
            if (workflowInstances.Any())
            {
                List<ITWorkflowInstanceViewModelAPI> instanceModel = new List<ITWorkflowInstanceViewModelAPI>();
                WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn();
                int round = 1;
                foreach (var instance in workflowInstances)
                {
                    instance.Round = round++;
                    modelReturn.ItemStatus = instance.ItemStatus;
                    instance.AllSteps = ((instance.ITWorkflowData != null && instance.ITWorkflowData.Steps != null && instance.ITWorkflowData.Steps.Any()) ? ((List<ITWorkflowStepViewModel>)instance.ITWorkflowData.Steps) : null);
                    
                    if (instance.ITWorkflowData != null && instance.ITWorkflowData.Steps.Any())
                    {
                        if (instance.StepConditions != null && instance.StepConditions.Any())
                        {
                            instance.AllSteps = this.GetStepWithCondition(Mapper.Map<List<ITWorkflowStep>>(instance.ITWorkflowData.Steps.ToList()), instance.StepConditions);
                        } else
                        {
                            var allInstance = await _uow.GetRepository<ITWorkflowInstance>(true).FindByAsync(x => x.ItemId == instance.ItemId && x.Created != null && x.Created.Year <= 2023);
                            if (!allInstance.Any())
                            {
                                // Phieu moi
                                instance.AllSteps = instance.AllSteps.Where(x => (!x.StepConditions.Any()) || (x.StepConditions.Any() && !x.IsStepWithConditions)).ToList();
                            }
                        }
                    }

                    var workflowTasks = await _uow.GetRepository<ITWorkflowTask>(true).FindByAsync<ITWorkflowTaskViewModel>(x => x.ITWorkflowInstanceId == instance.Id && (!x.ParentTaskId.HasValue || x.ParentTaskId.Value == null), "created asc");
                    if (!(workflowTasks is null))
                    {
                        instance.ITWorkflowTasks = workflowTasks.ToList();
                        foreach(var task in instance.ITWorkflowTasks)
                        {
                            var chidTask = await _uow.GetRepository<ITWorkflowTask>().FindByAsync<ITWorkflowTaskViewModel>(x => x.ParentTaskId == task.Id);
                            if (chidTask.Any())
                                task.ReferenceWorkflowTask = chidTask.ToList();
                        }
                    }

                    var workflowHistories = await _uow.GetRepository<ITWorkflowHistory>(true).FindByAsync<ITWorkflowHistoryViewModel>(x => x.ITInstanceId == instance.Id && (!x.ParentHistoryId.HasValue || x.ParentHistoryId.Value == null), "created asc");
                    if (!(workflowHistories is null))
                    {
                        // tra ve cho processing stage
                        foreach (var allStep in instance.AllSteps)
                        {
                            allStep.ITWorkflowHistories = (ITWorkflowHistoryViewModel) workflowHistories.Where(y => y.StepNumber == allStep.StepNumber).ToList().FirstOrDefault();
                        }

                        // remove cac step k co thuoc tinh
                        if (status.Contains(instance.ItemStatus))
                            instance.AllSteps = instance.AllSteps.Where(x => !(x.ITWorkflowHistories is null)).ToList();

                        // tra ve step
                        instance.ITWorkflowHistories = workflowHistories.OrderBy(x => x.Created).ToList();
                        int maxStep = workflowHistories.OrderByDescending(x => x.StepNumber).Select(y => y.StepNumber).FirstOrDefault();
                        if (instance.ITWorkflowData != null && instance.ITWorkflowData.Steps.Any())
                        {
                            foreach (var his in instance.ITWorkflowHistories)
                            {
                                // tra ve dept submit cho cac module khac show len
                                if ((new List<int> { 0, 1 }).Contains(his.StepNumber) && !his.AssignedToDepartmentId.HasValue && his.ApproverId.HasValue && his.ApproverId != null)
                                {
                                    var userSubmit = await _uow.GetRepository<User>().GetSingleAsync(x => x.Id == his.ApproverId.Value);
                                    if (userSubmit != null)
                                    {
                                        his.AssignedToDepartmentCode = !string.IsNullOrEmpty(userSubmit.SAPCode) ? userSubmit.SAPCode : "";
                                        his.AssignedToDepartmentId = userSubmit.Id;
                                        his.AssignedToDepartmentName = !string.IsNullOrEmpty(userSubmit.FullName) ? userSubmit.FullName : "";
                                    }
                                    /*var deptHeadCount = await _uow.GetRepository<Department>().GetSingleAsync(x => x.UserDepartmentMappings.Any(y => y.UserId == his.AssignedToUserId && y.IsHeadCount));
                                    if (!(deptHeadCount is null))
                                    {
                                        his.AssignedToDepartmentCode = !string.IsNullOrEmpty(deptHeadCount.Code) ? deptHeadCount.Code : "";
                                        his.AssignedToDepartmentId = deptHeadCount.Id;
                                        his.AssignedToDepartmentName = !string.IsNullOrEmpty(deptHeadCount.Name) ? deptHeadCount.Name : "";
                                    }*/
                                }

                                // tra ve step name
                                var step = instance.ITWorkflowData.Steps.Where(x => x.StepNumber == his.StepNumber).FirstOrDefault();
                                if (step != null)
                                {
                                    // check dieu kien is skip de hien processing stage
                                    if (!string.IsNullOrEmpty(step.StepName) && step.StepName.ToLower().Contains("hod") && step.StepName.ToLower().Contains("manager"))
                                    {
                                        if (!his.AssignedToUserId.HasValue && !his.AssignedToDepartmentId.HasValue)
                                        {
                                            his.IsSkip = true;
                                        }
                                    } else if (his.StepNumber < maxStep && !his.AssignedToUserId.HasValue && !his.AssignedToDepartmentId.HasValue && (his.IsParallelApprove == null || !his.IsParallelApprove.HasValue))
                                    {
                                        his.IsSkip = true;
                                    }
                                    his.StepName = !string.IsNullOrEmpty(step.StepName) ? step.StepName : "";
                                    his.DefaultStatus = !string.IsNullOrEmpty(step.DefaultStatus) ? step.DefaultStatus : "";
                                    his.IsSignOff = step.IsSignOff;
                                }

                                var chidHistory = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync<ITWorkflowHistoryViewModel>(x => x.ParentHistoryId == his.Id);
                                if (chidHistory.Any())
                                    his.ReferenceWorkflowHistory = chidHistory.ToList();
                            }
                        }
                    }
                    instanceModel.Add(Mapper.Map<ITWorkflowInstanceViewModelAPI>(instance));
                }
                modelReturn.ReferenceNumber = workflowInstances.ElementAt(0).ItemReferenceNumber;
                modelReturn.ItemId = workflowInstances.ElementAt(0).ItemId;
                modelReturn.WorkflowInstance = instanceModel;
                resultDTO.Object = modelReturn;
            }
            return resultDTO;
        }

        public List<ITWorkflowStepViewModel> GetStepWithCondition(List<ITWorkflowStep> allSteps, string stepConditionStr)
        {
            var vReturn = new List<ITWorkflowStepViewModel>();
            var wfStep = new List<ITWorkflowStep>();
            try
            {
                var allStepCondition = Mapper.Map<List<AttributeItem>>(JsonConvert.DeserializeObject(stepConditionStr));
                if (allStepCondition.Any())
                {
                    var firstStep = allSteps.OrderBy(x => x.StepNumber).FirstOrDefault();
                    wfStep.Add(firstStep);
                    ITWorkflowStep currentStep = null;
                    ITWorkflowStep nextStep = null;
                    var skip = false;
                    while (!skip)
                    {
                        if (currentStep == null) currentStep = firstStep;
                        nextStep = allSteps.GetNextStep(currentStep, allStepCondition);
                        if (nextStep != null)
                        {
                            if (!wfStep.Any(x => x.StepNumber == nextStep.StepNumber))
                            {
                                wfStep.Add(nextStep);
                                currentStep = nextStep;
                            }
                        }
                        else
                            skip = true;
                    }
                    vReturn = Mapper.Map<List<ITWorkflowStepViewModel>>(wfStep);
                } else
                {
                    vReturn = Mapper.Map<List<ITWorkflowStepViewModel>>(allSteps);
                }
            } catch (Exception e)
            {
                vReturn = Mapper.Map<List<ITWorkflowStepViewModel>>(allSteps);
            }
            return vReturn;
        }

        private ITWorkflowData SaveCurrentRoundWorkflowDataStr(ITWorkflowData workflowData, List<AttributeItem> condition)
        {
            ITWorkflowData wfData = new ITWorkflowData() { };
            List<ITWorkflowStep> vReturn = new List<ITWorkflowStep>() { };
            var firstStep = workflowData.Steps.OrderBy(x => x.StepNumber).FirstOrDefault();
            vReturn.Add(firstStep);
            bool skip = false;
            ITWorkflowStep currentStep = null;
            ITWorkflowStep nextStep = null;
            while (!skip)
            {
                if (currentStep == null) currentStep = firstStep;

                nextStep = workflowData.Steps.GetNextStep(currentStep, condition);
                if (nextStep != null)
                {
                    if (!vReturn.Any(x => x.StepNumber == nextStep.StepNumber))
                    {
                        vReturn.Add(nextStep);
                        currentStep = nextStep;
                    }
                }
                else
                {
                    skip = true;
                }
            }

            /*foreach (var step in workflowData.Steps)
            {
                var newNextStep = workflowData.Steps.GetNextStep(step, condition);
                if (newNextStep != null)
                {
                    if (!vReturn.Any(x => x.StepNumber == newNextStep.StepNumber))
                        vReturn.Add(newNextStep);
                }
                if (!vReturn.Any(x => x.StepNumber == step.StepNumber))
                    vReturn.Add(step);
            }*/
            wfData.DefaultCompletedStatus = workflowData.DefaultCompletedStatus;
            wfData.StartWorkflowConditions = workflowData.StartWorkflowConditions;
            wfData.Steps = vReturn.OrderBy(x => x.StepNumber).ToList();
            return wfData;
        }

        public async Task<ResultDTO> GetCurrentTaskPermissionByItemId(Guid ItemId)
        {
            var result = new ResultDTO() { };
            WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn();
            try
            {
                var workflowInstances = await _uow.GetRepository<ITWorkflowInstance>().GetSingleAsync(x => x.ItemId == ItemId, "created desc");
                if (workflowInstances is null)
                {
                    result.ErrorCodes = new List<int>() { -1 };
                    result.Messages = new List<string>() { "Current item is not running !" };
                    goto Finish;
                }

                modelReturn.WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(workflowInstances) };
                var workflowHistories = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync<ITWorkflowHistoryViewModel>(x => ((x.ParentHistoryId.HasValue && x.ParentHistoryId.Value == null) || !x.ParentHistoryId.HasValue) && !x.IsStepCompleted && x.ITInstanceId == workflowInstances.Id && (x.AssignedToDepartmentId.HasValue || x.AssignedToUserId.HasValue), "StepNumber asc");
                if (!(workflowHistories is null) && workflowHistories.Any())
                {
                    foreach(var wfHis in workflowHistories)
                    {
                        var wfHisStep = workflowInstances.WorkflowData.Steps.Where(x => x.StepNumber == wfHis.StepNumber).FirstOrDefault();
                        if (wfHisStep != null)
                            wfHis.IsSignOff = wfHisStep.IsSignOff;

                        var chidWfHistory = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => x.ParentHistoryId != null && x.ParentHistoryId.Value == wfHis.Id);
                        if (chidWfHistory.Any())
                            wfHis.ReferenceWorkflowHistory = Mapper.Map<List<ITWorkflowHistoryViewModel>>(chidWfHistory);
                    }
                    modelReturn.WorkflowInstance[0].ITWorkflowHistories = Mapper.Map<List<ITWorkflowHistoryViewModel>>(workflowHistories);
                    if (workflowInstances.WorkflowData is null)
                    {
                        return new ResultDTO() { Messages = new List<string>() { "Cannot find workflow data !" }, ErrorCodes = new List<int>() { -1 } };
                    }
                    if (workflowInstances.WorkflowData.Steps is null || !workflowInstances.WorkflowData.Steps.Any())
                    {
                        return new ResultDTO() { Messages = new List<string>() { "Cannot find workflow step !" }, ErrorCodes = new List<int>() { -1 } };
                    }
                    // lay step dau tien neu la duyet song song
                    var currentStep = workflowInstances.WorkflowData.Steps.Where(x => x.StepNumber == workflowHistories.FirstOrDefault().StepNumber).FirstOrDefault();
                    if (!(currentStep is null))
                    {
                        modelReturn.RestrictedProperties = currentStep.RestrictedProperties.ToList();
                        modelReturn.CurrentStep = Mapper.Map<ITWorkflowStepViewModel>(currentStep);
                    }    

                    if (!workflowInstances.IsCompleted && !workflowInstances.IsTerminated)
                    {
                        modelReturn.VoteSuccess = !string.IsNullOrEmpty(currentStep.SuccessVote) ? currentStep.SuccessVote : "Approve";
                        modelReturn.VoteFailure = !string.IsNullOrEmpty(currentStep.FailureVote) ? currentStep.FailureVote : "Reject";
                    }
                    else
                    {
                        modelReturn.ReturnToStepNumer = (currentStep != null && currentStep.ReturnToStepNumber.HasValue) ? currentStep.ReturnToStepNumber : null;
                    }

                    modelReturn.ItemId = workflowInstances.ItemId;
                    modelReturn.ReferenceNumber = workflowInstances.ItemReferenceNumber;
                    modelReturn.ItemStatus = workflowInstances.ItemStatus;
                    result.Object = modelReturn;
                } else
                {
                    #region case RTC
                    if (workflowInstances.IsTerminated && workflowInstances.IsCompleted)
                    {
                        var workflowHistoriesRTC = await _uow.GetRepository<ITWorkflowHistory>().GetSingleAsync<ITWorkflowHistoryViewModel>(x => x.ITInstanceId == workflowInstances.Id && (x.AssignedToDepartmentId.HasValue || x.AssignedToUserId.HasValue), "StepNumber desc");
                        if (workflowHistoriesRTC != null)
                        {
                            var wfHisStep = workflowInstances.WorkflowData.Steps.Where(x => x.StepNumber == workflowHistoriesRTC.StepNumber).FirstOrDefault();
                            if (wfHisStep != null)
                                workflowHistoriesRTC.IsSignOff = wfHisStep.IsSignOff;

                            modelReturn.WorkflowInstance[0].ITWorkflowHistories = new List<ITWorkflowHistoryViewModel>() { workflowHistoriesRTC };
                            if (workflowInstances.WorkflowData is null)
                            {
                                return new ResultDTO() { Messages = new List<string>() { "Cannot find workflow data !" }, ErrorCodes = new List<int>() { -1 } };
                            }
                            if (workflowInstances.WorkflowData.Steps is null || !workflowInstances.WorkflowData.Steps.Any())
                            {
                                return new ResultDTO() { Messages = new List<string>() { "Cannot find workflow step !" }, ErrorCodes = new List<int>() { -1 } };
                            }
                            // lay step dau tien neu la duyet song song
                            var findStep = (workflowHistoriesRTC.IsParallelApprove.HasValue && workflowHistoriesRTC.IsParallelApprove.Value && workflowHistoriesRTC.ParallelStep.HasValue) ? workflowHistoriesRTC.ParallelStep.Value : workflowHistoriesRTC.StepNumber;
                            var currentStep = workflowInstances.WorkflowData.Steps.Where(x => x.StepNumber == findStep).FirstOrDefault();
                            if (!(currentStep is null))
                            {
                                modelReturn.RestrictedProperties = currentStep.RestrictedProperties.ToList();
                                modelReturn.CurrentStep = Mapper.Map<ITWorkflowStepViewModel>(currentStep);
                            }

                            if (!workflowInstances.IsCompleted && !workflowInstances.IsTerminated)
                            {
                                modelReturn.VoteSuccess = !string.IsNullOrEmpty(currentStep.SuccessVote) ? currentStep.SuccessVote : "Approve";
                                modelReturn.VoteFailure = !string.IsNullOrEmpty(currentStep.FailureVote) ? currentStep.FailureVote : "Reject";
                            }
                            else
                            {
                                modelReturn.ReturnToStepNumer = (currentStep != null && currentStep.ReturnToStepNumber.HasValue) ? currentStep.ReturnToStepNumber : null;
                            }

                            modelReturn.ItemId = workflowInstances.ItemId;
                            modelReturn.ReferenceNumber = workflowInstances.ItemReferenceNumber;
                            modelReturn.ItemStatus = workflowInstances.ItemStatus;
                            result.Object = modelReturn;
                        }
                    }
                    #endregion
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                result.ErrorCodes = new List<int>() { -1 };
                result.Messages = new List<string>() { "Error: " + ex.Message };
            }
            Finish:
            return result;
        }

        public async Task<ResultDTO> GetDepartmentByLoginName(string loginName)
        {
            try
            {
                var resultDto = new ResultDTO() { };
                if (string.IsNullOrEmpty(loginName))
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Login name is required !" };
                    goto Finish;
                }

                var currentDepartment = await _uow.GetRepository<UserDepartmentMapping>().FindByAsync<UserDepartmentMappingViewModelAPIReturn>(x => x.DepartmentId != null && x.Department != null && !x.Department.IsDeleted && x.UserId != null 
                && x.User != null && x.User.LoginName.ToLower().Equals(loginName.ToLower()) && x.User.IsActivated && !x.User.IsDeleted);

                if (currentDepartment.Any())
                {
                    var deptIsHeadCount = currentDepartment.Where(x => x.IsHeadCount).FirstOrDefault();
                    if (deptIsHeadCount != null)
                    {
                        var allDepartment = currentDepartment.Where(x => x.DepartmentId.HasValue && deptIsHeadCount.Id != x.Id).ToList();
                        List<Guid> viewRequestReturn = new List<Guid>();
                        var currentDept = _uow.GetRepository<Department>().GetSingle(x => x.Id == deptIsHeadCount.DepartmentId);
                        deptIsHeadCount.DepartmentParentIsFinanceId = FindDepartmentIsParentId(currentDept);
                        #region Find CostCenter
                        deptIsHeadCount.CostCenterMappings = this.FindDepartmentCostcenterMappings(currentDept);
                        #endregion
                        #region Find CostCenter
                        deptIsHeadCount.DeptLine = this.FindDeptLine(currentDept);
                        #endregion

                        if (currentDept.PositionName != null && currentDept.PositionName.ToLower().Contains("assistant"))
                        {
                            deptIsHeadCount.IsAssistant = true;
                        }
                        else
                        {
                            deptIsHeadCount.IsAssistant = false;
                        }

                        List<Guid> DepartmentLessThanG5Id = new List<Guid>();
                        if (deptIsHeadCount.DeptLine != null)
                        {
                            var DepartmentDepLine = _uow.GetRepository<Department>().GetSingle(x => x.Id == deptIsHeadCount.DeptLine.Id);
                            await this.FindChildFromDept(DepartmentDepLine, DepartmentLessThanG5Id);
                            deptIsHeadCount.DepartmentLessThanG5 = DepartmentLessThanG5Id;
                        }


                        List<DepartmentEdoc1ViewModel> mappingEdoc1Ids = new List<DepartmentEdoc1ViewModel>();
                        // rule Set rule đệ quy cho 2 nút chọn "View Request of Department", ﻿"View All Request"
                        if (!string.IsNullOrEmpty(deptIsHeadCount.ViewRequestOfDepartmentStr))
                        {
                            try
                            {
                                List<Guid> allViewOfRequestDepartment = new List<Guid>();
                                var convertDept = JsonConvert.DeserializeObject<List<WorkingTimeRecruimentViewModel>>(deptIsHeadCount.ViewRequestOfDepartmentStr);
                                if (convertDept != null && convertDept.Any())
                                {
                                    allViewOfRequestDepartment.AddRange(convertDept.Select(x => x.Id).ToList());
                                    foreach (var cvd in convertDept)
                                    {
                                        var dept = await _uow.GetRepository<Department>().GetSingleAsync(x => x.Id == cvd.Id);
                                        if (dept != null)
                                        {
                                            await this.FindChildEqG2(dept, allViewOfRequestDepartment);
                                        }
                                    }
                                    deptIsHeadCount.ViewRequestOfDepartment = allViewOfRequestDepartment;
                                }
                                var mappingDepartment = await _uow.GetRepository<DepartmentMapping>().FindByAsync(x => deptIsHeadCount.ViewRequestOfDepartment.Contains(x.DepartmentEdoc2Id));
                                if (mappingDepartment != null)
                                {
                                    foreach (var item in mappingDepartment)
                                    {
                                        DepartmentEdoc1ViewModel model = new DepartmentEdoc1ViewModel()
                                        {
                                            Id = item.DepartmentEdoc1Id,
                                            Code = string.IsNullOrEmpty(item.DepartmentEdoc1Code) ? "" : item.DepartmentEdoc1Code,
                                            Name = string.IsNullOrEmpty(item.DepartmentEdoc1Name) ? "" : item.DepartmentEdoc1Name,
                                            Number = item.DepartmentEdoc1Number != null && item.DepartmentEdoc1Number.HasValue ? item.DepartmentEdoc1Number.Value : item.DepartmentEdoc1Number,
                                        };
                                        mappingEdoc1Ids.Add(model);
                                    }
                                }
                            } catch (Exception e) {}
                        }

                        if (currentDept.JobGrade != null)
                        {
                            if (currentDept != null)
                                viewRequestReturn.Add(currentDept.Id);

                            var g5 = this.FindG5(currentDept);
                            if (g5 != null)
                            {
                                viewRequestReturn.Add(g5.Id);
                                await this.FindChildEqG2(g5, viewRequestReturn);
                            }
                            /*if (currentDept.JobGrade.Grade == 2)
                            {
                                FindParentLessThanG5(currentDept, viewRequestReturn);
                            }
                            else if (currentDept.JobGrade.Grade == 3)
                            {
                                FindParentLessThanG5(currentDept, viewRequestReturn);
                                await FindChildEndG2(currentDept, viewRequestReturn);
                            }
                            else if (currentDept.JobGrade.Grade == 4)
                            {
                                FindParentLessThanG5(currentDept, viewRequestReturn);
                                await FindChildEndG2(currentDept, viewRequestReturn);
                            }
                            else if (currentDept.JobGrade.Grade == 5)
                            {
                                await FindChildEndG2(currentDept, viewRequestReturn);
                            }*/
                        }
                        deptIsHeadCount.DefaultRuleViewRequestOfDepartment = viewRequestReturn;

                        if (deptIsHeadCount.DefaultRuleViewRequestOfDepartment != null && deptIsHeadCount.DefaultRuleViewRequestOfDepartment.Any())
                        {
                            var mappingDepartment = await _uow.GetRepository<DepartmentMapping>().FindByAsync(x => deptIsHeadCount.DefaultRuleViewRequestOfDepartment.Contains(x.DepartmentEdoc2Id));
                            if (mappingDepartment != null)
                            {
                                foreach(var item in mappingDepartment)
                                {
                                    DepartmentEdoc1ViewModel model = new DepartmentEdoc1ViewModel()
                                    {
                                        Id = item.DepartmentEdoc1Id,
                                        Code = string.IsNullOrEmpty(item.DepartmentEdoc1Code) ? "" : item.DepartmentEdoc1Code,
                                        Name = string.IsNullOrEmpty(item.DepartmentEdoc1Name) ? "" : item.DepartmentEdoc1Name,
                                        Number = item.DepartmentEdoc1Number != null && item.DepartmentEdoc1Number.HasValue ? item.DepartmentEdoc1Number.Value : item.DepartmentEdoc1Number,
                                    };
                                    mappingEdoc1Ids.Add(model);
                                }
                            }
                        }
                        deptIsHeadCount.MappingEdoc1Models = mappingEdoc1Ids;
                        /*deptIsHeadCount.IsCanViewAllRequest = IsCanViewAllRequest(currentDept);*/
                        if (deptIsHeadCount.IsCanViewAllRequest != null && deptIsHeadCount.IsCanViewAllRequest.HasValue && deptIsHeadCount.IsCanViewAllRequest.Value)
                        {
                            deptIsHeadCount.IsCanViewAllRequest = (deptIsHeadCount.Group.HasValue && deptIsHeadCount.Group.Value == Group.Member) ? true : false;
                        }
                        await this.ApplyRuleViewOfRequestFromParent(currentDept, deptIsHeadCount.ViewRequestOfDepartmentFromParent);

                        var modulePermissionEdoc1 = await _uow.GetRepository<ITUserRoleMapping>().FindByAsync(x => x.ITUserId == deptIsHeadCount.UserId && !x.IsDeleted);
                        if (modulePermissionEdoc1 != null)
                        {
                            deptIsHeadCount.RoleEdoc1 = modulePermissionEdoc1.Select(x => new RolePermissionModel() { Code = x.ModulePermission.Code, Name = x.ModulePermission.Name }).ToList();
                        }

                        allDepartment.Add(deptIsHeadCount);
                        allDepartment.Reverse();

                        foreach (var item in allDepartment)
                        {
                            var groupEdoc = await _uow.GetRepository<ITModuleDepartmentGroupMapping>().FindByAsync(x => x.ITUserDepartmentMappingId.HasValue && x.ITUserDepartmentMappingId.Value == item.Id && !x.IsDeleted);
                            if (groupEdoc != null)
                                item.GroupEdoc = groupEdoc.Select(x => new RolePermissionModel() { Code = x.ModuleDepartmentGroup.GroupCode.ToString(), Name = x.ModuleDepartmentGroup.GroupName }).ToList();
                        }

                        currentDepartment = allDepartment;
                    } else
                    {
                        foreach(var item in currentDepartment)
                        {
                            var currentDept = _uow.GetRepository<Department>().GetSingle(x => x.Id == item.DepartmentId);
                            if (currentDept != null)
                            {
                                item.DepartmentParentIsFinanceId = FindDepartmentIsParentId(currentDept);
                            }
                        }
                    }
                    resultDto.Object = currentDepartment;
                }
                else
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "User is not exists !" };
                    goto Finish;
                }
                Finish:
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message }, ErrorCodes = new List<int>() { -1 } };
            }
        }
        public async Task<ResultDTO> GetDepartmentByUserId(Guid userid)
        {
            try
            {
                var resultDto = new ResultDTO() { };
                if (userid == null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "User id is required !" };
                    goto Finish;
                }

                var currentDepartment = await _uow.GetRepository<UserDepartmentMapping>().FindByAsync<UserDepartmentMappingViewModelAPIReturn>(x => x.DepartmentId != null && x.Department != null && !x.Department.IsDeleted && x.UserId != null
                && x.User != null && x.User.Id.Equals(userid) && x.User.IsActivated && !x.User.IsDeleted);

                if (currentDepartment.Any())
                {
                    var deptIsHeadCount = currentDepartment.Where(x => x.IsHeadCount).FirstOrDefault();
                    if (deptIsHeadCount != null)
                    {
                        var allDepartment = currentDepartment.Where(x => x.DepartmentId.HasValue && deptIsHeadCount.Id != x.Id).ToList();
                        List<Guid> viewRequestReturn = new List<Guid>();
                        var currentDept = _uow.GetRepository<Department>().GetSingle(x => x.Id == deptIsHeadCount.DepartmentId);
                        deptIsHeadCount.DepartmentParentIsFinanceId = FindDepartmentIsParentId(currentDept);
                        #region Find CostCenter
                        deptIsHeadCount.CostCenterMappings = this.FindDepartmentCostcenterMappings(currentDept);
                        #endregion
                        #region Find CostCenter
                        deptIsHeadCount.DeptLine = this.FindDeptLine(currentDept);
                        #endregion

                        if (currentDept.PositionName != null && currentDept.PositionName.ToLower().Contains("assistant"))
                        {
                            deptIsHeadCount.IsAssistant = true;
                        }
                        else
                        {
                            deptIsHeadCount.IsAssistant = false;
                        }

                        List<Guid> DepartmentLessThanG5Id = new List<Guid>();
                        if (deptIsHeadCount.DeptLine != null)
                        {
                            var DepartmentDepLine = _uow.GetRepository<Department>().GetSingle(x => x.Id == deptIsHeadCount.DeptLine.Id);
                            await this.FindChildFromDept(DepartmentDepLine, DepartmentLessThanG5Id);
                            deptIsHeadCount.DepartmentLessThanG5 = DepartmentLessThanG5Id;
                        }

                        List<DepartmentEdoc1ViewModel> mappingEdoc1Ids = new List<DepartmentEdoc1ViewModel>();
                        // rule Set rule đệ quy cho 2 nút chọn "View Request of Department", ﻿"View All Request"
                        if (!string.IsNullOrEmpty(deptIsHeadCount.ViewRequestOfDepartmentStr))
                        {
                            try
                            {
                                List<Guid> allViewOfRequestDepartment = new List<Guid>();
                                var convertDept = JsonConvert.DeserializeObject<List<WorkingTimeRecruimentViewModel>>(deptIsHeadCount.ViewRequestOfDepartmentStr);
                                if (convertDept != null && convertDept.Any())
                                {
                                    allViewOfRequestDepartment.AddRange(convertDept.Select(x => x.Id).ToList());
                                    foreach (var cvd in convertDept)
                                    {
                                        var dept = await _uow.GetRepository<Department>().GetSingleAsync(x => x.Id == cvd.Id);
                                        if (dept != null)
                                        {
                                            await this.FindChildEqG2(dept, allViewOfRequestDepartment);
                                        }
                                    }
                                    deptIsHeadCount.ViewRequestOfDepartment = allViewOfRequestDepartment;
                                }
                                var mappingDepartment = await _uow.GetRepository<DepartmentMapping>().FindByAsync(x => deptIsHeadCount.ViewRequestOfDepartment.Contains(x.DepartmentEdoc2Id));
                                if (mappingDepartment != null)
                                {
                                    foreach (var item in mappingDepartment)
                                    {
                                        DepartmentEdoc1ViewModel model = new DepartmentEdoc1ViewModel()
                                        {
                                            Id = item.DepartmentEdoc1Id,
                                            Code = string.IsNullOrEmpty(item.DepartmentEdoc1Code) ? "" : item.DepartmentEdoc1Code,
                                            Name = string.IsNullOrEmpty(item.DepartmentEdoc1Name) ? "" : item.DepartmentEdoc1Name,
                                            Number = item.DepartmentEdoc1Number != null && item.DepartmentEdoc1Number.HasValue ? item.DepartmentEdoc1Number.Value : item.DepartmentEdoc1Number,
                                        };
                                        mappingEdoc1Ids.Add(model);
                                    }
                                }
                            }
                            catch (Exception e) { }
                        }

                        if (currentDept.JobGrade != null)
                        {
                            if (currentDept != null)
                                viewRequestReturn.Add(currentDept.Id);

                            var g5 = this.FindG5(currentDept);
                            if (g5 != null)
                            {
                                viewRequestReturn.Add(g5.Id);
                                await this.FindChildEqG2(g5, viewRequestReturn);
                            }
                            /*if (currentDept.JobGrade.Grade == 2)
                            {
                                FindParentLessThanG5(currentDept, viewRequestReturn);
                            }
                            else if (currentDept.JobGrade.Grade == 3)
                            {
                                FindParentLessThanG5(currentDept, viewRequestReturn);
                                await FindChildEndG2(currentDept, viewRequestReturn);
                            }
                            else if (currentDept.JobGrade.Grade == 4)
                            {
                                FindParentLessThanG5(currentDept, viewRequestReturn);
                                await FindChildEndG2(currentDept, viewRequestReturn);
                            }
                            else if (currentDept.JobGrade.Grade == 5)
                            {
                                await FindChildEndG2(currentDept, viewRequestReturn);
                            }*/
                        }
                        deptIsHeadCount.DefaultRuleViewRequestOfDepartment = viewRequestReturn;

                        if (deptIsHeadCount.DefaultRuleViewRequestOfDepartment != null && deptIsHeadCount.DefaultRuleViewRequestOfDepartment.Any())
                        {
                            var mappingDepartment = await _uow.GetRepository<DepartmentMapping>().FindByAsync(x => deptIsHeadCount.DefaultRuleViewRequestOfDepartment.Contains(x.DepartmentEdoc2Id));
                            if (mappingDepartment != null)
                            {
                                foreach (var item in mappingDepartment)
                                {
                                    DepartmentEdoc1ViewModel model = new DepartmentEdoc1ViewModel()
                                    {
                                        Id = item.DepartmentEdoc1Id,
                                        Code = string.IsNullOrEmpty(item.DepartmentEdoc1Code) ? "" : item.DepartmentEdoc1Code,
                                        Name = string.IsNullOrEmpty(item.DepartmentEdoc1Name) ? "" : item.DepartmentEdoc1Name,
                                        Number = item.DepartmentEdoc1Number != null && item.DepartmentEdoc1Number.HasValue ? item.DepartmentEdoc1Number.Value : item.DepartmentEdoc1Number,
                                    };
                                    mappingEdoc1Ids.Add(model);
                                }
                            }
                        }
                        deptIsHeadCount.MappingEdoc1Models = mappingEdoc1Ids;
                        /*deptIsHeadCount.IsCanViewAllRequest = IsCanViewAllRequest(currentDept);*/
                        if (deptIsHeadCount.IsCanViewAllRequest != null && deptIsHeadCount.IsCanViewAllRequest.HasValue && deptIsHeadCount.IsCanViewAllRequest.Value)
                        {
                            deptIsHeadCount.IsCanViewAllRequest = (deptIsHeadCount.Group.HasValue && deptIsHeadCount.Group.Value == Group.Member) ? true : false;
                        }
                        await this.ApplyRuleViewOfRequestFromParent(currentDept, deptIsHeadCount.ViewRequestOfDepartmentFromParent);

                        var modulePermissionEdoc1 = await _uow.GetRepository<ITUserRoleMapping>().FindByAsync(x => x.ITUserId == deptIsHeadCount.UserId && !x.IsDeleted);
                        if (modulePermissionEdoc1 != null)
                        {
                            deptIsHeadCount.RoleEdoc1 = modulePermissionEdoc1.Select(x => new RolePermissionModel() { Code = x.ModulePermission.Code, Name = x.ModulePermission.Name }).ToList();
                        }

                        allDepartment.Add(deptIsHeadCount);
                        allDepartment.Reverse();
                        currentDepartment = allDepartment;
                    }
                    else
                    {
                        foreach (var item in currentDepartment)
                        {
                            var currentDept = _uow.GetRepository<Department>().GetSingle(x => x.Id == item.DepartmentId);
                            if (currentDept != null)
                                item.DepartmentParentIsFinanceId = FindDepartmentIsParentId(currentDept);
                        }
                    }
                    resultDto.Object = currentDepartment;
                }
                else
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "User is not exists !" };
                    goto Finish;
                }
            Finish:
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message }, ErrorCodes = new List<int>() { -1 } };
            }
        }

        public async Task<ResultDTO> GetUserIsMD(string loginName, string code)
        {
            try
            {
                var resultDto = new ResultDTO() { };

                if (string.IsNullOrEmpty(loginName))
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Login name is required !" };
                    goto Finish;
                }

                var currentDepartment = await _uow.GetRepository<UserDepartmentMapping>().FindByAsync<UserDepartmentMappingViewModelAPIReturn>(x => x.DepartmentId != null && x.Department != null && !x.Department.IsDeleted && x.UserId != null
                && x.User != null && x.User.LoginName.ToLower().Equals(loginName.ToLower()) && x.User.IsActivated && !x.User.IsDeleted);

                if (currentDepartment.Any())
                {
                    var deptIsHeadCount = currentDepartment.Where(x => x.IsHeadCount).FirstOrDefault();
                    if (deptIsHeadCount != null)
                    {
                        List<Guid> viewRequestReturn = new List<Guid>();
                        var currentDept = _uow.GetRepository<Department>().GetSingle(x => x.Id == deptIsHeadCount.DepartmentId);
                        deptIsHeadCount.DeptLine = this.FindDeptLine(currentDept);
                        var DepartmentDepLine = _uow.GetRepository<Department>().GetSingle(x => x.Id == deptIsHeadCount.DeptLine.Id);
                        List<Guid> allViewOfRequestDepartment = new List<Guid>();

                        if (DepartmentDepLine != null)
                        {
                            allViewOfRequestDepartment.Add(DepartmentDepLine.Id);
                            await this.FindChildFromDept(DepartmentDepLine, allViewOfRequestDepartment);
                        }


                        if (allViewOfRequestDepartment.Any())
                        {
                            List<Guid> departmentIds = new List<Guid>();
                            
                            if (!string.IsNullOrEmpty(code) && code.ToLower().Equals("liquorlicense"))
                            {
                                var liquorDept = await _uow.GetRepository<Department>().FindByAsync(x => allViewOfRequestDepartment.Contains(x.Id) && x.ITDepartment.IsLiquorLicense == true);
                                departmentIds = liquorDept.Select(d => d.Id).ToList();

                            }
                            else if (!string.IsNullOrEmpty(code) && code.ToLower().Equals("tradecontract"))
                            {
                                var tradeDept = await _uow.GetRepository<Department>().FindByAsync(x => allViewOfRequestDepartment.Contains(x.Id) && x.ITDepartment.IsTradeContract == true);
                                departmentIds = tradeDept.Select(d => d.Id).ToList();
                            }

                            if (departmentIds.Any())
                            {
                                var lstUserMappingisMD = new List<UserListViewModel>();
                                var lstUser = await _uow.GetRepository<UserDepartmentMapping>().FindByAsync(x => x.DepartmentId.HasValue && x.UserId.HasValue && departmentIds.Contains((Guid)x.DepartmentId));
                                foreach (var userinDept in lstUser)
                                {
                                    if (userinDept.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any())
                                    {
                                        foreach (var userITDeptNotDelete in userinDept.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings)
                                        {
                                            if (userITDeptNotDelete.IsDeleted == false
                                                && (userITDeptNotDelete.ModuleDepartmentGroup.GroupCode == 10002 || userITDeptNotDelete.ModuleDepartmentGroup.GroupCode == 10001))
                                            {
                                                var user =  _uow.GetRepository<User>().GetSingle<UserListViewModel>(x => x.Id == userinDept.User.Id && x.IsActivated);
                                                user.moduleDepartment = userITDeptNotDelete.ModuleDepartmentGroup.GroupName;
                                                lstUserMappingisMD.Add(user);
                                            }
                                        }
                                    }
                                }

                                if (lstUserMappingisMD.Any())
                                {
                                    resultDto.Object = lstUserMappingisMD;
                                }
                            }
                        }
                    }
                    
                }
                else
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "User is not exists !" };
                    goto Finish;
                }
            Finish:
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message }, ErrorCodes = new List<int>() { -1 } };
            }
        }


        public async Task<ResultDTO> GetUserByParticipant(string code, string Module)
        {
            try
            {
                var resultDto = new ResultDTO() { };
                List<Guid> departmentIds = new List<Guid>();
                if (!string.IsNullOrEmpty(Module) && Module.ToLower().Equals("liquorlicense"))
                {
                    var currentDepartment = await _uow.GetRepository<Department>().FindByAsync(x => !x.IsDeleted && x.ITDepartment.IsLiquorLicense == true);
                    var depts = Mapper.Map<List<ItemListDepartmentViewModel>>(currentDepartment).Where(x => x.ParticipantType != null && x.ParticipantType.Any(y => y.Code.Trim().ToLower() == code.Trim().ToLower())).ToList();
                    departmentIds = depts.Select(d => d.Id).ToList();
                }
                else if (!string.IsNullOrEmpty(Module) && Module.ToLower().Equals("tradecontract"))
                {
                    var currentDepartment = await _uow.GetRepository<Department>().FindByAsync(x => !x.IsDeleted && x.ITDepartment.IsTradeContract == true);
                    var depts = Mapper.Map<List<ItemListDepartmentViewModel>>(currentDepartment).Where(x => x.ParticipantType != null && x.ParticipantType.Any(y => y.Code.Trim().ToLower() == code.Trim().ToLower())).ToList();
                    departmentIds = depts.Select(d => d.Id).ToList();
                }
                else
                {
                    var currentDepartment = await _uow.GetRepository<Department>().FindByAsync(x => !x.IsDeleted);
                    var depts = Mapper.Map<List<ItemListDepartmentViewModel>>(currentDepartment).Where(x => x.ParticipantType != null && x.ParticipantType.Any(y => y.Code.Trim().ToLower() == code.Trim().ToLower())).ToList();
                    departmentIds = depts.Select(d => d.Id).ToList();
                }

                if (departmentIds.Any())
                {
                    var lstUserMapping = new List<UserListViewModel>();
                    var lstUser = await _uow.GetRepository<UserDepartmentMapping>().FindByAsync(x => x.DepartmentId.HasValue && x.UserId.HasValue && departmentIds.Contains((Guid)x.DepartmentId));
                    foreach (var userinDept in lstUser)
                    {
                        var user = _uow.GetRepository<User>().GetSingle<UserListViewModel>(x => x.Id == userinDept.User.Id && x.IsActivated);
                        lstUserMapping.Add(user);           
                    }

                    if (lstUserMapping.Any())
                    {
                        resultDto.Object = lstUserMapping;
                    }
                }
                else
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "User is not exists !" };
                    goto Finish;
                }
            Finish:
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message }, ErrorCodes = new List<int>() { -1 } };
            }
        }

        public async Task ApplyRuleViewOfRequestFromParent(Department department, List<Guid> ids)
        {
            if (department != null && department.Parent != null && department.ParentId != null && department.ParentId.HasValue)
            {
                var parentDept = await _uow.GetRepository<Department>().GetSingleAsync(x => x.Id == department.ParentId.Value);
                if (parentDept != null && parentDept.ITDepartment != null)
                {
                    if (parentDept.ITDepartment.ViewRequestOfDepartment != null && !string.IsNullOrEmpty(parentDept.ITDepartment.ViewRequestOfDepartment))
                    {
                        var viewOfRequest = JsonConvert.DeserializeObject<List<WorkingTimeRecruimentViewModel>>(parentDept.ITDepartment.ViewRequestOfDepartment);
                        if (viewOfRequest != null && viewOfRequest.Any())
                        {
                            foreach(var dept in viewOfRequest)
                            {
                                var currentDept = await _uow.GetRepository<Department>().GetSingleAsync(x => x.Id == dept.Id);
                                if (currentDept != null)
                                {
                                    ids.Add(currentDept.Id);
                                    await FindChildEqG2(currentDept, ids);
                                }
                            }
                        }    
                    }
                    if (parentDept.Parent != null && parentDept.Parent.JobGrade != null && parentDept.Parent.JobGrade.Grade <= 5)
                        await ApplyRuleViewOfRequestFromParent(parentDept, ids);
                }
            }
        }
        public bool IsCanViewAllRequest(Department department)
        {
            bool returnValue = false;
            if (department != null)
            {
                if (department.ITDepartment != null && department.ITDepartment.IsCanViewAllRequest != null && department.ITDepartment.IsCanViewAllRequest.HasValue && department.ITDepartment.IsCanViewAllRequest.Value) 
                {
                    returnValue = true;
                } else
                {
                    if (department.Parent != null && department.Parent.JobGrade != null && department.Parent.JobGrade.Grade <= 5)
                        returnValue = IsCanViewAllRequest(department.Parent);
                }
            }
            return returnValue;
        }


        public Department FindG5(Department department)
        {
            Department returnDepartment = null;
            bool isSkip = false;
            var currentDepartment = department;
            while (!isSkip)
            {
                if (currentDepartment.JobGrade != null && currentDepartment.JobGrade.Grade == 5)
                {
                    returnDepartment = currentDepartment;
                    isSkip = true;
                } else if (currentDepartment.Parent != null && currentDepartment.Parent.JobGrade.Grade > 5)
                {
                    returnDepartment = currentDepartment.Parent;
                    isSkip = true;
                }
                else
                {
                    currentDepartment = _uow.GetRepository<Department>().GetSingle(x => x.Id == currentDepartment.ParentId);
                    if (currentDepartment != null)
                    {
                        if (currentDepartment.JobGrade != null && currentDepartment.JobGrade.Grade == 5)
                        {
                            returnDepartment = currentDepartment;
                            isSkip = true;
                        }
                        else if (currentDepartment.Parent != null && currentDepartment.Parent.JobGrade.Grade > 5)
                        {
                            returnDepartment = currentDepartment.Parent;
                            isSkip = true;
                        }
                        else
                        {
                            currentDepartment = currentDepartment.Parent;
                        }
                    } else
                    {
                        isSkip = true;
                    }
                }
            }
            return returnDepartment;
        }

        public Department FindHOD(Department department)
        {
            Department returnDepartment = null;
            bool isSkip = false;
            var currentDepartment = department;
            while (!isSkip)
            {
                if (currentDepartment.JobGrade != null && currentDepartment.JobGrade.Grade >= 5)
                {
                    var userHeadCount = currentDepartment.UserDepartmentMappings.Where(x => x.IsHeadCount).FirstOrDefault();
                    if (userHeadCount != null)
                    {
                        returnDepartment = currentDepartment;
                        isSkip = true;
                    }
                    else
                    {
                        currentDepartment = currentDepartment.Parent;
                    }
                }
                else if (currentDepartment.Parent != null && currentDepartment.Parent.JobGrade.Grade > 5)
                {
                    var userHeadCount = currentDepartment.Parent.UserDepartmentMappings.Where(x => x.IsHeadCount).FirstOrDefault();
                    if (userHeadCount != null)
                    {
                        returnDepartment = currentDepartment.Parent;
                        isSkip = true;
                    }
                    else
                    {
                        currentDepartment = currentDepartment.Parent;
                    }

                }
                else
                {
                    currentDepartment = _uow.GetRepository<Department>().GetSingle(x => x.Id == currentDepartment.ParentId);
                    if (currentDepartment != null)
                    {
                        if (currentDepartment.JobGrade != null && currentDepartment.JobGrade.Grade >= 5)
                        {
                            var userHeadCount = currentDepartment.UserDepartmentMappings.Where(x => x.IsHeadCount).FirstOrDefault();
                            if (userHeadCount != null)
                            {
                                returnDepartment = currentDepartment;
                                isSkip = true;
                            }
                            else
                            {
                                currentDepartment = currentDepartment.Parent;
                            }
                        }
                        else if (currentDepartment.Parent != null && currentDepartment.Parent.JobGrade.Grade > 5)
                        {
                            var userHeadCount = currentDepartment.Parent.UserDepartmentMappings.Where(x => x.IsHeadCount).FirstOrDefault();
                            if (userHeadCount != null)
                            {
                                returnDepartment = currentDepartment.Parent;
                                isSkip = true;
                            }
                            else
                            {
                                currentDepartment = currentDepartment.Parent;
                            }
                        }
                        else
                        {
                            currentDepartment = currentDepartment.Parent;
                        }
                    }
                    else
                    {
                        isSkip = true;
                    }
                }
            }
            return returnDepartment;
        }

        public async Task FindChildEqG2(Department department, List<Guid> ids)
        {

            if (department != null)
            {
                var allChildDepartment = await _uow.GetRepository<Department>().FindByAsync(x => x.ParentId.HasValue && x.ParentId.Value == department.Id);
                if (allChildDepartment.Any())
                {
                    ids.AddRange(allChildDepartment.Select(x => x.Id).ToList());
                    foreach (var child in allChildDepartment)
                    {
                        if (child.JobGrade != null && child.JobGrade.Grade >= 2)
                        {
                            await FindChildEqG2(child, ids);
                        }
                    }   
                }
            }
        }

        public async Task FindChildFromDept(Department department, List<Guid> ids)
        {

            if (department != null)
            {
                var allChildDepartment = await _uow.GetRepository<Department>().FindByAsync(x => x.ParentId.HasValue && x.ParentId.Value == department.Id);
                if (allChildDepartment.Any())
                {
                    ids.AddRange(allChildDepartment.Select(x => x.Id).ToList());
                    foreach (var child in allChildDepartment)
                    {
                        if (child.JobGrade != null && child.JobGrade.Grade <= 5)
                        {
                            await FindChildFromDept(child, ids);
                        }
                    }
                }
            }
        }

        public void FindParentLessThanG5(Department department, List<Guid> ids)
        {
            if (department.Parent != null)
            {
                if (department.Parent.JobGrade != null)
                {
                    if (department.Parent.JobGrade.Grade <= 5)
                    {
                        ids.Add(department.ParentId.Value);
                        FindParentLessThanG5(department.Parent, ids);
                    }    
                }
            }
        }
        public List<DepartmentCostcenterMappingViewModel> FindDepartmentCostcenterMappings(Department department)
        {
            List<DepartmentCostcenterMappingViewModel> vReturn = new List<DepartmentCostcenterMappingViewModel>();
            if (department != null)
            {
                if (department.ITDepartment != null)
                {
                    if (department.ITDepartment.DepartmentCostcenterMappings != null && department.ITDepartment.DepartmentCostcenterMappings.Any(x => !x.IsDeleted))
                    {
                        vReturn = Mapper.Map<List<DepartmentCostcenterMappingViewModel>>(department.ITDepartment.DepartmentCostcenterMappings.Where(x => !x.IsDeleted));
                    }
                    else
                    {
                        vReturn = FindDepartmentCostcenterMappings(department.Parent);
                    }
                }
            }
            return vReturn;
        }

        public Guid? FindDepartmentIsParentId(Department department)
        {
            Guid? vReturnId = Guid.Empty;
            if (department != null)
            {
                if (department.ITDepartment != null)
                {
                    if (department.ITDepartment.IsEdoc1 != null && department.ITDepartment.IsEdoc1.HasValue && department.ITDepartment.IsEdoc1.Value)
                    {
                        vReturnId = department.Id;
                    } else
                    {
                        vReturnId = FindDepartmentIsParentId(department.Parent);
                    }
                }
            }
            return vReturnId;
        }

        public DepartmentProperties FindDeptLine(Department department)
        {
            DepartmentProperties properties = new DepartmentProperties() { };
            if (department != null)
            {
                if (department != null)
                {
                    if (department.JobGrade != null && department.JobGrade.Grade > 4)
                    {
                        properties = new DepartmentProperties() {
                            Id = department.Id,
                            Code = department.Code,
                            Name = department.Name,
                            LineOrgChart = department.ITDepartment != null ? department.ITDepartment.LineOrgChart : null,
                            IsEcommerce = department.ITDepartment != null ? department.ITDepartment.IsEcommerce : null,
                            IsPerishable = department.ITDepartment != null ? department.ITDepartment.IsPerishable : null,
                            IsNonRDC = department.ITDepartment != null ? department.ITDepartment.IsNonRDC : null,
                            IsCanCreateRequest = department.ITDepartment != null ? department.ITDepartment.IsCanCreateRequest : null,
                            IsSupplierManagement = department.ITDepartment != null ? department.ITDepartment.IsSupplierManagement : null,
                            IsManufacturing = department.ITDepartment != null ? department.ITDepartment.IsManufacturing : null
                        };
                    }
                    else
                    {
                        properties = FindDeptLine(department.Parent);
                    }
                }
            }
            return properties;
        }


        public async Task FindChildEndG2(Department department, List<Guid> ids)
        {
            if (department != null)
            {
                var dept =  await _uow.GetRepository<Department>().FindByAsync(x => x.ParentId == department.Id);
                if (dept != null)
                {
                    foreach(var item in dept)
                    {
                        if (item.JobGrade.Grade >= 2)
                        {
                            ids.Add(item.Id);
                            await FindChildEndG2(item, ids);
                        }
                    }
                }
            }
        }

        public async Task<ResultDTO> GetTasksByLoginName(QueryTasksArgs args)
        {
            try
            {
                var resultDto = new ResultDTO() { Object = new List<ITWorkflowTask> ()};
                if (string.IsNullOrEmpty(args.LoginName))
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Login name is required !" };
                    goto Finish;
                }

                var currentUser = await _uow.GetRepository<User>(true).GetSingleAsync(x => x.LoginName.ToLower().Equals(args.LoginName) && x.IsActivated && !x.IsDeleted);
                if (currentUser is null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Currenr user is not exists !" };
                    goto Finish;
                }
                await GetTasks(true, resultDto, currentUser.Id, args);
            Finish:
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message } };
            }
        }
        public async Task<ResultDTO> GetAllTasksByLoginName(QueryTasksArgs args)
        {
            try
            {
                var resultDto = new ResultDTO() { Object = new List<ITWorkflowTask>() };
                if (string.IsNullOrEmpty(args.LoginName))
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Login name is required !" };
                    goto Finish;
                }

                var currentUser = await _uow.GetRepository<User>(true).GetSingleAsync(x => x.LoginName.ToLower().Equals(args.LoginName) && x.IsActivated && !x.IsDeleted);
                if (currentUser is null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Currenr user is not exists !" };
                    goto Finish;
                }
                await GetTasks(false, resultDto, currentUser.Id, args);
            Finish:
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message } };
            }
        }

        public async Task GetTasks(bool isGetTaskNotCompleted, ResultDTO resultDTO, Guid currentUserId, QueryTasksArgs args)
        {
            var userInDepartent = await _uow.GetRepository<UserDepartmentMapping>().FindByAsync(x => x.UserId != null && x.UserId.HasValue && x.UserId == currentUserId && x.DepartmentId != null && x.DepartmentId.HasValue && x.Department != null && !x.Department.IsDeleted);
            var allTasks =
                await _uow.GetRepository<ITWorkflowTask>(true).FindByAsync(x => isGetTaskNotCompleted ? !x.IsCompleted : x.IsCompleted);
            var edoc2_tasks = allTasks.Where(y => y.AssignedToId == currentUserId || userInDepartent.Any(x => x.DepartmentId == y.AssignedToDepartmentId && (((x.ITUserDepartmentMapping != null && x.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any() ? x.ITUserDepartmentMapping.ITModuleDepartmentGroupMappings.Any(p => p.ModuleDepartmentGroup.GroupCode == ((int) y.AssignedToDepartmentGroup)) : false)) || (y.AssignedToDepartmentGroup == x.Role) || (x.ITUserDepartmentMapping != null && y.AssignedToDepartmentGroup == x.ITUserDepartmentMapping.GroupEdoc1))))
                .ToList();
            var wfRTC = _uow.GetRepository<ITWorkflowTask>().FindBy(x => x.AssignedToId == currentUserId && x.WorkflowInstance != null && x.WorkflowInstance.ItemStatus == "Requested To Change" && x.WorkflowInstance.IsTerminated && !x.ParentTaskId.HasValue);
            wfRTC = wfRTC.ToList().Where(x => IsRequestToChange(x));
            edoc2_tasks.AddRange(wfRTC);

            if (edoc2_tasks.Any())
            {
                if (args.RequestedDepartmentId != null && args.RequestedDepartmentId.HasValue)
                {
                    edoc2_tasks = edoc2_tasks.Where(x => x.RequestedDepartmentId != null && x.RequestedDepartmentId.HasValue && x.RequestedDepartmentId.Equals(args.RequestedDepartmentId.Value)).ToList();
                }

                if (!string.IsNullOrEmpty(args.Type))
                {
                    edoc2_tasks = edoc2_tasks.Where(x => x.ReferenceNumber.Substring(0, 2).ToLower().Equals(args.Type.ToLower())).ToList();
                }

                if (!string.IsNullOrEmpty(args.Keyword))
                {
                    edoc2_tasks = edoc2_tasks.Where(x => x.ReferenceNumber.ToLower().Contains(args.Keyword.ToLower())).ToList();
                }

                if (args.ApprovedFromDate != null && args.ApprovedFromDate.HasValue)
                {
                    edoc2_tasks = edoc2_tasks.Where(x => x.Modified >= args.ApprovedFromDate.Value).ToList();
                }

                if (args.ApprovedToDate != null && args.ApprovedToDate.HasValue)
                {
                    edoc2_tasks = edoc2_tasks.Where(x => x.Modified <= args.ApprovedToDate.Value).ToList();
                }

                if (!string.IsNullOrEmpty(args.Module))
                {
                    var wfTemplates = await _uow.GetRepository<ITWorkflowTemplate>().FindByAsync(x => x.ModuleCode.ToLower().Equals(args.Module.ToLower()));
                    var wfTemplateIds = wfTemplates.Select(y => y.Id).ToList();
                    var wfInstances = await _uow.GetRepository<ITWorkflowInstance>().FindByAsync(x => wfTemplateIds.Contains(x.ITTemplateId));
                    edoc2_tasks = edoc2_tasks.Where(x => wfInstances.Select(y => y.Id).Contains(x.ITWorkflowInstanceId)).ToList();
                }

                edoc2_tasks = edoc2_tasks.OrderByDescending(p => p.Created).Skip((args.Page - 1) * args.Limit).Take(args.Limit).ToList();

                var allInstanceIds = edoc2_tasks.Select(x => x.ITWorkflowInstanceId).ToList();
                var allUsers = await _uow.GetRepository<User>(true).GetAllAsync();
                var allWorkflowHistories = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => allInstanceIds.Contains(x.ITInstanceId));
                var allWorkflowTasks = await _uow.GetRepository<ITWorkflowTask>().FindByAsync(x => allInstanceIds.Contains(x.ITWorkflowInstanceId));

                var _return = new List<ITWorkflowTaskViewModel>();
                foreach (var us in edoc2_tasks)
                {
                    if (us.WorkflowInstance != null && us.WorkflowInstance.ItemStatus == "Requested To Change" && us.WorkflowInstance.IsTerminated && !us.ParentTaskId.HasValue)
                    {
                        var item = (await _uow.GetRepository<ITWorkflowInstance>().FindByAsync(x => x.ItemReferenceNumber == us.ReferenceNumber, "created desc")).FirstOrDefault();
                        if (item != null && item.ItemStatus != "Requested To Change")
                        {
                            continue;
                        }

                        // check truong hop co phieu Requested To Change 2 lan tro len
                        int count = 0;
                        foreach(var check in _return)
                        {
                            if (item.ItemReferenceNumber == check.ReferenceNumber)
                            {
                                count = 1;
                                break;
                            }
                        }

                        if(count == 1)
                        {
                            continue;
                        }
                        
                        // Request to change
                        us.Status = us.WorkflowInstance.ItemStatus;
                        var viewModel = Mapper.Map<ITWorkflowTaskViewModel>(us);
                        viewModel.DueDate = null;
                        if (us.RequestorId.HasValue)
                        {
                            //var user = _uow.GetRepository<User>().FindById(us.RequestorId.Value);
                            var user = allUsers.Where(x => x.Id == us.RequestorId.Value).FirstOrDefault();
                            if (!(user is null))
                            {
                                viewModel.RequestorId = user.Id;
                                viewModel.RequestorUserName = user.LoginName;
                                viewModel.RequestorFullName = user.FullName;
                            }
                        }

                        if (us.ITWorkflowInstanceId != null)
                        {
                            //var workflowHistoriesSubmit = _uow.GetRepository<ITWorkflowHistory>(true).GetSingle(x => x.ITInstanceId == us.ITWorkflowInstanceId, "created desc");
                            var workflowHistoriesSubmit = allWorkflowHistories.Where(x => x.ITInstanceId == us.ITWorkflowInstanceId).OrderByDescending(y => y.Created).FirstOrDefault();
                            if (!(workflowHistoriesSubmit is null))
                            {
                                if (us.WorkflowInstance.WorkflowData != null)
                                {
                                    var currentStep = us.WorkflowInstance.WorkflowData.Steps.Where(x => x.StepNumber == workflowHistoriesSubmit.StepNumber).FirstOrDefault();
                                    if (!(currentStep is null))
                                        viewModel.IsSignOff = currentStep.IsSignOff;
                                }
                                viewModel.Created = workflowHistoriesSubmit.Modified;
                            }
                        }
                        _return.Add(viewModel);
                    }
                    else
                    {
                        us.RequestorId = null;
                        us.RequestorUserName = null;
                        us.RequestorFullName = null;
                        if (!isGetTaskNotCompleted && us.WorkflowInstance != null && !string.IsNullOrEmpty(us.WorkflowInstance.ItemStatus))
                            us.Status = us.WorkflowInstance.ItemStatus;

                        var viewModel = Mapper.Map<ITWorkflowTaskViewModel>(us);
                        if (us.ITWorkflowInstanceId != null)
                        {
                            //var workflowTaskSubmit = _uow.GetRepository<ITWorkflowTask>(true).FindBy(x => x.ITWorkflowInstanceId == us.ITWorkflowInstanceId, "created asc").FirstOrDefault();
                            var workflowTaskSubmits = allWorkflowTasks.Where(x => x.ITWorkflowInstanceId == us.ITWorkflowInstanceId).OrderBy(y => y.Created).FirstOrDefault();
                            if (!(workflowTaskSubmits is null) && workflowTaskSubmits.RequestorId.HasValue)
                            {
                                //var user = _uow.GetRepository<User>().FindById(workflowTaskSubmit.RequestorId.Value);
                                var user = allUsers.Where(x => x.Id == workflowTaskSubmits.RequestorId.Value).FirstOrDefault();
                                if (!(user is null))
                                {
                                    viewModel.RequestorId = user.Id;
                                    viewModel.RequestorUserName = user.LoginName;
                                    viewModel.RequestorFullName = user.FullName;
                                }
                            }
                            //var workflowHistoriesSubmit = _uow.GetRepository<ITWorkflowHistory>(true).FindBy(x => x.ITInstanceId == us.ITWorkflowInstanceId, "created desc").FirstOrDefault();
                            var workflowHistoriesSubmit = allWorkflowHistories.Where(x => x.ITInstanceId == us.ITWorkflowInstanceId).OrderByDescending(y => y.Created).FirstOrDefault();
                            if (!(workflowHistoriesSubmit is null) && us.WorkflowInstance.WorkflowData != null && us.WorkflowInstance.WorkflowData.Steps.Any())
                            {
                                var currentStep = us.WorkflowInstance.WorkflowData.Steps.Where(x => x.StepNumber == workflowHistoriesSubmit.StepNumber).FirstOrDefault();
                                if (!(currentStep is null))
                                    viewModel.IsSignOff = currentStep.IsSignOff;
                            }
                        }
                        _return.Add(viewModel);
                    }
                }

                if (_return != null)
                {
                    HandleContractApprovalRequest contractApprovalTable = new HandleContractApprovalRequest();
                    HandlePurchaseRequest purchaseReques = new HandlePurchaseRequest();
                    HandleNonExpenseContractRequest NonExpenseContractReques = new HandleNonExpenseContractRequest();
                    HandlePaymentRequest paymentReques = new HandlePaymentRequest();
                    HandleReimbursementPaymentRequest reimbursementPaymentReques = new HandleReimbursementPaymentRequest();
                    foreach (var task in _return)
                    {
                        if (!string.IsNullOrEmpty(task.ReferenceNumber))
                        {
                            if (task.ReferenceNumber.StartsWith("F2-"))
                            {
                                task.IsMultibudget = purchaseReques.GetPurchaseRequestsByReferenceNumber(task.ReferenceNumber).Any(y => !string.IsNullOrEmpty(y.MultiBudget));
                                task.IsConfidentialContract = purchaseReques.GetPurchaseRequestsByReferenceNumber(task.ReferenceNumber).Any(z => z.IsConfidentialContract ==  true);

                            }

                            if (task.ReferenceNumber.StartsWith("F3-"))
                            {
                                //task.IsMultibudget = contractApprovalTable.GetContractApprovalRequestsByReferenceNumber(task.ReferenceNumber).Any(y => !string.IsNullOrEmpty(y.Prepayment));
                                task.IsConfidentialContract = contractApprovalTable.GetContractApprovalRequestsByReferenceNumber(task.ReferenceNumber).Any(z => z.IsConfidentialContract == true);
                            }

                            if (task.ReferenceNumber.StartsWith("F4-"))
                            {
                                task.IsConfidentialContract = NonExpenseContractReques.GetNonExpenseContractRequestsByReferenceNumber(task.ReferenceNumber).Any(y => y.IsConfidentialContract == true);
                            }

                            if (task.ReferenceNumber.StartsWith("PR-"))
                            {
                                task.IsConfidentialContract = paymentReques.GetPaymentRequestsByReferenceNumber(task.ReferenceNumber).Any(y => y.IsConfidentialContract == true);
                            }

                            if (task.ReferenceNumber.StartsWith("RP-"))
                            {
                                task.IsConfidentialContract = reimbursementPaymentReques.GetReimbursementPaymentRequestsByReferenceNumber(task.ReferenceNumber).Any(y => y.IsConfidentialContract == true);
                            }


                        }
                    }
                }
                resultDTO.Object = _return;
            }
        }

        public bool IsRequestToChange(ITWorkflowTask wfTask)
        {
            var wfIntance = _uow.GetRepository<ITWorkflowInstance>().FindBy(x => wfTask.ItemId == x.ItemId);
            return (wfIntance != null && (wfIntance.Any(x => !x.IsCompleted) || wfIntance.Any(y => y.IsCompleted && !y.IsTerminated))) ? false : true;
        }

        public async Task<ResultDTO> GetDeparmentEdoc1FromDepartmentEdocIT(Guid departmentEdoc2Id)
        {
            var resultDto = new ResultDTO() { };
            try
            {
                await GetReferenceDepartment(resultDto, true, departmentEdoc2Id);
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message } };
            }
        }
        public async Task<ResultDTO> GetDeparmentEdocITFromDepartmentEdoc1(Guid departmentEdoc1Id)
        {
            var resultDto = new ResultDTO() { };
            try
            {
                await GetReferenceDepartment(resultDto, false, departmentEdoc1Id);
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message } };
            }
        }
        public async Task<ResultDTO> ReFindAssignToCurrentStep(Guid ItemId)
        {
            var resultDto = new ResultDTO() { };
            try
            {
                var workflowInstance = await _uow.GetRepository<ITWorkflowInstance>(true).GetSingleAsync(x => x.ItemId == ItemId, "created desc");
                if (workflowInstance is null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Cannot find any round!" };
                    goto Finish;
                }
                if (workflowInstance.IsCompleted)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Current round is already completed!" };
                    goto Finish;
                }

                var lastHistory = await _uow.GetRepository<ITWorkflowHistory>(true).GetSingleAsync(x => x.ITInstanceId == workflowInstance.Id, "created desc");
                if (lastHistory.IsStepCompleted)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Workflow histories is already completed!" };
                    goto Finish;
                }

                if (lastHistory.AssignedToDepartmentId.HasValue)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Assigne To Department is already exists!" };
                    goto Finish;
                }

                var nextStep = workflowInstance.WorkflowData.Steps.Where(x => x.StepNumber == lastHistory.StepNumber).FirstOrDefault();
                if (nextStep is null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Cannot find current step!" };
                    goto Finish;
                }

                string participantType = nextStep.ParticipantType;
                Group group = nextStep.DepartmentType;
                string grade = nextStep.JobGrade;
                string maxJobGrade = nextStep.MaxJobGrade;

                Guid? departmentId = null;
                string requestedDepartmentCode = "";
                string relatedDepartmentCode = "";
                string orderingDepartmentCode = "";
                string inchargeDepartmentCode = "";
                string userActionLoginName = "";
                Guid? adminRequestorDepartmentId = null;
                List<string> multipleParticipants = new List<string>();
                Guid? userId = Guid.Empty;
                var trackingLogAPI = await _uow.GetRepository<TrackingAPILogs>().FindByAsync<TrackingAPILogsDTO>(x => x.ItemId == ItemId, "created desc");
                if (!(trackingLogAPI is null))
                {
                    foreach (var pl in trackingLogAPI)
                    {
                        if (!(pl._Response_Vote is null) && !(pl._Response_Vote.Object is null))
                        {
                            var response = Mapper.Map<WorkflowProcessingStageReturn>(pl._Response_Vote.Object);
                            if (!(response is null))
                            {
                                if (pl._Payload_Vote != null)
                                {
                                    requestedDepartmentCode = pl._Payload_Vote.RequestDepartmentCode;
                                    relatedDepartmentCode = pl._Payload_Vote.RelatedDepartmentCode;
                                    userActionLoginName = pl._Payload_Vote.ApproverLoginName;
                                    orderingDepartmentCode = pl._Payload_Vote.OrderingDepartmentCode;
                                    inchargeDepartmentCode = pl._Payload_Vote.InChargeDepartmentCode;
                                    multipleParticipants = pl._Payload_Vote.MultipleParticipantCodes;
                                    adminRequestorDepartmentId = pl._Payload_Vote.AdminRequestorDepartmentId;
                                }
                                else if (pl._Payload_StartWorkflow != null)
                                {
                                    requestedDepartmentCode = pl._Payload_StartWorkflow.RequestDepartmentCode;
                                    relatedDepartmentCode = pl._Payload_StartWorkflow.RelatedDepartmentCode;
                                    userActionLoginName = pl._Payload_StartWorkflow.CreatedItemByLoginName;
                                    orderingDepartmentCode = pl._Payload_StartWorkflow.OrderingDepartmentCode;
                                    inchargeDepartmentCode = pl._Payload_StartWorkflow.InChargeDepartmentCode;
                                    multipleParticipants = pl._Payload_StartWorkflow.MultipleParticipantCodes;
                                    adminRequestorDepartmentId = pl._Payload_Vote.AdminRequestorDepartmentId;
                                }
                                break;
                            }
                        }
                    }
                }

                var requestedDepartmet = await _uow.GetRepository<Department>().GetSingleAsync(x => x.Code == requestedDepartmentCode);
                switch (nextStep.ParticipantType)
                {
                    case ParticipantTypeConstants.RequestedDept:
                        departmentId = await GetDepartmetByCodeParticipantType(requestedDepartmentCode, nextStep);
                        // Task #14389 bitrix (New rule)
                        if (!departmentId.HasValue && requestedDepartmet != null && nextStep.DepartmentType != Group.CheckerFIN)
                        {
                            Department upperDe = await GetUpperDept(nextStep, requestedDepartmentCode);
                            if (upperDe != null)
                                departmentId = upperDe.Id;
                        }
                        break;
                    case ParticipantTypeConstants.Relateddept:
                        if (!string.IsNullOrEmpty(relatedDepartmentCode))
                            departmentId = await GetDepartmetByCodeParticipantType(relatedDepartmentCode, nextStep);
                        // Task #14389 bitrix (New rule)
                        if (!departmentId.HasValue && nextStep.DepartmentType != Group.CheckerFIN)
                        {
                            Department upperDe = await GetUpperDept(nextStep, relatedDepartmentCode);
                            if (upperDe != null)
                                departmentId = upperDe.Id;
                        }
                        break;
                    case ParticipantTypeConstants.OrderingDept:
                        if (!string.IsNullOrEmpty(orderingDepartmentCode))
                            departmentId = await GetDepartmetByCodeParticipantType(orderingDepartmentCode, nextStep);
                        // Task #14389 bitrix (New rule)
                        if (!departmentId.HasValue && requestedDepartmet != null && nextStep.DepartmentType != Group.CheckerFIN)
                        {
                            Department upperDe = await GetUpperDept(nextStep, orderingDepartmentCode);
                            if (upperDe != null)
                                departmentId = upperDe.Id;
                        }
                        break;
                    case ParticipantTypeConstants.isDIC:
                        if (!string.IsNullOrEmpty(inchargeDepartmentCode))
                            departmentId = await GetDepartmetByCodeParticipantType(inchargeDepartmentCode, nextStep);
                        // Task #14389 bitrix (New rule)
                        if (!departmentId.HasValue && requestedDepartmet != null && nextStep.DepartmentType != Group.CheckerFIN)
                        {
                            Department upperDe = await GetUpperDept(nextStep, inchargeDepartmentCode);
                            if (upperDe != null)
                                departmentId = upperDe.Id;
                        }
                        break;
                    case ParticipantTypeConstants.ItemUserField:
                        if (!string.IsNullOrEmpty(userActionLoginName))
                        {
                            var user = _uow.GetRepository<User>().GetSingle(x => x.LoginName == userActionLoginName && !x.IsDeleted && x.IsActivated);
                            if (user is null)
                                userId = user.Id;
                        }
                        break;
                    case ParticipantTypeConstants.UpperDepartment:
                        if (requestedDepartmet != null)
                        {
                            Department upperDept = await GetUpperDept(nextStep, requestedDepartmet.Code);
                            if (upperDept != null)
                                departmentId = upperDept.Id;
                        }
                        break;
                    default:
                        Department hrDepartment = await GetDept(nextStep, requestedDepartmet, nextStep.ParticipantType, multipleParticipants, adminRequestorDepartmentId);
                        if (hrDepartment != null)
                            departmentId = hrDepartment.Id;
                        break;
                }

                if (departmentId == null || !departmentId.HasValue || departmentId == Guid.Empty)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Cannot find department!" };
                    goto Finish;
                }

                var lastWorkflowTask = await _uow.GetRepository<ITWorkflowTask>().GetSingleAsync(x => x.ITWorkflowInstanceId == workflowInstance.Id, "created desc");
                if (lastWorkflowTask is null || (!(lastWorkflowTask is null) && !lastWorkflowTask.Status.Equals("Pending")))
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Cannot status task is not pending!" };
                    goto Finish;
                }

                var itemStatus = await UpdateItemStatus(nextStep, userId, departmentId);
                if (itemStatus.Equals("Cannot_find_status!"))
                {
                    resultDto.ErrorCodes = new List<int> { -1 };
                    resultDto.Messages = new List<string> { "Cannot find default status. Please enter Default status field in workflow template!" + " | Workflow Template:  " + workflowInstance.WorkflowName };
                    goto Finish;
                }

                #region Update task
                workflowInstance.ItemStatus = itemStatus;

                lastHistory.Outcome = nextStep.OnSuccess;
                lastHistory.AssignedToDepartmentId = departmentId;
                lastHistory.AssignedToDepartmentType = group;
                lastHistory.DueDate = nextStep.DueDateNumber == 0 ? DateTime.Now.AddDays(3) : DateTime.Now.AddDays(nextStep.DueDateNumber);

                lastWorkflowTask.Status = itemStatus;
                lastWorkflowTask.AssignedToDepartmentId = departmentId;
                lastWorkflowTask.AssignedToDepartmentGroup = group;
                lastWorkflowTask.DueDate = nextStep.DueDateNumber == 0 ? DateTime.Now.AddDays(3) : DateTime.Now.AddDays(nextStep.DueDateNumber);
                #endregion

                await _uow.CommitAsync();
                WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn()
                {
                    ItemStatus = workflowInstance.ItemStatus,
                    ItemId = workflowInstance.ItemId,
                    ReferenceNumber = workflowInstance.ItemReferenceNumber,
                    WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(workflowInstance) }
                };

                if (modelReturn.WorkflowInstance.Any())
                {
                    modelReturn.WorkflowInstance[0].ITWorkflowHistories = new List<ITWorkflowHistoryViewModel>() { Mapper.Map<ITWorkflowHistoryViewModel>(lastHistory) };
                    modelReturn.WorkflowInstance[0].ITWorkflowTasks =  new List<ITWorkflowTaskViewModel>() { Mapper.Map<ITWorkflowTaskViewModel>(lastWorkflowTask) };
                }

                resultDto.Object = modelReturn;
            Finish:
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message } };
            }
        }

        public async Task<ResultDTO> GetUserInfoByLoginName(string loginName)
        {
            var resultDto = new ResultDTO() { };
            try
            {
                if (string.IsNullOrEmpty(loginName))
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Login Name is required!" };
                    goto Finish;
                }

                var user = await _uow.GetRepository<User>().GetSingleAsync<UserListViewModel>(x => x.LoginName == loginName && x.IsActivated && !x.IsDeleted);
                if (user is null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Cannot find user infomation with login name: " + loginName };
                    goto Finish;
                }
                if (!user.IsActivated)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Current user is not active!" };
                    goto Finish;
                }

                resultDto.Object = Mapper.Map<UserListAPIViewModel>(user);
            Finish:
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message } };
            }
        }

        public async Task<ResultDTO> GetUsers(QueryArgs args)
        {
            var resultDto = new ResultDTO() { };
            try
            {
                var users = await _uow.GetRepository<User>().FindByAsync(args.Order, args.Page, args.Limit, args.Predicate, args.PredicateParameters);
                if (users is null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Cannot find any user with query: "};
                    goto Finish;
                }

                HandleUsers tradeContractUsers = new HandleUsers();
                var allUserTrade = tradeContractUsers.GetListUsersSettings();
                var data = Mapper.Map<List<UserListAPIViewModel>>(users);
                if (data != null && data.Any() && allUserTrade.Any())
                {
                    foreach(var item in data)
                    {
                        var tradeProper = new TradeContractProper();
                        tradeProper.UserMappings = allUserTrade.Where(x => x.LoginName.ToLower().Equals(item.LoginName.ToLower()))
                            .Select(y => new TradeContractViewModel.Users()
                            {
                            Id = y.ID,
                            LoginName = y.LoginName,
                            Code = y.Code,
                            Name = y.Name
                            }).ToList();
                        item.TradeContractProperties = tradeProper;
                    }
                }

                resultDto.Object = data;
            Finish:
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message } };
            }
        }

        public async Task<ResultDTO> GetUserHODByLoginName(string loginName)
        {
            var resultDto = new ResultDTO() { };
            var userInfo = new UserDepartmentMappingViewModelAPIReturn() { };
            try
            {
                var userDepartmentMappings = await _uow.GetRepository<UserDepartmentMapping>().GetSingleAsync(x => x.IsHeadCount && x.User.LoginName == loginName && x.User.IsActivated && !x.User.IsDeleted, "created desc");
                if (userDepartmentMappings != null)
                {
                    if (userDepartmentMappings.Department != null)
                    {
                        Department deptG5 = null;
                        var currentDepartment = userDepartmentMappings.Department;
                        if (currentDepartment.JobGrade != null && currentDepartment.JobGrade.Grade >= 5 && currentDepartment.Parent != null)
                        {
                            var userInDepartmentHeadCount = currentDepartment.UserDepartmentMappings.Where(x => x.IsHeadCount).FirstOrDefault();
                            if (userInDepartmentHeadCount != null)
                            {
                                deptG5 = currentDepartment.Parent;
                            }
                            else
                            {
                                deptG5 = this.FindHOD(userDepartmentMappings.Department);
                            }
                        }
                        else
                        {
                            deptG5 = this.FindHOD(userDepartmentMappings.Department);
                        }

                        if (deptG5 != null)
                        {
                            var userInDepartmentHeadCount = deptG5.UserDepartmentMappings.Where(x => x.IsHeadCount).FirstOrDefault();
                            if (userInDepartmentHeadCount != null)
                            {
                                userInfo = Mapper.Map<UserDepartmentMappingViewModelAPIReturn>(userInDepartmentHeadCount);
                            }
                        }
                    }
                }
                resultDto.Object = userInfo;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message } };
            }
            return resultDto;
        }

        public async Task<ResultDTO> GetAllUserBranchByLoginName(string loginName)
        {
            var resultDto = new ResultDTO() { };
            List<UserDepartmentMappingViewModelAPIReturn> userReturnAPI = new List<UserDepartmentMappingViewModelAPIReturn>();
            try
            {
                var userDepartmentMappings = await _uow.GetRepository<UserDepartmentMapping>().GetSingleAsync(x => x.IsHeadCount && x.User.LoginName == loginName && x.User.IsActivated && !x.User.IsDeleted, "created desc");
                if (userDepartmentMappings != null)
                {
                    Department deptG5 = this.FindG5(userDepartmentMappings.Department);
                    if (deptG5 != null)
                    {
                        await this.FindAllUserFromDepartmentId(deptG5.Id, userReturnAPI);
                    }
                }
                resultDto.Object = userReturnAPI;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message } };
            }
            return resultDto;
        }
        public async Task FindAllUserFromDepartmentId(Guid? departmentId, List<UserDepartmentMappingViewModelAPIReturn> ids)
        {
            if (departmentId != null && departmentId.HasValue)
            {
                var allChildDepartment = await _uow.GetRepository<UserDepartmentMapping>().FindByAsync<UserDepartmentMappingViewModelAPIReturn>
                        (x => x.Department.ParentId.HasValue && x.Department.ParentId.Value == departmentId && x.IsHeadCount);
                if (allChildDepartment.Any())
                {
                    ids.AddRange(allChildDepartment.ToList());
                    foreach (var child in allChildDepartment)
                    {
                        await FindAllUserFromDepartmentId(child.DepartmentId, ids);
                    }
                }
            }
        }

        public async Task GetReferenceDepartment(ResultDTO resultDto, bool isGetDepartmentEdoc1, Guid departmentId)
        {
            var departmentMappings = await _uow.GetRepository<DepartmentMapping>().FindByAsync(x => (!isGetDepartmentEdoc1 ? x.DepartmentEdoc1Id == departmentId : x.DepartmentEdoc2Id == departmentId) && x.DepartmentEdoc2Id != null);
            if (departmentMappings.Any())
            {
                if (isGetDepartmentEdoc1)
                    resultDto.Object = Mapper.Map<List<DepartmentMappingViewModel>>(departmentMappings);
                else
                    resultDto.Object = departmentMappings.Select(x => Mapper.Map<DepartmentViewModel>(x.Department));
            }
            else
            {
                resultDto.ErrorCodes = new List<int>() { -1 };
                if (isGetDepartmentEdoc1)
                {
                    var departmentEdoc2 = await _uow.GetRepository<Department>().GetSingleAsync(x => x.Id == departmentId);
                    if (!(departmentEdoc2 is null))
                        resultDto.Messages = new List<string>() { string.Format("Cannot find any Department Edoc1 with Department EdocIT Id: {0} | Code: {1}", departmentId, departmentEdoc2.Code) };
                    else
                        resultDto.Messages = new List<string>() { string.Format("Cannot find any Department Edoc1 with Department EdocIT Id: {0}", departmentId) };
                }
                else
                    resultDto.Messages = new List<string>() { string.Format("Cannot find any Department EdocIT with Department Edoc1 Id: {0}", departmentId) };
            }
        }

        public async Task<ResultDTO> GetUserByDepartmentId(GetUserByDepartmentArgs args)
        {
            try
            {
                var resultDto = new ResultDTO() { };
                if (args.DepartmentId == null || args.DepartmentId == Guid.Empty)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "DepartmentId is required !" };
                    goto Finish;
                }

                var userInDepartment = await _uow.GetRepository<UserDepartmentMapping>().FindByAsync<UserDepartmentMappingViewModelAPIReturn>(x => x.UserId.HasValue && x.DepartmentId.HasValue && x.DepartmentId == args.DepartmentId);
                if (userInDepartment.Any())
                {
                    if (args.ListRoles != null && args.ListRoles.Any())
                        userInDepartment = userInDepartment.Where(x => ((x.GroupEdoc1.HasValue && args.ListRoles.Contains(x.GroupEdoc1.Value)) || (x.Group.HasValue && args.ListRoles.Contains(x.Group.Value)))).ToList();

                    resultDto.Object = userInDepartment;
                } else
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Not found user in department !" };
                    goto Finish;
                }
            Finish:
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message }, ErrorCodes = new List<int>() { -1 } };
            }
        }

        public async Task<ResultDTO> AssignTo(AssignToArgs args)
        {
            WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn() { };
            var trackingLogAPI = new TrackingAPILogs() { Action = ActionAPIConstants.ASSIGNTO };
            try
            {
                var resultDto = new ResultDTO() { };
                if (args == null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Cannot find any params!" };
                    goto Finish;
                }

                if (args.ItemId == null || !args.ItemId.HasValue)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Param ItemId is required!" };
                    goto Finish;
                }

                if (string.IsNullOrEmpty(args.AssignToUserLoginName))
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Param AssignToUserLoginName Id is required!" };
                    goto Finish;
                }

                var assignToUser = await _uow.GetRepository<User>().GetSingleAsync(x => x.IsActivated && !string.IsNullOrEmpty(x.LoginName) && x.LoginName.Equals(args.AssignToUserLoginName) && !x.IsDeleted);
                if (assignToUser == null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Assign To User is not exists!" };
                    goto Finish;
                }

                if (string.IsNullOrEmpty(args.AssignerLoginName))
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Param AssignerLoginName is required!" };
                    goto Finish;
                }

                var assignerUser = await _uow.GetRepository<User>().GetSingleAsync(x => x.IsActivated && !string.IsNullOrEmpty(x.LoginName) && x.LoginName.Equals(args.AssignerLoginName) && !x.IsDeleted);
                if (assignerUser == null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Cannot find user with login name: " + args.AssignerLoginName };
                    goto Finish;
                }

                var approverUserDepartmentMapping = await _uow.GetRepository<UserDepartmentMapping>().FindByAsync(x => x.DepartmentId.HasValue && x.UserId == assignerUser.Id, "Created desc");
                if (approverUserDepartmentMapping is null)
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { "Not found Approver in Department with SAPCode ! -| " + assignerUser.SAPCode }
                    };
                }

                var wfInstance = await _uow.GetRepository<ITWorkflowInstance>().GetSingleAsync(x => x.ItemId == args.ItemId.Value, "Created desc");
                if (wfInstance is null)
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { " Cannot find any running Item ! " }
                    };
                }

                var allLastHistory = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x =>
                    x.ITInstanceId == wfInstance.Id
                    && !x.IsStepCompleted
                    , "Created desc");

                allLastHistory = allLastHistory.Where(x =>
                    approverUserDepartmentMapping.Any(y => (
                    (y.DepartmentId == x.AssignedToDepartmentId) &&
                    ((y.Role == x.AssignedToDepartmentType) || (y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.GroupEdoc1.HasValue ? y.ITUserDepartmentMapping.GroupEdoc1.Value == x.AssignedToDepartmentType : false))) ||
                    (x.AssignedToUserId == y.UserId))).ToList();
                if (!allLastHistory.Any())
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { "You don't have permission approve !" }
                    };
                }

                var allCurrentTaskTask = await _uow.GetRepository<ITWorkflowTask>().FindByAsync(x =>
                    x.ItemId == args.ItemId
                    && !x.IsCompleted
                    , "Created desc");
                allCurrentTaskTask = allCurrentTaskTask.Where(x =>
                    approverUserDepartmentMapping.Any(y =>
                    (y.UserId == x.AssignedToId) ||
                    (y.DepartmentId == x.AssignedToDepartmentId && ((y.Role == x.AssignedToDepartmentGroup) || (y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.GroupEdoc1.HasValue ? y.ITUserDepartmentMapping.GroupEdoc1.Value == x.AssignedToDepartmentGroup : false)))
                    )).ToList();
                //If user cancel incase of pending, the tasks was not generated
                if (!allCurrentTaskTask.Any())
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { "You don't have permission approve !" }
                    };
                }

                modelReturn = new WorkflowProcessingStageReturn()
                {
                    ItemStatus = wfInstance.ItemStatus,
                    ItemId = wfInstance.ItemId,
                    ReferenceNumber = wfInstance.ItemReferenceNumber,
                    WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                };

                var currentTask = new ITWorkflowTask();
                if (allCurrentTaskTask.Any())
                {
                    currentTask = allCurrentTaskTask.OrderBy(x => x.Created).FirstOrDefault();
                    var newChildTask = new ITWorkflowTask
                    {
                        ParentTaskId = currentTask.Id,
                        Title = currentTask.Title,
                        ItemId = currentTask.ItemId,
                        ItemType = currentTask.ItemType,
                        ReferenceNumber = currentTask.ReferenceNumber,
                        DueDate = DateTimeOffset.Now.AddDays(3),
                        AssignedToId = assignToUser.Id,
                        /*AssignedToDepartmentId = args.DepartmentId.Value,
                        AssignedToDepartmentGroup = args.Role.Value,*/
                        RequestedDepartmentId = currentTask.RequestedDepartmentId,
                        RequestedDepartmentCode = currentTask.RequestedDepartmentCode,
                        RequestedDepartmentName = currentTask.RequestedDepartmentName,
                        Vote = VoteType.None,
                        RequestorId = currentTask.RequestorId,
                        RequestorUserName = currentTask.RequestorUserName,
                        RequestorFullName = currentTask.RequestorFullName,
                        ITWorkflowInstanceId = currentTask.ITWorkflowInstanceId,
                        IsParallelApprove = currentTask.IsParallelApprove,
                        ParallelStep = currentTask.ParallelStep,
                        CreatedById = assignerUser.Id,
                        CreatedBy = assignerUser.LoginName,
                        CreatedByFullName = assignerUser.FullName,
                        AssignerId = assignerUser.Id,
                        AssignerLoginName = assignerUser.LoginName
                    };
                    _uow.GetRepository<ITWorkflowTask>().Add(newChildTask);
                    modelReturn.WorkflowInstance[0].ITWorkflowTasks = new List<ITWorkflowTaskViewModel>() { Mapper.Map<ITWorkflowTaskViewModel>(newChildTask) };
                    await _uow.CommitAsync();
                }

                var lastHistory = new ITWorkflowHistory();
                if (allLastHistory.Any())
                {
                    lastHistory = allLastHistory.OrderBy(x => x.Created).FirstOrDefault();
                    var newChildHistories = new ITWorkflowHistory
                    {
                        ParentHistoryId = lastHistory.Id,
                        /*ApproverId = lastHistory.ApproverId,*/
                        AssignedToUserId = assignToUser.Id,
                        /*AssignedToDepartmentId = assignToDepartment.Id,*/
                        /*AssignedToDepartmentType = args.Role.Value,*/
                        VoteType = VoteType.None,
                        StepNumber = lastHistory.StepNumber,
                        DueDate = DateTimeOffset.Now.AddDays(3),
                        IsParallelApprove = lastHistory.IsParallelApprove,
                        ParallelStep = lastHistory.ParallelStep,
                        ITInstanceId = lastHistory.ITInstanceId,
                        AssignerId = assignerUser.Id,
                        AssignerLoginName = assignerUser.LoginName
                    };
                    _uow.GetRepository<ITWorkflowHistory>().Add(newChildHistories);
                    modelReturn.WorkflowInstance[0].ITWorkflowHistories = new List<ITWorkflowHistoryViewModel>() { Mapper.Map<ITWorkflowHistoryViewModel>(newChildHistories) };
                    
                }
            Finish:
                resultDto.Object = modelReturn;
                trackingLogAPI.ItemId = args.ItemId.Value;
                trackingLogAPI.Payload = JsonConvert.SerializeObject(args);
                trackingLogAPI.Response = JsonConvert.SerializeObject(resultDto);
                _uow.GetRepository<TrackingAPILogs>().Add(trackingLogAPI);
                await _uow.CommitAsync();
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message }, ErrorCodes = new List<int>() { -1 } };
            }
        }

        public async Task<ResultDTO> VoteAssign(VoteArgs args)
        {
            var trackingLog = new TrackingAPILogs() { Action = ActionAPIConstants.VOTEASSIGN };
            WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn() { };
            var resultDto = new ResultDTO() { };
            try
            {
                if (args == null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Param AssignerLoginName is required!" };
                    goto Finish;
                }

                if (args.ItemId == null || args.ItemId == Guid.Empty)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Param Itemid is required!" };
                    goto Finish;
                }

                if (string.IsNullOrEmpty(args.ApproverLoginName))
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { "Approver Login Name is required!" }
                    };
                }

                var approverUser = await _uow.GetRepository<User>().GetSingleAsync(x => x.LoginName == args.ApproverLoginName && x.IsActivated && !x.IsDeleted, "Created desc");
                if (approverUser is null)
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { "Approver not found !" }
                    };
                }

                var workflowInstance = await _uow.GetRepository<ITWorkflowInstance>().GetSingleAsync(x => x.ItemId == args.ItemId, "created desc");
                if (workflowInstance == null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Not found Workflow Instance!" };
                    goto Finish;
                } else
                {
                    if (workflowInstance.IsCompleted)
                    {
                        resultDto.ErrorCodes = new List<int>() { -1 };
                        resultDto.Messages = new List<string>() { "Workflow is completed!" };
                        goto Finish;
                    }
                }
                var currentWfTask = await _uow.GetRepository<ITWorkflowTask>().FindByAsync(x => !x.IsCompleted && x.AssignedToId.Value == approverUser.Id && x.ItemId == args.ItemId && x.ITWorkflowInstanceId == workflowInstance.Id && x.AssignedToId.HasValue);
                if (!currentWfTask.Any())
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "You don't have permission! (Not found Workflow task)" };
                    goto Finish;
                }

                var currentWfHistory = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => !x.IsStepCompleted && x.AssignedToUserId.HasValue && x.AssignedToUserId.Value == approverUser.Id && x.ITInstanceId == workflowInstance.Id);
                if (!currentWfHistory.Any())
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "You don't have permission! (Not found Workflow history)" };
                    goto Finish;
                }

                #region feature RTC, Cancel Reject
                List<VoteType> statusProcessParent = new List<VoteType>() { VoteType.Cancel, VoteType.RequestToChange, VoteType.Reject };
                bool processWFParent = statusProcessParent.Contains(args.Vote);
                #endregion

                foreach (var i in currentWfTask)
                {
                    i.IsCompleted = true;
                    i.Vote = args.Vote;
                    i.Modified = DateTimeOffset.Now;
                    i.ModifiedBy = approverUser.LoginName;
                    i.ModifiedByFullName = approverUser.FullName;
                    i.ModifiedById = approverUser.Id;
                    _uow.GetRepository<ITWorkflowTask>().Update(i);
                    if (processWFParent)
                    {
                        var parentTask = await _uow.GetRepository<ITWorkflowTask>().FindByAsync(x => x.Id == i.ParentTaskId && !x.IsCompleted && x.ITWorkflowInstanceId == workflowInstance.Id);
                        if (parentTask.Any())
                        {
                            foreach (var z in parentTask)
                            {
                                z.IsCompleted = true;
                                z.Vote = VoteType.None;
                                //z.Modified = DateTimeOffset.Now;
                                //z.ModifiedBy = approverUser.LoginName;
                                //z.ModifiedByFullName = approverUser.FullName;
                                //z.ModifiedById = approverUser.Id;
                                _uow.GetRepository<ITWorkflowTask>().Update(z);
                            }
                        }
                    }
                }

                foreach (var i in currentWfHistory)
                {
                    i.VoteType = args.Vote;
                    i.Modified = DateTime.Now;
                    i.Comment = args.Comment;
                    i.ApproverId = approverUser.Id;
                    i.Approver = approverUser.LoginName;
                    i.ApproverFullName = approverUser.FullName;
                    i.IsStepCompleted = true;
                    _uow.GetRepository<ITWorkflowHistory>().Update(i);
                    if (processWFParent)
                    {
                        var parentHistory = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => x.Id == i.ParentHistoryId && !x.IsStepCompleted && x.ITInstanceId == workflowInstance.Id);
                        if (parentHistory.Any())
                        {
                            foreach (var z in parentHistory)
                            {
                                z.VoteType = VoteType.None;
                                //z.Modified = DateTime.Now;
                                //z.Comment = args.Comment;
                                //z.ApproverId = approverUser.Id;
                                //z.Approver = approverUser.LoginName;
                                //z.ApproverFullName = approverUser.FullName;
                                z.IsStepCompleted = true;
                                _uow.GetRepository<ITWorkflowHistory>().Update(z);
                            }
                        }
                    }
                }

                #region Change status wf instance
                switch (args.Vote)
                {
                    case VoteType.RequestToChange:
                        workflowInstance.IsCompleted = true;
                        workflowInstance.IsTerminated = true;
                        workflowInstance.ItemStatus = "Requested To Change";
                        break;
                    case VoteType.Reject:
                        workflowInstance.IsCompleted = true;
                        workflowInstance.ItemStatus = "Rejected";
                        break;
                    case VoteType.Cancel:
                        workflowInstance.IsCompleted = true;
                        workflowInstance.ItemStatus = "Cancelled";
                        break;
                    default:
                        break;
                }
                #endregion

                modelReturn = new WorkflowProcessingStageReturn()
                {
                    ItemStatus = workflowInstance.ItemStatus,
                    ItemId = workflowInstance.ItemId,
                    ReferenceNumber = workflowInstance.ItemReferenceNumber,
                    WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(workflowInstance) }
                };
                if (modelReturn.WorkflowInstance.Any())
                {
                    modelReturn.WorkflowInstance[0].ITWorkflowHistories = Mapper.Map<List<ITWorkflowHistoryViewModel>>(currentWfHistory);
                    modelReturn.WorkflowInstance[0].ITWorkflowTasks = Mapper.Map<List<ITWorkflowTaskViewModel>>(currentWfTask);
                }

                trackingLog.ItemId = args.ItemId;
                trackingLog.Payload = JsonConvert.SerializeObject(args);
                trackingLog.Response = JsonConvert.SerializeObject(modelReturn);
                _uow.GetRepository<TrackingAPILogs>().Add(trackingLog);
                resultDto.Object = modelReturn;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message }, ErrorCodes = new List<int>() { -1 } };
            }
        Finish:
            trackingLog.Response = JsonConvert.SerializeObject(resultDto);
            _uow.GetRepository<TrackingAPILogs>().Add(trackingLog);
            await _uow.CommitAsync();
            return resultDto;
        }

        public async Task<ResultDTO> CancelAssign(CancelAssignArgs args)
        {
            var trackingLog = new TrackingAPILogs() { Action = ActionAPIConstants.CANCELASSIGN };
            WorkflowProcessingStageReturn modelReturn = new WorkflowProcessingStageReturn() { };
            var resultDto = new ResultDTO() { };
            try
            {
                if (args == null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Param AssignerLoginName is required!" };
                    goto Finish;
                }
                if (args.ItemId == null || args.ItemId == Guid.Empty)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Param Itemid is required!" };
                    goto Finish;
                }

                if (string.IsNullOrEmpty(args.ApproverLoginName))
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { "Approver Login Name is required!" }
                    };
                }

                var approverUser = await _uow.GetRepository<User>().GetSingleAsync(x => x.LoginName == args.ApproverLoginName && x.IsActivated && !x.IsDeleted, "Created desc");
                if (approverUser is null)
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { "Approver not found !" }
                    };
                }

                var approverUserDepartmentMapping = await _uow.GetRepository<UserDepartmentMapping>().FindByAsync(x => x.DepartmentId.HasValue && x.UserId == approverUser.Id, "Created desc");
                if (approverUserDepartmentMapping is null)
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { "Not found Approver in Department with SAPCode ! -| " + approverUser.SAPCode }
                    };
                }

                var wfInstance = await _uow.GetRepository<ITWorkflowInstance>().GetSingleAsync(x => x.ItemId == args.ItemId, "created desc");
                if (wfInstance == null)
                {
                    resultDto.ErrorCodes = new List<int>() { -1 };
                    resultDto.Messages = new List<string>() { "Not found Workflow Instance!" };
                    goto Finish;
                }
                else
                {
                    if (wfInstance.IsCompleted)
                    {
                        resultDto.ErrorCodes = new List<int>() { -1 };
                        resultDto.Messages = new List<string>() { "Workflow is completed!" };
                        goto Finish;
                    }
                }

                var allLastHistory = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x =>
                    x.ITInstanceId == wfInstance.Id
                    && !x.IsStepCompleted
                    , "Created desc");

                allLastHistory = allLastHistory.Where(x =>
                    approverUserDepartmentMapping.Any(y => (
                    (y.DepartmentId == x.AssignedToDepartmentId) &&
                    ((y.Role == x.AssignedToDepartmentType) || (y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.GroupEdoc1.HasValue ? y.ITUserDepartmentMapping.GroupEdoc1.Value == x.AssignedToDepartmentType : false))) ||
                    (x.AssignedToUserId == y.UserId))).ToList();
                if (!allLastHistory.Any())
                {
                    return new ResultDTO()
                    {
                        ErrorCodes = new List<int> { -1 },
                        Messages = new List<string>() { "You don't have permission approve !" }
                    };
                }

                var currentWfHistory = allLastHistory.ToList().FirstOrDefault();
                var wfHistoryChild = await _uow.GetRepository<ITWorkflowHistory>().FindByAsync(x => x.ITInstanceId == wfInstance.Id && x.ParentHistoryId == currentWfHistory.Id);
                if (wfHistoryChild.Any())
                {
                    foreach (var histry in wfHistoryChild)
                    {
                        if (!string.IsNullOrEmpty(histry.AssignerLoginName) && histry.AssignerLoginName == approverUser.LoginName && histry.AssignerId.HasValue && histry.AssignerId == approverUser.Id)
                        {
                            _uow.GetRepository<ITWorkflowHistory>().Delete(histry);
                        }
                    }
                }

                var allCurrentTaskTask = await _uow.GetRepository<ITWorkflowTask>().FindByAsync(x =>
                    x.ItemId == args.ItemId
                    && !x.IsCompleted
                    , "Created desc");
                allCurrentTaskTask = allCurrentTaskTask.Where(x =>
                    approverUserDepartmentMapping.Any(y =>
                    (y.UserId == x.AssignedToId) ||
                    (y.DepartmentId == x.AssignedToDepartmentId && ((y.Role == x.AssignedToDepartmentGroup) || (y.ITUserDepartmentMapping != null && y.ITUserDepartmentMapping.GroupEdoc1.HasValue ? y.ITUserDepartmentMapping.GroupEdoc1.Value == x.AssignedToDepartmentGroup : false)))
                    )).ToList();

                var currentWfTask = allCurrentTaskTask.ToList().FirstOrDefault();
                if (currentWfTask != null)
                {
                    var wfChild = await _uow.GetRepository<ITWorkflowTask>().FindByAsync(x => x.ITWorkflowInstanceId == wfInstance.Id && x.ParentTaskId == currentWfTask.Id);
                    if (wfChild.Any())
                    {
                        foreach(var task in wfChild)
                        {
                            if (!string.IsNullOrEmpty(task.AssignerLoginName) && task.AssignerLoginName == approverUser.LoginName && task.AssignerId.HasValue && task.AssignerId == approverUser.Id)
                            {
                                _uow.GetRepository<ITWorkflowTask>().Delete(task);
                            }    
                        }
                    }
                }

                modelReturn = new WorkflowProcessingStageReturn()
                {
                    ItemStatus = wfInstance.ItemStatus,
                    ItemId = wfInstance.ItemId,
                    ReferenceNumber = wfInstance.ItemReferenceNumber,
                    WorkflowInstance = new List<ITWorkflowInstanceViewModelAPI>() { Mapper.Map<ITWorkflowInstanceViewModelAPI>(wfInstance) }
                };
                if (modelReturn.WorkflowInstance.Any())
                {
                    modelReturn.WorkflowInstance[0].ITWorkflowHistories = new List<ITWorkflowHistoryViewModel>() { Mapper.Map<ITWorkflowHistoryViewModel>(currentWfHistory) };
                    modelReturn.WorkflowInstance[0].ITWorkflowTasks = new List<ITWorkflowTaskViewModel>() { Mapper.Map<ITWorkflowTaskViewModel>(currentWfTask) };
                }

                trackingLog.ItemId = args.ItemId.Value;
                trackingLog.Payload = JsonConvert.SerializeObject(args);
                trackingLog.Response = JsonConvert.SerializeObject(modelReturn);
                _uow.GetRepository<TrackingAPILogs>().Add(trackingLog);
                resultDto.Object = modelReturn;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message }, ErrorCodes = new List<int>() { -1 } };
            }
        Finish:
            trackingLog.Response = JsonConvert.SerializeObject(resultDto);
            _uow.GetRepository<TrackingAPILogs>().Add(trackingLog);
            await _uow.CommitAsync();
            return resultDto;
        }

        public async Task<ResultDTO> UpdateDIC()
        {
            var resultDto = new ResultDTO() { };
            try
            {
                var ListDIC = new List<UpdateDIC>();
                ListDIC.Add(new UpdateDIC() { DeptCode = "DEP6000003", DICCode = "EC" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50037828", DICCode = "Wellness" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001066", DICCode = "SCM" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001081", DICCode = "CSS" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "DEP5000019", DICCode = "SO" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40002250", DICCode = "1002" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40000068", DICCode = "1003" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40003207", DICCode = "1004" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001349", DICCode = "MKT" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "DEP4077044", DICCode = "Quality" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "DEP4077025", DICCode = "HR-MP" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50022367", DICCode = "HR-T&D" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001146", DICCode = "HR-PM" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001094", DICCode = "HR-CNB" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001164", DICCode = "Legal" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001036", DICCode = "SM" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001318", DICCode = "CONS" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40004149", DICCode = "MD" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40004151", DICCode = "MDSL" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40004278", DICCode = "MDHL" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50026258", DICCode = "MDFL" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001299", DICCode = "IA" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50036382", DICCode = "IT" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50026270", DICCode = "ADM" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001185", DICCode = "ACC" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50028251", DICCode = "MHNO" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40004156", DICCode = "Kids" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50021204", DICCode = "CC" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001155", DICCode = "LSES" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50021348", DICCode = "CSR" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001372", DICCode = "1001" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "DEP4077007", DICCode = "Bike" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "DEP4077007", DICCode = "DS" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50018769", DICCode = "FST" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001010", DICCode = "BOED" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40004566", DICCode = "1005" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50021419", DICCode = "1006" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "DEP4077007", DICCode = "Pet" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001187", DICCode = "FINC" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50018766", DICCode = "MA" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40004501", DICCode = "SSSC" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50026662", DICCode = "SMP" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001018", DICCode = "FM" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40004256", DICCode = "MMDB" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001316", DICCode = "DMS" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50020927", DICCode = "DEVN" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50031545", DICCode = "MDPB" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "DEP4077014", DICCode = "4000" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50033533", DICCode = "LS" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50037876", DICCode = "GBOS" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "DEP608383", DICCode = "PQA" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "DEP5000008", DICCode = "BB" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "DEP5000012", DICCode = "ITOISS" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001345", DICCode = "GP" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40001345", DICCode = "AS" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "DEP4077032", DICCode = "1009" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "40004576", DICCode = "SVD" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "50030931", DICCode = "CST" });
                ListDIC.Add(new UpdateDIC() { DeptCode = "DEP5000011", DICCode = "CMOST" });

                foreach(var dtl in ListDIC)
                {
                    var deptCode = await _uow.GetRepository<Department>().GetSingleAsync(x => x.Code == dtl.DeptCode);
                    if (deptCode != null)
                    {
                        var deptCodeIT = await _uow.GetRepository<ITDepartment>().GetSingleAsync(x => x.Id == deptCode.Id);
                        if (deptCodeIT != null)
                        {
                            var dic = await _uow.GetRepository<Participant>().GetSingleAsync(x => x.Code == "isDIC");
                            if (dic != null)
                            {
                                var dataDIC = new ParticipantTypeModel { id = dic.Id.ToString(), code = dic.Code, name = dic.ParticipantType };
                                if (string.IsNullOrEmpty(deptCodeIT.ParticipantType))
                                {
                                    List<ParticipantTypeModel> list = new List<ParticipantTypeModel>() { dataDIC };
                                    deptCodeIT.ParticipantType = JsonConvert.SerializeObject(list);
                                    deptCodeIT.DICCode = dtl.DICCode;
                                }
                                else
                                {
                                    var convertData = Mapper.Map<List<ParticipantTypeModel>>(JsonConvert.DeserializeObject<List<ParticipantTypeModel>>(deptCodeIT.ParticipantType));
                                    if (convertData != null && convertData.Any(x => x.code != dataDIC.code))
                                    {
                                        convertData.Add(dataDIC);
                                        deptCodeIT.ParticipantType = JsonConvert.SerializeObject(convertData);
                                        deptCodeIT.DICCode = dtl.DICCode;
                                    }
                                }
                            }
                        }
                    }
                }
                resultDto.Object = _uow.CommitAsync();
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message } };
            }
        }

        public async Task<ResultDTO> UpdateDepartmentMappings()
        {
            var resultDto = new ResultDTO() { };
            try
            {
                var ListDIC = new List<UpdateDepartmentMapping>();
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Binh Tan Store - Foodline 1", CodeEdoc2 = "40003240" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ha Dong Store - Softline", CodeEdoc2 = "	50019661" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Le Chan Store - Foodline 1", CodeEdoc2 = "50021729" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "HNoi - Merchandising - Delica", CodeEdoc2 = "DEP08909" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Long Bien Store", CodeEdoc2 = "40000068" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Long Bien Store - Softline", CodeEdoc2 = "40000072" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Long Bien Store - Admin Store", CodeEdoc2 = "40000255" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Long Bien Store - Foodline 1", CodeEdoc2 = "40000295" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Long Bien Store - Hardline", CodeEdoc2 = "40000450" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Long Bien Store - Foodline 2", CodeEdoc2 = "40000623" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Long Bien Store - MMD", CodeEdoc2 = "40000795" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Supply Chain Management", CodeEdoc2 = "40001066" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Supply Chain Manganement", CodeEdoc2 = "40001066" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "RDC Operation Management", CodeEdoc2 = "40001068" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "HR - Strategic Planning", CodeEdoc2 = "40001132" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "CNBO & COO", CodeEdoc2 = "40001344" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Group Member Project", CodeEdoc2 = "40001345" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Group Point", CodeEdoc2 = "40001345" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Celadon Store", CodeEdoc2 = "40001372" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Celadon Store - Admin Store", CodeEdoc2 = "40001374" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Celadon Store - Customer service", CodeEdoc2 = "40001405" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Celadon Store - Hardline", CodeEdoc2 = "40001443" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Celadon Store - Foodline 1", CodeEdoc2 = "40001593" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Celadon Store - MMD", CodeEdoc2 = "40001750" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Celadon Store - Softline", CodeEdoc2 = "40001783" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Celadon Store - Foodline 2", CodeEdoc2 = "40001930" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Celadon Store - Cashier", CodeEdoc2 = "40002079" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Canary Store", CodeEdoc2 = "40002250" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Canary store - Admin Store", CodeEdoc2 = "40002252" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Canary store - Foodline 1", CodeEdoc2 = "40002306" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Canary store - Hardline", CodeEdoc2 = "40002483" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Canary store - Softline", CodeEdoc2 = "40002653" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Canary store - MMD", CodeEdoc2 = "40002792" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Canary store - Foodline 2", CodeEdoc2 = "40003056" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Binh Tan Store", CodeEdoc2 = "40003207" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Binh Tan Store - Admin Store", CodeEdoc2 = "40003209" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Binh Tan Store - Foodline 2", CodeEdoc2 = "40003403" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Binh Tan Store - Softline", CodeEdoc2 = "40003598" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Binh Tan Store - Hardline", CodeEdoc2 = "40003756" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Binh Tan Store - MMD", CodeEdoc2 = "40003913" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Business Monitoring", CodeEdoc2 = "40004142" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Merchandising - Softline", CodeEdoc2 = "40004151" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Kids", CodeEdoc2 = "40004156" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "LADIES, MEN, INNER", CodeEdoc2 = "40004169" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "GMS - Grocery", CodeEdoc2 = "40004217" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "D&D", CodeEdoc2 = "40004250" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Monitor Manager - Delica & Bakery", CodeEdoc2 = "40004256" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "GMS - Delica & Bakery", CodeEdoc2 = "40004256" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Merchandising - Hardline", CodeEdoc2 = "40004278" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "HH, HF & DIY", CodeEdoc2 = "40004281" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "HouseHold & DIY", CodeEdoc2 = "40004283" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Hardline - Stationery, Bike, Sport", CodeEdoc2 = "40004311" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Strategic Special Store - Coordinator", CodeEdoc2 = "40004501" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ha Dong Store", CodeEdoc2 = "40004566" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Store Visual Development", CodeEdoc2 = "40004576" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ha Dong Store - Admin Store", CodeEdoc2 = "50018237" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Merchandising - Private Brand Product", CodeEdoc2 = "50018809" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ha Dong Store - Cashier", CodeEdoc2 = "50019631" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ha Dong Store - Customer Service", CodeEdoc2 = "50019631" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ha Dong Store - Foodline 1", CodeEdoc2 = "50019769" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ha Dong Store - Foodline 2", CodeEdoc2 = "50019978" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ha Dong Store - MMD", CodeEdoc2 = "50019981" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ha Dong Store - Hardline", CodeEdoc2 = "50020474" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Le Chan Store", CodeEdoc2 = "50021419" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Le Chan Store - Softline", CodeEdoc2 = "50021617" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Le Chan Store - Foodline 2", CodeEdoc2 = "50021848" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Le Chan Store - Hardline", CodeEdoc2 = "50022058" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Le Chan Store - MMD", CodeEdoc2 = "50022070" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Le Chan Store - Admin Store", CodeEdoc2 = "50022102" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Merchandising - Foodline", CodeEdoc2 = "50026258" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Glam Beautique (G6)", CodeEdoc2 = "50030106" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MVL Ha Tri (Hyundai)", CodeEdoc2 = "50030681" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "CMO Special Task - HCM", CodeEdoc2 = "50030931" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Business Partner - New Biz", CodeEdoc2 = "50031230" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Merchandising - Private Brand", CodeEdoc2 = "50031545" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Canary Store - Omni Channel", CodeEdoc2 = "50033022" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Canary store - Cashier", CodeEdoc2 = "50033032" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Canary store - Customer service", CodeEdoc2 = "50033032" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Long Bien Store - Cashier", CodeEdoc2 = "50033041" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Long Bien Store - Customer service", CodeEdoc2 = "50033041" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ha Dong Store - Omni Channel", CodeEdoc2 = "50033043" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Binh Tan Store - Omni Channel", CodeEdoc2 = "50033049" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Binh Tan Store - Cashier", CodeEdoc2 = "50033055" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Binh Tan Store - Customer service", CodeEdoc2 = "50033055" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "SBA & Sports", CodeEdoc2 = "50033084" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Leasing", CodeEdoc2 = "50033533" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "EC Operation", CodeEdoc2 = "50033818" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MVL Horizon", CodeEdoc2 = "50034021" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Back Office Coordinator", CodeEdoc2 = "50035810" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Glam Beautique", CodeEdoc2 = "50037828" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Glam Beautique - Operation", CodeEdoc2 = "50037876" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "SuperMarket Line (G6)", CodeEdoc2 = "50038733" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "SuperMarket Line", CodeEdoc2 = "50039160" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Finance Control", CodeEdoc2 = "DEP05873" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MVL Vu Tong Phan (Riverside)", CodeEdoc2 = "DEP05886" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ecopark Store", CodeEdoc2 = "DEP05888" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "EC Sales", CodeEdoc2 = "DEP06003" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ha Noi Office - Softline", CodeEdoc2 = "DEP08910" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Le Chan Store - Omni Channel", CodeEdoc2 = "DEP2077154" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MVL Truc Tay Thang Long (Lotus)", CodeEdoc2 = "DEP3077016" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MVL Van Tan (LinhDam)", CodeEdoc2 = "DEP3077017" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "West Bay Store", CodeEdoc2 = "DEP3077019" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MVL Ocean Park", CodeEdoc2 = "DEP3077031" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MVL The Five", CodeEdoc2 = "DEP3077072" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MVL Kosmo", CodeEdoc2 = "DEP3077103" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MVL Florence", CodeEdoc2 = "DEP3077115" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MVL Fraser", CodeEdoc2 = "DEP3077116" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MVL La Casta", CodeEdoc2 = "DEP3077117" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MVL ZenPark", CodeEdoc2 = "DEP3077128" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Home Fashion", CodeEdoc2 = "DEP3077156" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MVL Ecopark3", CodeEdoc2 = "DEP3077194" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Delica Factory Store", CodeEdoc2 = "DEP308290" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ha Noi Office - Hardline", CodeEdoc2 = "DEP4076997" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Celadon Store - Omni Channel", CodeEdoc2 = "DEP4077000" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Strategic Special Store - Daiso", CodeEdoc2 = "DEP4077007" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "HNO - Customer Service & Satisfaction", CodeEdoc2 = "DEP4077010" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Long Bien Store - Omni Channel", CodeEdoc2 = "DEP4077012" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "The Nine Store", CodeEdoc2 = "DEP4077014" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "HR - Talent Acquisition", CodeEdoc2 = "DEP4077025" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Le Chan Store - Cashier", CodeEdoc2 = "DEP4077031" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Le Chan Store - Customer Service", CodeEdoc2 = "DEP4077031" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "AEON Binh Duong New City", CodeEdoc2 = "DEP4077032" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "HRIS", CodeEdoc2 = "DEP4077041" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Quality Control", CodeEdoc2 = "DEP4077044" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Innovation", CodeEdoc2 = "DEP4077046" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Aeon Nguyen Van Linh", CodeEdoc2 = "DEP4077049" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Ha Noi Office - QC", CodeEdoc2 = "DEP408378" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Hygiene Management", CodeEdoc2 = "DEP408378" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "SL & HL - Private Brand Product", CodeEdoc2 = "DEP5000001" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "B2B", CodeEdoc2 = "DEP5000008" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Task Force", CodeEdoc2 = "DEP5000010" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "CMO Special Task - HN", CodeEdoc2 = "DEP5000011" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "SM Development", CodeEdoc2 = "DEP5000013" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Strategic Special Store", CodeEdoc2 = "DEP5000014" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Electric, Sport, Bike & Stationery", CodeEdoc2 = "DEP5000015" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MD HL - Electric - MM - Sport - Stationary", CodeEdoc2 = "DEP5000015" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "MD Softline - Men - Lady - Inner", CodeEdoc2 = "DEP5000016" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Private Brand - Planning", CodeEdoc2 = "DEP5000017" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Store Operation", CodeEdoc2 = "DEP5000019" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Perishable Hnoi", CodeEdoc2 = "DEP508380" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Aeon Mall - Marketing", CodeEdoc2 = "FIN0007" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Aeon Mall - Tenant", CodeEdoc2 = "FIN0009" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Aeon Mall - Accounting", CodeEdoc2 = "FIN0010" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Aeon Mall - Facility & Security", CodeEdoc2 = "FIN0011" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Supermarket Project", CodeEdoc2 = "SMPT" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "SuperMarket Business", CodeEdoc2 = "SMPT" });
                ListDIC.Add(new UpdateDepartmentMapping() { DepartmentNameEdoc1 = "Merchandising Strategy", CodeEdoc2 = "SSS" });
                var handle = new HandleDepartmentEdoc1();
                var departmentEdoc1 = handle.GetDepartmentEdoc1();
                foreach (var dtl in ListDIC)
                {
                    var deptEdoc1 = departmentEdoc1.Where(x => x.Name.ToLower().Equals(dtl.DepartmentNameEdoc1.ToLower())).FirstOrDefault();
                    if (deptEdoc1 != null)
                    {
                        var departmentEdoc2 = _uow.GetRepository<Department>().GetSingle(x => x.Code.ToLower().Equals(dtl.CodeEdoc2.ToLower()));
                        if (departmentEdoc2 != null)
                        {
                            var departmentMapping = new DepartmentMapping()
                            {
                                DepartmentEdoc1Code = string.IsNullOrEmpty(deptEdoc1.Code) ? "" : deptEdoc1.Code,
                                DepartmentEdoc1Name = string.IsNullOrEmpty(deptEdoc1.Name) ? "" : deptEdoc1.Name,
                                DepartmentEdoc1Number = deptEdoc1.Number.HasValue ? deptEdoc1.Number : null,
                                DepartmentEdoc1Id = deptEdoc1.ID,
                                DepartmentEdoc2Id = departmentEdoc2.Id
                            };
                            _uow.GetRepository<DepartmentMapping>().Add(departmentMapping);
                        }
                    }
                }
                resultDto.Object = _uow.CommitAsync();
                return resultDto;
            }
            catch (Exception ex)
            {
                logger.LogError(ex.Message, ex);
                return new ResultDTO() { Messages = new List<string>() { ex.Message } };
            }
        }
    }

    public class UpdateDepartmentMapping
    {
        public string DepartmentNameEdoc1 { get; set; }
        public string CodeEdoc2 { get; set; }
    }

    public class UpdateDIC
    {
        public string DeptCode { get; set; }
        public string DICCode { get; set; }
    }

    public class ParticipantTypeModel
    {
        public string id { get; set; }
        public string code { get; set; }
        public string name { get; set; }
    }
}
